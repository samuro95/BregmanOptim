Search.setIndex({"alltitles": {"1. Data augmentation": [[17, "data-augmentation"]], "2. Equivariant denoiser or plug-and-play": [[17, "equivariant-denoiser-or-plug-and-play"]], "3. Equivariant imaging": [[17, "equivariant-imaging"]], "3D convolutions": [[11, "d-convolutions"]], "3D diffraction PSF": [[11, null]], "3D wavelet denoising": [[20, null]], "A tour of blur operators": [[4, null]], "A tour of forward sensing operators": [[15, null]], "ADMMIteration": [[189, null]], "Advanced": [[19, "advanced"]], "Advanced transforms": [[68, "advanced-transforms"]], "Adversarial Learning": [[19, "adversarial-learning"], [60, "adversarial-learning"]], "Adversarial Networks": [[58, "adversarial-networks"]], "AdversarialTrainer": [[273, null]], "Affine": [[282, null]], "AmplitudeLoss": [[181, null]], "Apply matched filtering to recover the signal and plot the results": [[9, "apply-matched-filtering-to-recover-the-signal-and-plot-the-results"]], "Apply transformation on dataset": [[8, "apply-transformation-on-dataset"]], "Artifact2ArtifactLoss": [[86, null]], "Artifact2ArtifactSplittingMaskGenerator": [[249, null]], "ArtifactRemoval": [[128, null]], "AutoEncoder": [[129, null]], "BM3D": [[130, null]], "BaseDEQ": [[286, null]], "BaseLossScheduler": [[87, null]], "BaseMaskGenerator": [[250, null]], "BaseOptim": [[159, null]], "BaseUnfold": [[287, null]], "Basics": [[19, "basics"]], "Benefits of using a decomposable forward operator.": [[14, "benefits-of-using-a-decomposable-forward-operator"]], "BernoulliSplittingMaskGenerator": [[251, null]], "Blur": [[15, "blur"], [200, null]], "Blur & Super-Resolution": [[66, "blur-super-resolution"]], "Blur generators": [[4, "blur-generators"]], "BlurFFT": [[201, null]], "Bregman": [[64, "bregman"], [176, null]], "BregmanL2": [[177, null]], "Bregman_ICNN": [[178, null]], "Build Sampler class": [[33, "build-sampler-class"]], "Building your custom sampling algorithm.": [[33, null]], "BurgEntropy": [[179, null]], "CBSD68": [[74, null]], "CPABDiffeomorphism": [[274, null]], "CPIteration": [[190, null]], "CSGM / AmbientGAN training": [[2, "csgm-ambientgan-training"]], "CSGMGenerator": [[131, null]], "Check learned noise level": [[46, "check-learned-noise-level"]], "Classical Denoisers": [[58, "classical-denoisers"]], "Complex Denoisers": [[58, "complex-denoisers"]], "Compressed Sensing": [[15, "compressed-sensing"]], "CompressedSensing": [[202, null]], "Compressive operators": [[66, "compressive-operators"]], "Computation times": [[1, null], [3, null], [18, null], [23, null], [26, null], [32, null], [38, null], [47, null], [48, null], [55, null], [72, null]], "Computed Tomography": [[15, "computed-tomography"]], "Concatenating forward operators.": [[12, "concatenating-forward-operators"]], "Conditional GAN training": [[2, "conditional-gan-training"]], "Confocal microscope PSF": [[11, "confocal-microscope-psf"]], "ConvDecoder": [[132, null]], "Convolution Basics": [[4, "convolution-basics"]], "Create a Monte Carlo sampler": [[34, "create-a-monte-carlo-sampler"]], "Create a dataloader": [[6, "create-a-dataloader"], [8, "create-a-dataloader"]], "Create forward model": [[9, "create-forward-model"]], "Create the MCMC sampler": [[37, "create-the-mcmc-sampler"]], "Create the Monte Carlo sampler": [[34, "create-the-monte-carlo-sampler"]], "Create the denoising operator and solve the problem.": [[20, "create-the-denoising-operator-and-solve-the-problem"]], "Create the preconditioned and standard ULA samplers": [[33, "create-the-preconditioned-and-standard-ula-samplers"]], "Creating a custom forward operator.": [[14, "creating-a-custom-forward-operator"]], "Creating a decomposable forward operator.": [[14, "creating-a-decomposable-forward-operator"]], "Creating a forward operator.": [[14, null]], "Creating your own dataset": [[6, null]], "DCGANDiscriminator": [[133, null]], "DCGANGenerator": [[134, null]], "DDRM": [[264, null]], "DEQ_builder": [[288, null]], "DIV2K": [[75, null]], "DPIR": [[160, null]], "DPIR method for PnP image deblurring.": [[27, null]], "DPS": [[265, null]], "DPS Algorithm": [[36, "dps-algorithm"]], "DPS approximation": [[36, "dps-approximation"]], "DRSIteration": [[191, null]], "DRUNet": [[135, null]], "Data Fidelity": [[64, "data-fidelity"]], "Data fidelity step": [[35, "data-fidelity-step"]], "DataFidelity": [[182, null]], "Datasets": [[57, null]], "Decolorize": [[15, "decolorize"], [203, null]], "DecomposablePhysics": [[204, null]], "Deep Denoisers": [[58, "deep-denoisers"]], "Deep Equilibrium": [[69, "deep-equilibrium"]], "Deep Equilibrium (DEQ) algorithms for image deblurring": [[49, null]], "Deep Image Prior": [[59, "deep-image-prior"]], "DeepImagePrior": [[136, null]], "DeepInverse: a Pytorch library for imaging with deep learning": [[71, null]], "Define a custom iterator for the PDNet learned primal-dual algorithm.": [[52, "define-a-custom-iterator-for-the-pdnet-learned-primal-dual-algorithm"]], "Define a custom optimization algorithm": [[28, "define-a-custom-optimization-algorithm"]], "Define a forward operator": [[10, "define-a-forward-operator"]], "Define a model": [[10, "define-a-model"]], "Define diffusion schedule": [[36, "define-diffusion-schedule"]], "Define forward operator and generate dataset": [[16, "define-forward-operator-and-generate-dataset"], [53, "define-forward-operator-and-generate-dataset"]], "Define forward operator and noise model": [[7, "define-forward-operator-and-noise-model"], [33, "define-forward-operator-and-noise-model"], [34, "define-forward-operator-and-noise-model"], [37, "define-forward-operator-and-noise-model"]], "Define loss": [[44, "define-loss"]], "Define model": [[39, "define-model"], [44, "define-model"]], "Define models": [[2, "define-models"]], "Define physics": [[39, "define-physics"]], "Define physics operator": [[5, "define-physics-operator"]], "Define the  DEQ algorithm.": [[49, "define-the-deq-algorithm"]], "Define the MMSE denoiser": [[34, "define-the-mmse-denoiser"]], "Define the PnP algorithm.": [[29, "define-the-pnp-algorithm"]], "Define the custom fStep and gStep modules": [[28, "define-the-custom-fstep-and-gstep-modules"]], "Define the deep image prior": [[7, "define-the-deep-image-prior"]], "Define the likelihood": [[37, "define-the-likelihood"]], "Define the model.": [[52, "define-the-model"]], "Define the prior": [[33, "define-the-prior"], [37, "define-the-prior"]], "Define the sampling iteration": [[33, "define-the-sampling-iteration"]], "Define the trainable prior and data fidelity terms.": [[52, "define-the-trainable-prior-and-data-fidelity-terms"]], "Define the training parameters.": [[49, "define-the-training-parameters"], [50, "define-the-training-parameters"], [51, "define-the-training-parameters"], [52, "define-the-training-parameters"], [54, "define-the-training-parameters"]], "Define the unfolded PnP algorithm.": [[54, "define-the-unfolded-pnp-algorithm"]], "Define the unfolded Proximal Gradient algorithm.": [[50, "define-the-unfolded-proximal-gradient-algorithm"], [51, "define-the-unfolded-proximal-gradient-algorithm"]], "Define the unfolded trainable model.": [[52, "define-the-unfolded-trainable-model"]], "Defining new operators": [[66, "defining-new-operators"]], "Definition of forward operator and noise model": [[25, "definition-of-forward-operator-and-noise-model"]], "Dehazing": [[66, "dehazing"]], "Demosaicing": [[15, "demosaicing"], [205, null]], "Denoisers": [[58, null]], "Denoising": [[15, "denoising"], [24, "denoising"], [206, null]], "Denoising step": [[35, "denoising-step"], [36, "denoising-step"]], "DiffPIR": [[266, null]], "DiffUNet": [[137, null]], "Diffraction PSF generation": [[11, "diffraction-psf-generation"]], "Diffraction blur generators": [[4, "diffraction-blur-generators"]], "DiffractionBlurGenerator": [[252, null]], "DiffractionBlurGenerator3D": [[253, null]], "Diffusion": [[67, "diffusion"]], "Diffusion Algorithms": [[67, null]], "Diffusion model loading": [[36, "diffusion-model-loading"]], "DiffusionSampler": [[267, null]], "DiscriminatorLoss": [[109, null]], "DiscriminatorMetric": [[110, null]], "Distortion metrics": [[61, "distortion-metrics"]], "DnCNN": [[138, null]], "Downsampling": [[207, null]], "DynamicMRI": [[208, null]], "EILoss": [[88, null]], "EPLL": [[161, null]], "EPLLDenoiser": [[139, null]], "ESRGANDiscriminator": [[140, null]], "EquispacedMaskGenerator": [[254, null]], "Equivariant Denoisers": [[58, "equivariant-denoisers"]], "EquivariantDenoiser": [[141, null]], "Euclidean": [[283, null]], "Evaluate the model on the problem and plot the results.": [[21, "evaluate-the-model-on-the-problem-and-plot-the-results"], [22, "evaluate-the-model-on-the-problem-and-plot-the-results"], [28, "evaluate-the-model-on-the-problem-and-plot-the-results"], [29, "evaluate-the-model-on-the-problem-and-plot-the-results"], [31, "evaluate-the-model-on-the-problem-and-plot-the-results"]], "Evaluate the model on the problem.": [[27, "evaluate-the-model-on-the-problem"], [30, "evaluate-the-model-on-the-problem"]], "Evaluate the reconstruction algorithm on the problem.": [[5, "evaluate-the-reconstruction-algorithm-on-the-problem"]], "Examples": [[19, null]], "Examples using AdversarialTrainer:": [[273, "examples-using-adversarialtrainer"]], "Examples using Affine:": [[282, "examples-using-affine"]], "Examples using Artifact2ArtifactLoss:": [[86, "examples-using-artifact2artifactloss"]], "Examples using ArtifactRemoval:": [[128, "examples-using-artifactremoval"]], "Examples using BaseDEQ:": [[286, "examples-using-basedeq"]], "Examples using BaseMaskGenerator:": [[250, "examples-using-basemaskgenerator"]], "Examples using BaseOptim:": [[159, "examples-using-baseoptim"]], "Examples using BaseUnfold:": [[287, "examples-using-baseunfold"]], "Examples using BernoulliSplittingMaskGenerator:": [[251, "examples-using-bernoullisplittingmaskgenerator"]], "Examples using Blur:": [[200, "examples-using-blur"]], "Examples using BlurFFT:": [[201, "examples-using-blurfft"]], "Examples using CPABDiffeomorphism:": [[274, "examples-using-cpabdiffeomorphism"]], "Examples using CPIteration:": [[190, "examples-using-cpiteration"]], "Examples using CSGMGenerator:": [[131, "examples-using-csgmgenerator"]], "Examples using CompressedSensing:": [[202, "examples-using-compressedsensing"]], "Examples using ConvDecoder:": [[132, "examples-using-convdecoder"]], "Examples using DCGANDiscriminator:": [[133, "examples-using-dcgandiscriminator"]], "Examples using DCGANGenerator:": [[134, "examples-using-dcgangenerator"]], "Examples using DDRM:": [[264, "examples-using-ddrm"]], "Examples using DEQ_builder:": [[288, "examples-using-deq-builder"]], "Examples using DPIR:": [[160, "examples-using-dpir"]], "Examples using DPS:": [[265, "examples-using-dps"]], "Examples using DRUNet:": [[135, "examples-using-drunet"]], "Examples using Decolorize:": [[203, "examples-using-decolorize"]], "Examples using DecomposablePhysics:": [[204, "examples-using-decomposablephysics"]], "Examples using DeepImagePrior:": [[136, "examples-using-deepimageprior"]], "Examples using Demosaicing:": [[205, "examples-using-demosaicing"]], "Examples using Denoising:": [[206, "examples-using-denoising"]], "Examples using DiffPIR:": [[266, "examples-using-diffpir"]], "Examples using DiffUNet:": [[137, "examples-using-diffunet"]], "Examples using DiffractionBlurGenerator3D:": [[253, "examples-using-diffractionblurgenerator3d"]], "Examples using DiffractionBlurGenerator:": [[252, "examples-using-diffractionblurgenerator"]], "Examples using DiffusionSampler:": [[267, "examples-using-diffusionsampler"]], "Examples using DiscriminatorLoss:": [[109, "examples-using-discriminatorloss"]], "Examples using DnCNN:": [[138, "examples-using-dncnn"]], "Examples using Downsampling:": [[207, "examples-using-downsampling"]], "Examples using DynamicMRI:": [[208, "examples-using-dynamicmri"]], "Examples using EILoss:": [[88, "examples-using-eiloss"]], "Examples using EPLL:": [[161, "examples-using-epll"]], "Examples using EquispacedMaskGenerator:": [[254, "examples-using-equispacedmaskgenerator"]], "Examples using EquivariantDenoiser:": [[141, "examples-using-equivariantdenoiser"]], "Examples using Euclidean:": [[283, "examples-using-euclidean"]], "Examples using FNEJacobianSpectralNorm:": [[89, "examples-using-fnejacobianspectralnorm"]], "Examples using GSDRUNet:": [[142, "examples-using-gsdrunet"]], "Examples using GaussianMaskGenerator:": [[255, "examples-using-gaussianmaskgenerator"]], "Examples using GaussianNoise:": [[210, "examples-using-gaussiannoise"]], "Examples using GaussianSplittingMaskGenerator:": [[256, "examples-using-gaussiansplittingmaskgenerator"]], "Examples using GeneratorLoss:": [[111, "examples-using-generatorloss"]], "Examples using GeneratorMixture:": [[257, "examples-using-generatormixture"]], "Examples using HDF5Dataset:": [[79, "examples-using-hdf5dataset"]], "Examples using Homography:": [[275, "examples-using-homography"]], "Examples using Inpainting:": [[212, "examples-using-inpainting"]], "Examples using LinearPhysics:": [[213, "examples-using-linearphysics"]], "Examples using LogPoissonNoise:": [[214, "examples-using-logpoissonnoise"]], "Examples using Loss:": [[93, "examples-using-loss"]], "Examples using MCLoss:": [[94, "examples-using-mcloss"]], "Examples using MOILoss:": [[96, "examples-using-moiloss"]], "Examples using MRI:": [[215, "examples-using-mri"]], "Examples using MedianFilter:": [[144, "examples-using-medianfilter"]], "Examples using MonteCarlo:": [[268, "examples-using-montecarlo"]], "Examples using MotionBlurGenerator:": [[258, "examples-using-motionblurgenerator"]], "Examples using Neighbor2Neighbor:": [[97, "examples-using-neighbor2neighbor"]], "Examples using OptimIterator:": [[165, "examples-using-optimiterator"]], "Examples using PDNet_DualBlock:": [[145, "examples-using-pdnet-dualblock"]], "Examples using PDNet_PrimalBlock:": [[146, "examples-using-pdnet-primalblock"]], "Examples using PGDIteration:": [[195, "examples-using-pgditeration"]], "Examples using PanTiltRotate:": [[284, "examples-using-pantiltrotate"]], "Examples using Pansharpen:": [[216, "examples-using-pansharpen"]], "Examples using PatchDataset:": [[82, "examples-using-patchdataset"]], "Examples using PatchGANDiscriminator:": [[147, "examples-using-patchgandiscriminator"]], "Examples using PatchNR:": [[166, "examples-using-patchnr"]], "Examples using PatchPrior:": [[167, "examples-using-patchprior"]], "Examples using Phase2PhaseLoss:": [[98, "examples-using-phase2phaseloss"]], "Examples using PhaseRetrieval:": [[217, "examples-using-phaseretrieval"]], "Examples using Physics:": [[218, "examples-using-physics"]], "Examples using PhysicsGenerator:": [[260, "examples-using-physicsgenerator"]], "Examples using PnP:": [[168, "examples-using-pnp"]], "Examples using PoissonGaussianNoise:": [[219, "examples-using-poissongaussiannoise"]], "Examples using PoissonNoise:": [[220, "examples-using-poissonnoise"]], "Examples using Potential:": [[169, "examples-using-potential"]], "Examples using Prior:": [[170, "examples-using-prior"]], "Examples using ProductConvolutionBlurGenerator:": [[261, "examples-using-productconvolutionblurgenerator"]], "Examples using RED:": [[171, "examples-using-red"]], "Examples using RadioInterferometry:": [[221, "examples-using-radiointerferometry"]], "Examples using RandomMaskGenerator:": [[262, "examples-using-randommaskgenerator"]], "Examples using RandomPhaseRetrieval:": [[222, "examples-using-randomphaseretrieval"]], "Examples using Reflect:": [[276, "examples-using-reflect"]], "Examples using Rotate:": [[277, "examples-using-rotate"]], "Examples using Scale:": [[278, "examples-using-scale"]], "Examples using ScorePrior:": [[172, "examples-using-scoreprior"]], "Examples using SequentialMRI:": [[223, "examples-using-sequentialmri"]], "Examples using Shift:": [[279, "examples-using-shift"]], "Examples using Similarity:": [[285, "examples-using-similarity"]], "Examples using SinglePhotonLidar:": [[224, "examples-using-singlephotonlidar"]], "Examples using SinglePixelCamera:": [[225, "examples-using-singlepixelcamera"]], "Examples using SpaceVaryingBlur:": [[226, "examples-using-spacevaryingblur"]], "Examples using SplittingLoss:": [[102, "examples-using-splittingloss"]], "Examples using SupAdversarialDiscriminatorLoss:": [[112, "examples-using-supadversarialdiscriminatorloss"]], "Examples using SupAdversarialGeneratorLoss:": [[113, "examples-using-supadversarialgeneratorloss"]], "Examples using SupLoss:": [[104, "examples-using-suploss"]], "Examples using SureGaussianLoss:": [[105, "examples-using-suregaussianloss"]], "Examples using SurePGLoss:": [[106, "examples-using-surepgloss"]], "Examples using SurePoissonLoss:": [[107, "examples-using-surepoissonloss"]], "Examples using TVPrior:": [[173, "examples-using-tvprior"]], "Examples using TensorList:": [[290, "examples-using-tensorlist"]], "Examples using TimeMixin:": [[227, "examples-using-timemixin"]], "Examples using Tomography:": [[228, "examples-using-tomography"]], "Examples using Trainer:": [[73, "examples-using-trainer"]], "Examples using Transform:": [[281, "examples-using-transform"]], "Examples using UAIRGeneratorLoss:": [[114, "examples-using-uairgeneratorloss"]], "Examples using ULA:": [[270, "examples-using-ula"]], "Examples using UNet:": [[155, "examples-using-unet"]], "Examples using UniformNoise:": [[230, "examples-using-uniformnoise"]], "Examples using UnsupAdversarialDiscriminatorLoss:": [[115, "examples-using-unsupadversarialdiscriminatorloss"]], "Examples using UnsupAdversarialGeneratorLoss:": [[116, "examples-using-unsupadversarialgeneratorloss"]], "Examples using Urban100HR:": [[84, "examples-using-urban100hr"]], "Examples using WaveletDenoiser:": [[156, "examples-using-waveletdenoiser"]], "Examples using WaveletDictDenoiser:": [[157, "examples-using-waveletdictdenoiser"]], "Examples using WaveletPrior:": [[175, "examples-using-waveletprior"]], "Examples using demo_mri_model:": [[291, "examples-using-demo-mri-model"]], "Examples using gaussian_blur:": [[234, "examples-using-gaussian-blur"]], "Examples using generate_dataset:": [[85, "examples-using-generate-dataset"]], "Examples using get_freer_gpu:": [[292, "examples-using-get-freer-gpu"]], "Examples using load_url_image:": [[294, "examples-using-load-url-image"]], "Examples using optim_builder:": [[188, "examples-using-optim-builder"]], "Examples using plot:": [[296, "examples-using-plot"]], "Examples using plot_curves:": [[297, "examples-using-plot-curves"]], "Examples using plot_inset:": [[298, "examples-using-plot-inset"]], "Examples using plot_ortho3D:": [[299, "examples-using-plot-ortho3d"]], "Examples using plot_parameters:": [[300, "examples-using-plot-parameters"]], "Examples using plot_videos:": [[301, "examples-using-plot-videos"]], "Examples using test:": [[271, "examples-using-test"]], "Examples using unfolded_builder:": [[289, "examples-using-unfolded-builder"]], "Expected Patch Log Likelihood (EPLL) for Denoising and Inpainting": [[24, null]], "Exploring the total variation prior.": [[21, "exploring-the-total-variation-prior"]], "Exploring the wavelet prior.": [[22, "exploring-the-wavelet-prior"]], "Extension to multiple wavelet bases.": [[20, "extension-to-multiple-wavelet-bases"]], "FISTAIteration": [[192, null]], "FMD": [[76, null]], "FNEJacobianSpectralNorm": [[89, null]], "FastMRISliceDataset": [[77, null]], "Featuring": [[71, "featuring"]], "Finding Help": [[71, "finding-help"]], "FixedPoint": [[162, null]], "Flickr2kHR": [[78, null]], "Forward operators": [[66, "forward-operators"]], "Functional": [[66, "functional"]], "GDIteration": [[193, null]], "GSDRUNet": [[142, null]], "GammaNoise": [[209, null]], "GaussianMaskGenerator": [[255, null]], "GaussianMixtureModel": [[197, null]], "GaussianNoise": [[210, null]], "GaussianSplittingMaskGenerator": [[256, null]], "General setup": [[13, "general-setup"]], "Generate a dataset of blurred images": [[5, "generate-a-dataset-of-blurred-images"]], "Generate a dataset of blurred images and load it.": [[21, "generate-a-dataset-of-blurred-images-and-load-it"], [27, "generate-a-dataset-of-blurred-images-and-load-it"]], "Generate a dataset of compressed measurements and load it.": [[50, "generate-a-dataset-of-compressed-measurements-and-load-it"], [51, "generate-a-dataset-of-compressed-measurements-and-load-it"]], "Generate a dataset of degraded images and load it.": [[6, "generate-a-dataset-of-degraded-images-and-load-it"]], "Generate a dataset of knee images and load it.": [[41, "generate-a-dataset-of-knee-images-and-load-it"]], "Generate a dataset of low resolution images and load it.": [[49, "generate-a-dataset-of-low-resolution-images-and-load-it"], [54, "generate-a-dataset-of-low-resolution-images-and-load-it"]], "Generate a dataset of noisy images": [[43, "generate-a-dataset-of-noisy-images"], [45, "generate-a-dataset-of-noisy-images"], [46, "generate-a-dataset-of-noisy-images"]], "Generate a dataset of subsampled images and load it.": [[42, "generate-a-dataset-of-subsampled-images-and-load-it"]], "Generate an inpainting problem": [[22, "generate-an-inpainting-problem"]], "Generate an inverse problem": [[35, "generate-an-inverse-problem"]], "Generate dataset": [[2, "generate-dataset"]], "Generate the measurement": [[7, "generate-the-measurement"], [33, "generate-the-measurement"], [34, "generate-the-measurement"], [37, "generate-the-measurement"]], "Generate toy image": [[12, "generate-toy-image"], [14, "generate-toy-image"]], "Generate toy signal and measurement": [[9, "generate-toy-signal-and-measurement"]], "Generator Mixture": [[4, "generator-mixture"]], "GeneratorLoss": [[111, null]], "GeneratorMixture": [[257, null]], "Generic Optimizers": [[64, "generic-optimizers"]], "Getting Started": [[71, "getting-started"]], "Groundtruth image": [[0, "groundtruth-image"]], "HD5Dataset": [[57, "hd5dataset"]], "HDF5Dataset": [[79, null]], "HQSIteration": [[194, null]], "Haze": [[211, null]], "Homography": [[275, null]], "How to Contribute": [[56, null]], "ICNN": [[143, null]], "IRadon": [[236, null]], "Image Datasets": [[57, "image-datasets"]], "Image deblurring with Total-Variation (TV) prior": [[21, null]], "Image deblurring with custom deep explicit prior.": [[5, null]], "Image inpainting with wavelet prior": [[22, null]], "Image reconstruction with a diffusion model": [[34, null]], "Image transformations for Equivariant Imaging": [[40, null]], "Image transforms for equivariance & augmentations": [[17, null]], "Imaging inverse problems with adversarial networks": [[2, null]], "Implementing DPS": [[36, null]], "Implementing DiffPIR": [[35, null]], "Implementing an Algorithm": [[59, "implementing-an-algorithm"]], "Import required packages": [[0, "import-required-packages"]], "IndicatorL2": [[183, null]], "Inpainting": [[15, "inpainting"], [24, "inpainting"], [212, null]], "Installation": [[71, "installation"]], "InterleavedEpochLossScheduler": [[90, null]], "InterleavedLossScheduler": [[91, null]], "Introduction": [[60, "introduction"], [61, "introduction"], [66, "introduction"]], "Iterating the Dykstra-like algorithm.": [[20, "iterating-the-dykstra-like-algorithm"]], "Iterative Reconstruction (PnP, RED, etc.)": [[59, null]], "Iterators": [[64, "iterators"]], "JacobianSpectralNorm": [[92, null]], "L1": [[184, null]], "L12Prior": [[163, null]], "L1L2": [[117, null]], "L1Prior": [[164, null]], "L2": [[185, null]], "LPIPS": [[118, null]], "Lead Developers": [[71, "lead-developers"]], "Learned Filtered Back-Projection": [[65, "learned-filtered-back-projection"]], "Learned Iterative Soft-Thresholding Algorithm (LISTA) for compressed sensing": [[50, null]], "Learned Primal-Dual algorithm for CT scan.": [[52, null]], "Learned iterative custom prior": [[51, null]], "LidcIdriSliceDataset": [[80, null]], "Linear operators": [[66, "linear-operators"]], "LinearPhysics": [[213, null]], "List of mathematical symbols": [[63, "id1"]], "Load base image datasets": [[6, "load-base-image-datasets"], [43, "load-base-image-datasets"], [45, "load-base-image-datasets"], [46, "load-base-image-datasets"]], "Load base image datasets and degradation operators.": [[5, "load-base-image-datasets-and-degradation-operators"], [16, "load-base-image-datasets-and-degradation-operators"], [21, "load-base-image-datasets-and-degradation-operators"], [22, "load-base-image-datasets-and-degradation-operators"], [27, "load-base-image-datasets-and-degradation-operators"], [28, "load-base-image-datasets-and-degradation-operators"], [30, "load-base-image-datasets-and-degradation-operators"], [41, "load-base-image-datasets-and-degradation-operators"], [42, "load-base-image-datasets-and-degradation-operators"], [49, "load-base-image-datasets-and-degradation-operators"], [50, "load-base-image-datasets-and-degradation-operators"], [51, "load-base-image-datasets-and-degradation-operators"], [53, "load-base-image-datasets-and-degradation-operators"], [54, "load-base-image-datasets-and-degradation-operators"]], "Load base volume image and denoising operators.": [[20, "load-base-volume-image-and-denoising-operators"]], "Load data": [[39, "load-data"]], "Load degradation operator.": [[52, "load-degradation-operator"]], "Load example image from the internet": [[34, "load-example-image-from-the-internet"]], "Load image and parameters": [[31, "load-image-and-parameters"]], "Load image from the internet": [[7, "load-image-from-the-internet"], [13, "load-image-from-the-internet"], [15, "load-image-from-the-internet"], [33, "load-image-from-the-internet"], [37, "load-image-from-the-internet"]], "Load libraries": [[8, "load-libraries"]], "Load test image and model": [[24, "load-test-image-and-model"]], "Load training and test images": [[25, "load-training-and-test-images"]], "Loading the model": [[53, "loading-the-model"]], "LogPoissonLikelihood": [[186, null]], "LogPoissonNoise": [[214, null]], "Loss": [[60, null], [93, null]], "Loss schedulers": [[60, "loss-schedulers"]], "LpNorm": [[119, null]], "LsdirHR": [[81, null]], "MAE": [[120, null]], "MCLoss": [[94, null]], "MOEILoss": [[95, null]], "MOILoss": [[96, null]], "MRI": [[15, "mri"], [215, null]], "MSE": [[121, null]], "Magnetic Resonance Imaging": [[66, "magnetic-resonance-imaging"]], "Markov Chain Monte Carlo Langevin": [[67, "markov-chain-monte-carlo-langevin"]], "Math Notation": [[63, null]], "Measurements generation": [[13, "measurements-generation"]], "MedianFilter": [[144, null]], "Metric": [[122, null]], "Metrics": [[61, null]], "MonteCarlo": [[268, null]], "Motion blur generators": [[4, "motion-blur-generators"]], "MotionBlurGenerator": [[258, null]], "NIQE": [[123, null]], "NMSE": [[124, null]], "Natural weighting and Briggs weighting": [[0, "natural-weighting-and-briggs-weighting"]], "NegEntropy": [[180, null]], "Neighbor2Neighbor": [[97, null]], "Network Regularization": [[60, "network-regularization"]], "Networks for time-varying data": [[65, "networks-for-time-varying-data"]], "Noise distributions": [[66, "noise-distributions"]], "Optim": [[64, null]], "OptimIterator": [[165, null]], "Optimization": [[19, "optimization"]], "Other": [[70, "other"]], "Other Reconstruction Methods": [[65, null]], "Overall comparison": [[13, "overall-comparison"]], "PDNet_DualBlock": [[145, null]], "PDNet_PrimalBlock": [[146, null]], "PGDIteration": [[195, null]], "PSNR": [[125, null]], "Pan-sharpening": [[15, "pan-sharpening"]], "PanTiltRotate": [[284, null]], "Pansharpen": [[216, null]], "Parameter-dependent operators": [[66, "parameter-dependent-operators"]], "Parameters": [[64, "parameters"]], "Patch Priors": [[19, "patch-priors"]], "Patch priors for limited-angle computed tomography": [[25, null]], "PatchDataset": [[57, "patchdataset"], [82, null]], "PatchGANDiscriminator": [[147, null]], "PatchNR": [[166, null]], "PatchPrior": [[167, null]], "Perceptual metrics": [[61, "perceptual-metrics"]], "Phase correction and signal reconstruction": [[13, "phase-correction-and-signal-reconstruction"], [13, "id1"], [13, "id2"], [13, "id3"]], "Phase retrieval": [[66, "phase-retrieval"]], "Phase2PhaseLoss": [[98, null]], "Phase2PhaseSplittingMaskGenerator": [[259, null]], "PhaseRetrieval": [[217, null]], "Physics": [[66, null], [218, null]], "Physics Generators": [[66, "physics-generators"]], "PhysicsGenerator": [[260, null]], "Pixelwise operators": [[66, "pixelwise-operators"]], "Plotting": [[70, "plotting"]], "Plotting the learned parameters.": [[50, "plotting-the-learned-parameters"]], "Plotting the weights of the network.": [[51, "plotting-the-weights-of-the-network"], [54, "plotting-the-weights-of-the-network"]], "Plug-and-Play": [[19, "plug-and-play"]], "Plug-and-Play algorithm with Mirror Descent for Poisson noise inverse problems.": [[29, null]], "PnP": [[168, null]], "PnP with custom optimization algorithm (Condat-Vu Primal-Dual)": [[28, null]], "PoissonGaussianNoise": [[219, null]], "PoissonLikelihood": [[187, null]], "PoissonNoise": [[220, null]], "Potential": [[169, null]], "Potentials": [[64, "potentials"]], "Predefined Iterative Algorithms": [[59, "predefined-iterative-algorithms"]], "Prep loss": [[39, "prep-loss"]], "Prepare data": [[44, "prepare-data"]], "Pretrained Weights": [[58, "pretrained-weights"]], "Prior": [[170, null]], "Priors": [[64, "priors"]], "ProductConvolutionBlurGenerator": [[261, null]], "Putting it all together: the DiffPIR algorithm": [[35, "putting-it-all-together-the-diffpir-algorithm"]], "QNR": [[126, null]], "R2RLoss": [[99, null]], "RED": [[171, null]], "Radio interferometric imaging": [[66, "radio-interferometric-imaging"]], "Radio interferometric imaging with deepinverse": [[0, null]], "RadioInterferometry": [[221, null]], "Radon": [[237, null]], "Random phase retrieval and reconstruction methods.": [[13, null]], "RandomLossScheduler": [[100, null]], "RandomMaskGenerator": [[262, null]], "RandomPhaseRetrieval": [[222, null]], "Reconstructing an image using the deep image prior.": [[7, null]], "Reconstruction loop": [[25, "reconstruction-loop"]], "Reconstruction with gradient descent and PnP denoisers": [[13, "reconstruction-with-gradient-descent-and-pnp-denoisers"]], "Reconstruction with gradient descent and random initialization": [[13, "reconstruction-with-gradient-descent-and-random-initialization"]], "Reconstruction with gradient descent and spectral methods initialization": [[13, "reconstruction-with-gradient-descent-and-spectral-methods-initialization"]], "Reconstruction with spectral methods": [[13, "reconstruction-with-spectral-methods"]], "Reflect": [[276, null]], "Regularization by Denoising (RED) for Super-Resolution.": [[30, null]], "Remote Sensing": [[66, "remote-sensing"]], "Restormer": [[148, null]], "Rotate": [[277, null]], "Run DIP algorithm and plot results": [[7, "run-dip-algorithm-and-plot-results"]], "Run and plot": [[25, "run-and-plot"]], "Run sampling algorithm and plot results": [[34, "run-sampling-algorithm-and-plot-results"], [37, "run-sampling-algorithm-and-plot-results"]], "Run sampling algorithms and plot results": [[33, "run-sampling-algorithms-and-plot-results"]], "Run the diffusion algorithm and plot results": [[34, "run-the-diffusion-algorithm-and-plot-results"]], "SCUNet": [[149, null]], "SKRock": [[269, null]], "SMIteration": [[196, null]], "SSIM": [[127, null]], "Sampling": [[19, "sampling"]], "Sampling pattern": [[0, "sampling-pattern"]], "Sampling step": [[35, "sampling-step"]], "Saving and loading models": [[10, null]], "Saving the model": [[53, "saving-the-model"]], "Scale": [[278, null]], "ScoreLoss": [[101, null]], "ScorePrior": [[172, null]], "Self-Supervised Learning": [[19, "self-supervised-learning"], [60, "self-supervised-learning"]], "Self-supervised MRI reconstruction with Artifact2Artifact": [[39, null]], "Self-supervised denoising with the Neighbor2Neighbor loss.": [[43, null]], "Self-supervised denoising with the SURE loss.": [[45, null]], "Self-supervised denoising with the UNSURE loss.": [[46, null]], "Self-supervised learning from incomplete measurements of multiple operators.": [[42, null]], "Self-supervised learning with Equivariant Imaging for MRI.": [[41, null]], "Self-supervised learning with measurement splitting": [[44, null]], "SequentialMRI": [[223, null]], "Set parameters for EPLL and PatchNR": [[25, "set-parameters-for-epll-and-patchnr"]], "Set the forward operator": [[28, "set-the-forward-operator"], [31, "set-the-forward-operator"]], "Set up the DPIR algorithm to solve the inverse problem.": [[27, "set-up-the-dpir-algorithm-to-solve-the-inverse-problem"]], "Set up the PnP algorithm to solve the inverse problem.": [[28, "set-up-the-pnp-algorithm-to-solve-the-inverse-problem"], [31, "set-up-the-pnp-algorithm-to-solve-the-inverse-problem"]], "Set up the denoiser network": [[43, "set-up-the-denoiser-network"], [45, "set-up-the-denoiser-network"], [46, "set-up-the-denoiser-network"]], "Set up the optimization algorithm to solve the inverse problem.": [[5, "set-up-the-optimization-algorithm-to-solve-the-inverse-problem"], [21, "set-up-the-optimization-algorithm-to-solve-the-inverse-problem"], [22, "set-up-the-optimization-algorithm-to-solve-the-inverse-problem"]], "Set up the reconstruction network": [[16, "set-up-the-reconstruction-network"], [41, "set-up-the-reconstruction-network"], [42, "set-up-the-reconstruction-network"], [53, "set-up-the-reconstruction-network"]], "Set up the training parameters": [[41, "set-up-the-training-parameters"], [42, "set-up-the-training-parameters"], [43, "set-up-the-training-parameters"], [45, "set-up-the-training-parameters"], [46, "set-up-the-training-parameters"]], "Set14HR": [[83, null]], "Setup paths for data loading and results.": [[5, "setup-paths-for-data-loading-and-results"], [6, "setup-paths-for-data-loading-and-results"], [10, "setup-paths-for-data-loading-and-results"], [16, "setup-paths-for-data-loading-and-results"], [20, "setup-paths-for-data-loading-and-results"], [21, "setup-paths-for-data-loading-and-results"], [22, "setup-paths-for-data-loading-and-results"], [27, "setup-paths-for-data-loading-and-results"], [28, "setup-paths-for-data-loading-and-results"], [29, "setup-paths-for-data-loading-and-results"], [30, "setup-paths-for-data-loading-and-results"], [31, "setup-paths-for-data-loading-and-results"], [41, "setup-paths-for-data-loading-and-results"], [42, "setup-paths-for-data-loading-and-results"], [43, "setup-paths-for-data-loading-and-results"], [45, "setup-paths-for-data-loading-and-results"], [46, "setup-paths-for-data-loading-and-results"], [49, "setup-paths-for-data-loading-and-results"], [50, "setup-paths-for-data-loading-and-results"], [51, "setup-paths-for-data-loading-and-results"], [52, "setup-paths-for-data-loading-and-results"], [53, "setup-paths-for-data-loading-and-results"], [54, "setup-paths-for-data-loading-and-results"]], "Setup the PnP algorithm. This involves in particular the definition of a custom prior class.": [[30, "setup-the-pnp-algorithm-this-involves-in-particular-the-definition-of-a-custom-prior-class"]], "Shift": [[279, null]], "ShiftTime": [[280, null]], "Shuffle data with buffer shuffling": [[8, "shuffle-data-with-buffer-shuffling"]], "SigmaGenerator": [[263, null]], "Signal construction": [[13, "signal-construction"]], "Similarity": [[285, null]], "Simple transforms": [[68, "simple-transforms"]], "Simulating the measurements": [[0, "simulating-the-measurements"]], "Single photon lidar operator for depth ranging.": [[9, null]], "Single-Pixel Camera": [[15, "single-pixel-camera"]], "Single-photon lidar": [[66, "single-photon-lidar"]], "SinglePhotonLidar": [[224, null]], "SinglePixelCamera": [[225, null]], "Solving the problem with a wavelet prior": [[0, "solving-the-problem-with-a-wavelet-prior"]], "Space varying blurs": [[4, "space-varying-blurs"]], "SpaceVaryingBlur": [[226, null]], "SplittingLoss": [[102, null]], "Stacking and concatenating forward operators.": [[12, null]], "Stacking forward operators.": [[12, "stacking-forward-operators"]], "StepLossScheduler": [[103, null]], "Stream data from Internet": [[8, "stream-data-from-internet"]], "Summary of pretrained weights": [[58, "id14"]], "SupAdversarialDiscriminatorLoss": [[112, null]], "SupAdversarialGeneratorLoss": [[113, null]], "SupLoss": [[104, null]], "Super-Resolution": [[15, "super-resolution"]], "Supervised Learning": [[60, "supervised-learning"]], "SureGaussianLoss": [[105, null]], "SurePGLoss": [[106, null]], "SurePoissonLoss": [[107, null]], "SwinIR": [[150, null]], "TGVDenoiser": [[151, null]], "TVDenoiser": [[152, null]], "TVLoss": [[108, null]], "TVPrior": [[173, null]], "TensorList": [[70, "tensorlist"], [290, null]], "Test the model": [[39, "test-the-model"]], "Test the network": [[16, "test-the-network"], [41, "test-the-network"], [42, "test-the-network"], [43, "test-the-network"], [45, "test-the-network"], [46, "test-the-network"], [49, "test-the-network"], [52, "test-the-network"], [53, "test-the-network"], [54, "test-the-network"]], "Test the network.": [[50, "test-the-network"], [51, "test-the-network"]], "The DPS algorithm": [[36, "the-dps-algorithm"]], "The DiffPIR algorithm": [[35, "the-diffpir-algorithm"]], "The RI measurement operator": [[0, "the-ri-measurement-operator"]], "Tikhonov": [[174, null]], "TimeAgnosticNet": [[153, null]], "TimeAveragingNet": [[154, null]], "TimeMixin": [[227, null]], "Tomography": [[66, "tomography"], [228, null]], "Train and test network": [[44, "train-and-test-network"]], "Train model": [[39, "train-model"]], "Train the model": [[16, "train-the-model"], [53, "train-the-model"]], "Train the network": [[41, "train-the-network"], [42, "train-the-network"], [43, "train-the-network"], [45, "train-the-network"], [46, "train-the-network"], [49, "train-the-network"], [52, "train-the-network"], [54, "train-the-network"]], "Train the network.": [[50, "train-the-network"], [51, "train-the-network"]], "Trainer": [[73, null]], "Training / EM algorithm": [[25, "training-em-algorithm"]], "Training a reconstruction network.": [[16, null]], "Training and Testing": [[70, "training-and-testing"]], "Training dataset of random phantoms.": [[52, "training-dataset-of-random-phantoms"]], "Transform": [[281, null]], "Transforms": [[68, null]], "UAIR training": [[2, "uair-training"]], "UAIRGeneratorLoss": [[114, null]], "ULA": [[270, null]], "UNet": [[155, null]], "Uncertainty quantification with PnP-ULA.": [[37, null]], "Unfolded": [[19, "unfolded"], [69, "id1"]], "Unfolded Algorithms": [[69, null]], "Unfolded Chambolle-Pock for constrained image inpainting": [[53, null]], "UniformGaussianNoise": [[229, null]], "UniformNoise": [[230, null]], "UnsupAdversarialDiscriminatorLoss": [[115, null]], "UnsupAdversarialGeneratorLoss": [[116, null]], "Urban100HR": [[84, null]], "Using DPS in your inverse problem": [[36, "using-dps-in-your-inverse-problem"]], "Using huggingface dataset": [[8, null]], "Using multiple GPUs": [[62, null]], "Using the DiffPIR algorithm in your inverse problem": [[35, "using-the-diffpir-algorithm-in-your-inverse-problem"]], "Using the Dykstra-like algorithm for wavelet denoising.": [[20, "using-the-dykstra-like-algorithm-for-wavelet-denoising"]], "Utils": [[60, "utils"], [61, "utils"], [64, "utils"], [69, "utils"], [70, null]], "Vanilla PnP for computed tomography (CT).": [[31, null]], "Vanilla Unfolded algorithm for super-resolution": [[54, null]], "Verifying our linear operator": [[14, "verifying-our-linear-operator"]], "Verifying the concatenated operator": [[12, "verifying-the-concatenated-operator"]], "Verifying the stacked operator": [[12, "verifying-the-stacked-operator"]], "Video transforms": [[68, "video-transforms"]], "Visualization": [[13, "visualization"]], "WaveletDenoiser": [[156, null]], "WaveletDictDenoiser": [[157, null]], "WaveletPrior": [[175, null]], "Widefield microscope PSF": [[11, "widefield-microscope-psf"]], "adjoint_function": [[231, null]], "bicubic_filter": [[232, null]], "bilinear_filter": [[233, null]], "conjugate_gradient": [[198, null]], "conv2d": [[238, null]], "conv2d_fft": [[239, null]], "conv3d_fft": [[240, null]], "conv_transpose2d": [[241, null]], "conv_transpose2d_fft": [[242, null]], "conv_transpose3d_fft": [[243, null]], "demo_mri_model": [[291, null]], "gaussian_blur": [[234, null]], "generate_dataset": [[85, null]], "get_freer_gpu": [[292, null]], "gradient_descent": [[199, null]], "histogram": [[244, null]], "histogramdd": [[245, null]], "load_image": [[293, null]], "load_url_image": [[294, null]], "multiplier": [[246, null]], "multiplier_adjoint": [[247, null]], "ones_like": [[295, null]], "optim_builder": [[188, null]], "plot": [[296, null]], "plot_curves": [[297, null]], "plot_inset": [[298, null]], "plot_ortho3D": [[299, null]], "plot_parameters": [[300, null]], "plot_videos": [[301, null]], "product_convolution2d": [[248, null]], "rand_like": [[302, null]], "randn_like": [[303, null]], "sinc_filter": [[235, null]], "test": [[271, null]], "to_complex_denoiser": [[158, null]], "train": [[272, null]], "unfolded_builder": [[289, null]], "zeros_like": [[304, null]]}, "docnames": ["auto_examples/advanced/demo_ri_basic", "auto_examples/advanced/sg_execution_times", "auto_examples/adversarial-learning/demo_gan_imaging", "auto_examples/adversarial-learning/sg_execution_times", "auto_examples/basics/demo_blur_tour", "auto_examples/basics/demo_custom_prior", "auto_examples/basics/demo_dataset", "auto_examples/basics/demo_dip", "auto_examples/basics/demo_hf_dataset", "auto_examples/basics/demo_lidar", "auto_examples/basics/demo_loading", "auto_examples/basics/demo_microscopy_3d", "auto_examples/basics/demo_pansharpening", "auto_examples/basics/demo_phase_retrieval", "auto_examples/basics/demo_physics", "auto_examples/basics/demo_physics_tour", "auto_examples/basics/demo_train_inpainting", "auto_examples/basics/demo_transforms", "auto_examples/basics/sg_execution_times", "auto_examples/index", "auto_examples/optimization/demo_3D_wavelets", "auto_examples/optimization/demo_TV_minimisation", "auto_examples/optimization/demo_wavelet_prior", "auto_examples/optimization/sg_execution_times", "auto_examples/patch-priors/demo_epll", "auto_examples/patch-priors/demo_patch_priors_CT", "auto_examples/patch-priors/sg_execution_times", "auto_examples/plug-and-play/demo_PnP_DPIR_deblur", "auto_examples/plug-and-play/demo_PnP_custom_optim", "auto_examples/plug-and-play/demo_PnP_mirror_descent", "auto_examples/plug-and-play/demo_RED_GSPnP_SR", "auto_examples/plug-and-play/demo_vanilla_PnP", "auto_examples/plug-and-play/sg_execution_times", "auto_examples/sampling/demo_custom_kernel", "auto_examples/sampling/demo_ddrm", "auto_examples/sampling/demo_diffpir", "auto_examples/sampling/demo_dps", "auto_examples/sampling/demo_sampling", "auto_examples/sampling/sg_execution_times", "auto_examples/self-supervised-learning/demo_artifact2artifact", "auto_examples/self-supervised-learning/demo_ei_transforms", "auto_examples/self-supervised-learning/demo_equivariant_imaging", "auto_examples/self-supervised-learning/demo_multioperator_imaging", "auto_examples/self-supervised-learning/demo_n2n_denoising", "auto_examples/self-supervised-learning/demo_splitting_loss", "auto_examples/self-supervised-learning/demo_sure_denoising", "auto_examples/self-supervised-learning/demo_unsure", "auto_examples/self-supervised-learning/sg_execution_times", "auto_examples/sg_execution_times", "auto_examples/unfolded/demo_DEQ", "auto_examples/unfolded/demo_LISTA", "auto_examples/unfolded/demo_custom_prior_unfolded", "auto_examples/unfolded/demo_learned_primal_dual", "auto_examples/unfolded/demo_unfolded_constrained_LISTA", "auto_examples/unfolded/demo_vanilla_unfolded", "auto_examples/unfolded/sg_execution_times", "deepinv.contributing", "deepinv.datasets", "deepinv.denoisers", "deepinv.iterative", "deepinv.loss", "deepinv.metric", "deepinv.multigpu", "deepinv.notation", "deepinv.optim", "deepinv.other_models", "deepinv.physics", "deepinv.sampling", "deepinv.transform", "deepinv.unfolded", "deepinv.utils", "index", "sg_execution_times", "stubs/deepinv.Trainer", "stubs/deepinv.datasets.CBSD68", "stubs/deepinv.datasets.DIV2K", "stubs/deepinv.datasets.FMD", "stubs/deepinv.datasets.FastMRISliceDataset", "stubs/deepinv.datasets.Flickr2kHR", "stubs/deepinv.datasets.HDF5Dataset", "stubs/deepinv.datasets.LidcIdriSliceDataset", "stubs/deepinv.datasets.LsdirHR", "stubs/deepinv.datasets.PatchDataset", "stubs/deepinv.datasets.Set14HR", "stubs/deepinv.datasets.Urban100HR", "stubs/deepinv.datasets.generate_dataset", "stubs/deepinv.loss.Artifact2ArtifactLoss", "stubs/deepinv.loss.BaseLossScheduler", "stubs/deepinv.loss.EILoss", "stubs/deepinv.loss.FNEJacobianSpectralNorm", "stubs/deepinv.loss.InterleavedEpochLossScheduler", "stubs/deepinv.loss.InterleavedLossScheduler", "stubs/deepinv.loss.JacobianSpectralNorm", "stubs/deepinv.loss.Loss", "stubs/deepinv.loss.MCLoss", "stubs/deepinv.loss.MOEILoss", "stubs/deepinv.loss.MOILoss", "stubs/deepinv.loss.Neighbor2Neighbor", "stubs/deepinv.loss.Phase2PhaseLoss", "stubs/deepinv.loss.R2RLoss", "stubs/deepinv.loss.RandomLossScheduler", "stubs/deepinv.loss.ScoreLoss", "stubs/deepinv.loss.SplittingLoss", "stubs/deepinv.loss.StepLossScheduler", "stubs/deepinv.loss.SupLoss", "stubs/deepinv.loss.SureGaussianLoss", "stubs/deepinv.loss.SurePGLoss", "stubs/deepinv.loss.SurePoissonLoss", "stubs/deepinv.loss.TVLoss", "stubs/deepinv.loss.adversarial.DiscriminatorLoss", "stubs/deepinv.loss.adversarial.DiscriminatorMetric", "stubs/deepinv.loss.adversarial.GeneratorLoss", "stubs/deepinv.loss.adversarial.SupAdversarialDiscriminatorLoss", "stubs/deepinv.loss.adversarial.SupAdversarialGeneratorLoss", "stubs/deepinv.loss.adversarial.UAIRGeneratorLoss", "stubs/deepinv.loss.adversarial.UnsupAdversarialDiscriminatorLoss", "stubs/deepinv.loss.adversarial.UnsupAdversarialGeneratorLoss", "stubs/deepinv.loss.metric.L1L2", "stubs/deepinv.loss.metric.LPIPS", "stubs/deepinv.loss.metric.LpNorm", "stubs/deepinv.loss.metric.MAE", "stubs/deepinv.loss.metric.MSE", "stubs/deepinv.loss.metric.Metric", "stubs/deepinv.loss.metric.NIQE", "stubs/deepinv.loss.metric.NMSE", "stubs/deepinv.loss.metric.PSNR", "stubs/deepinv.loss.metric.QNR", "stubs/deepinv.loss.metric.SSIM", "stubs/deepinv.models.ArtifactRemoval", "stubs/deepinv.models.AutoEncoder", "stubs/deepinv.models.BM3D", "stubs/deepinv.models.CSGMGenerator", "stubs/deepinv.models.ConvDecoder", "stubs/deepinv.models.DCGANDiscriminator", "stubs/deepinv.models.DCGANGenerator", "stubs/deepinv.models.DRUNet", "stubs/deepinv.models.DeepImagePrior", "stubs/deepinv.models.DiffUNet", "stubs/deepinv.models.DnCNN", "stubs/deepinv.models.EPLLDenoiser", "stubs/deepinv.models.ESRGANDiscriminator", "stubs/deepinv.models.EquivariantDenoiser", "stubs/deepinv.models.GSDRUNet", "stubs/deepinv.models.ICNN", "stubs/deepinv.models.MedianFilter", "stubs/deepinv.models.PDNet_DualBlock", "stubs/deepinv.models.PDNet_PrimalBlock", "stubs/deepinv.models.PatchGANDiscriminator", "stubs/deepinv.models.Restormer", "stubs/deepinv.models.SCUNet", "stubs/deepinv.models.SwinIR", "stubs/deepinv.models.TGVDenoiser", "stubs/deepinv.models.TVDenoiser", "stubs/deepinv.models.TimeAgnosticNet", "stubs/deepinv.models.TimeAveragingNet", "stubs/deepinv.models.UNet", "stubs/deepinv.models.WaveletDenoiser", "stubs/deepinv.models.WaveletDictDenoiser", "stubs/deepinv.models.complex.to_complex_denoiser", "stubs/deepinv.optim.BaseOptim", "stubs/deepinv.optim.DPIR", "stubs/deepinv.optim.EPLL", "stubs/deepinv.optim.FixedPoint", "stubs/deepinv.optim.L12Prior", "stubs/deepinv.optim.L1Prior", "stubs/deepinv.optim.OptimIterator", "stubs/deepinv.optim.PatchNR", "stubs/deepinv.optim.PatchPrior", "stubs/deepinv.optim.PnP", "stubs/deepinv.optim.Potential", "stubs/deepinv.optim.Prior", "stubs/deepinv.optim.RED", "stubs/deepinv.optim.ScorePrior", "stubs/deepinv.optim.TVPrior", "stubs/deepinv.optim.Tikhonov", "stubs/deepinv.optim.WaveletPrior", "stubs/deepinv.optim.bregman.Bregman", "stubs/deepinv.optim.bregman.BregmanL2", "stubs/deepinv.optim.bregman.Bregman_ICNN", "stubs/deepinv.optim.bregman.BurgEntropy", "stubs/deepinv.optim.bregman.NegEntropy", "stubs/deepinv.optim.data_fidelity.AmplitudeLoss", "stubs/deepinv.optim.data_fidelity.DataFidelity", "stubs/deepinv.optim.data_fidelity.IndicatorL2", "stubs/deepinv.optim.data_fidelity.L1", "stubs/deepinv.optim.data_fidelity.L2", "stubs/deepinv.optim.data_fidelity.LogPoissonLikelihood", "stubs/deepinv.optim.data_fidelity.PoissonLikelihood", "stubs/deepinv.optim.optim_builder", "stubs/deepinv.optim.optim_iterators.ADMMIteration", "stubs/deepinv.optim.optim_iterators.CPIteration", "stubs/deepinv.optim.optim_iterators.DRSIteration", "stubs/deepinv.optim.optim_iterators.FISTAIteration", "stubs/deepinv.optim.optim_iterators.GDIteration", "stubs/deepinv.optim.optim_iterators.HQSIteration", "stubs/deepinv.optim.optim_iterators.PGDIteration", "stubs/deepinv.optim.optim_iterators.SMIteration", "stubs/deepinv.optim.utils.GaussianMixtureModel", "stubs/deepinv.optim.utils.conjugate_gradient", "stubs/deepinv.optim.utils.gradient_descent", "stubs/deepinv.physics.Blur", "stubs/deepinv.physics.BlurFFT", "stubs/deepinv.physics.CompressedSensing", "stubs/deepinv.physics.Decolorize", "stubs/deepinv.physics.DecomposablePhysics", "stubs/deepinv.physics.Demosaicing", "stubs/deepinv.physics.Denoising", "stubs/deepinv.physics.Downsampling", "stubs/deepinv.physics.DynamicMRI", "stubs/deepinv.physics.GammaNoise", "stubs/deepinv.physics.GaussianNoise", "stubs/deepinv.physics.Haze", "stubs/deepinv.physics.Inpainting", "stubs/deepinv.physics.LinearPhysics", "stubs/deepinv.physics.LogPoissonNoise", "stubs/deepinv.physics.MRI", "stubs/deepinv.physics.Pansharpen", "stubs/deepinv.physics.PhaseRetrieval", "stubs/deepinv.physics.Physics", "stubs/deepinv.physics.PoissonGaussianNoise", "stubs/deepinv.physics.PoissonNoise", "stubs/deepinv.physics.RadioInterferometry", "stubs/deepinv.physics.RandomPhaseRetrieval", "stubs/deepinv.physics.SequentialMRI", "stubs/deepinv.physics.SinglePhotonLidar", "stubs/deepinv.physics.SinglePixelCamera", "stubs/deepinv.physics.SpaceVaryingBlur", "stubs/deepinv.physics.TimeMixin", "stubs/deepinv.physics.Tomography", "stubs/deepinv.physics.UniformGaussianNoise", "stubs/deepinv.physics.UniformNoise", "stubs/deepinv.physics.adjoint_function", "stubs/deepinv.physics.blur.bicubic_filter", "stubs/deepinv.physics.blur.bilinear_filter", "stubs/deepinv.physics.blur.gaussian_blur", "stubs/deepinv.physics.blur.sinc_filter", "stubs/deepinv.physics.functional.IRadon", "stubs/deepinv.physics.functional.Radon", "stubs/deepinv.physics.functional.conv2d", "stubs/deepinv.physics.functional.conv2d_fft", "stubs/deepinv.physics.functional.conv3d_fft", "stubs/deepinv.physics.functional.conv_transpose2d", "stubs/deepinv.physics.functional.conv_transpose2d_fft", "stubs/deepinv.physics.functional.conv_transpose3d_fft", "stubs/deepinv.physics.functional.histogram", "stubs/deepinv.physics.functional.histogramdd", "stubs/deepinv.physics.functional.multiplier", "stubs/deepinv.physics.functional.multiplier_adjoint", "stubs/deepinv.physics.functional.product_convolution2d", "stubs/deepinv.physics.generator.Artifact2ArtifactSplittingMaskGenerator", "stubs/deepinv.physics.generator.BaseMaskGenerator", "stubs/deepinv.physics.generator.BernoulliSplittingMaskGenerator", "stubs/deepinv.physics.generator.DiffractionBlurGenerator", "stubs/deepinv.physics.generator.DiffractionBlurGenerator3D", "stubs/deepinv.physics.generator.EquispacedMaskGenerator", "stubs/deepinv.physics.generator.GaussianMaskGenerator", "stubs/deepinv.physics.generator.GaussianSplittingMaskGenerator", "stubs/deepinv.physics.generator.GeneratorMixture", "stubs/deepinv.physics.generator.MotionBlurGenerator", "stubs/deepinv.physics.generator.Phase2PhaseSplittingMaskGenerator", "stubs/deepinv.physics.generator.PhysicsGenerator", "stubs/deepinv.physics.generator.ProductConvolutionBlurGenerator", "stubs/deepinv.physics.generator.RandomMaskGenerator", "stubs/deepinv.physics.generator.SigmaGenerator", "stubs/deepinv.sampling.DDRM", "stubs/deepinv.sampling.DPS", "stubs/deepinv.sampling.DiffPIR", "stubs/deepinv.sampling.DiffusionSampler", "stubs/deepinv.sampling.MonteCarlo", "stubs/deepinv.sampling.SKRock", "stubs/deepinv.sampling.ULA", "stubs/deepinv.test", "stubs/deepinv.train", "stubs/deepinv.training.AdversarialTrainer", "stubs/deepinv.transform.CPABDiffeomorphism", "stubs/deepinv.transform.Homography", "stubs/deepinv.transform.Reflect", "stubs/deepinv.transform.Rotate", "stubs/deepinv.transform.Scale", "stubs/deepinv.transform.Shift", "stubs/deepinv.transform.ShiftTime", "stubs/deepinv.transform.Transform", "stubs/deepinv.transform.projective.Affine", "stubs/deepinv.transform.projective.Euclidean", "stubs/deepinv.transform.projective.PanTiltRotate", "stubs/deepinv.transform.projective.Similarity", "stubs/deepinv.unfolded.BaseDEQ", "stubs/deepinv.unfolded.BaseUnfold", "stubs/deepinv.unfolded.DEQ_builder", "stubs/deepinv.unfolded.unfolded_builder", "stubs/deepinv.utils.TensorList", "stubs/deepinv.utils.demo.demo_mri_model", "stubs/deepinv.utils.get_freer_gpu", "stubs/deepinv.utils.load_image", "stubs/deepinv.utils.load_url_image", "stubs/deepinv.utils.ones_like", "stubs/deepinv.utils.plot", "stubs/deepinv.utils.plot_curves", "stubs/deepinv.utils.plot_inset", "stubs/deepinv.utils.plot_ortho3D", "stubs/deepinv.utils.plot_parameters", "stubs/deepinv.utils.plot_videos", "stubs/deepinv.utils.rand_like", "stubs/deepinv.utils.randn_like", "stubs/deepinv.utils.zeros_like"], "envversion": {"sphinx": 62, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1}, "filenames": ["auto_examples/advanced/demo_ri_basic.rst", "auto_examples/advanced/sg_execution_times.rst", "auto_examples/adversarial-learning/demo_gan_imaging.rst", "auto_examples/adversarial-learning/sg_execution_times.rst", "auto_examples/basics/demo_blur_tour.rst", "auto_examples/basics/demo_custom_prior.rst", "auto_examples/basics/demo_dataset.rst", "auto_examples/basics/demo_dip.rst", "auto_examples/basics/demo_hf_dataset.rst", "auto_examples/basics/demo_lidar.rst", "auto_examples/basics/demo_loading.rst", "auto_examples/basics/demo_microscopy_3d.rst", "auto_examples/basics/demo_pansharpening.rst", "auto_examples/basics/demo_phase_retrieval.rst", "auto_examples/basics/demo_physics.rst", "auto_examples/basics/demo_physics_tour.rst", "auto_examples/basics/demo_train_inpainting.rst", "auto_examples/basics/demo_transforms.rst", "auto_examples/basics/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/optimization/demo_3D_wavelets.rst", "auto_examples/optimization/demo_TV_minimisation.rst", "auto_examples/optimization/demo_wavelet_prior.rst", "auto_examples/optimization/sg_execution_times.rst", "auto_examples/patch-priors/demo_epll.rst", "auto_examples/patch-priors/demo_patch_priors_CT.rst", "auto_examples/patch-priors/sg_execution_times.rst", "auto_examples/plug-and-play/demo_PnP_DPIR_deblur.rst", "auto_examples/plug-and-play/demo_PnP_custom_optim.rst", "auto_examples/plug-and-play/demo_PnP_mirror_descent.rst", "auto_examples/plug-and-play/demo_RED_GSPnP_SR.rst", "auto_examples/plug-and-play/demo_vanilla_PnP.rst", "auto_examples/plug-and-play/sg_execution_times.rst", "auto_examples/sampling/demo_custom_kernel.rst", "auto_examples/sampling/demo_ddrm.rst", "auto_examples/sampling/demo_diffpir.rst", "auto_examples/sampling/demo_dps.rst", "auto_examples/sampling/demo_sampling.rst", "auto_examples/sampling/sg_execution_times.rst", "auto_examples/self-supervised-learning/demo_artifact2artifact.rst", "auto_examples/self-supervised-learning/demo_ei_transforms.rst", "auto_examples/self-supervised-learning/demo_equivariant_imaging.rst", "auto_examples/self-supervised-learning/demo_multioperator_imaging.rst", "auto_examples/self-supervised-learning/demo_n2n_denoising.rst", "auto_examples/self-supervised-learning/demo_splitting_loss.rst", "auto_examples/self-supervised-learning/demo_sure_denoising.rst", "auto_examples/self-supervised-learning/demo_unsure.rst", "auto_examples/self-supervised-learning/sg_execution_times.rst", "auto_examples/sg_execution_times.rst", "auto_examples/unfolded/demo_DEQ.rst", "auto_examples/unfolded/demo_LISTA.rst", "auto_examples/unfolded/demo_custom_prior_unfolded.rst", "auto_examples/unfolded/demo_learned_primal_dual.rst", "auto_examples/unfolded/demo_unfolded_constrained_LISTA.rst", "auto_examples/unfolded/demo_vanilla_unfolded.rst", "auto_examples/unfolded/sg_execution_times.rst", "deepinv.contributing.rst", "deepinv.datasets.rst", "deepinv.denoisers.rst", "deepinv.iterative.rst", "deepinv.loss.rst", "deepinv.metric.rst", "deepinv.multigpu.rst", "deepinv.notation.rst", "deepinv.optim.rst", "deepinv.other_models.rst", "deepinv.physics.rst", "deepinv.sampling.rst", "deepinv.transform.rst", "deepinv.unfolded.rst", "deepinv.utils.rst", "index.rst", "sg_execution_times.rst", "stubs/deepinv.Trainer.rst", "stubs/deepinv.datasets.CBSD68.rst", "stubs/deepinv.datasets.DIV2K.rst", "stubs/deepinv.datasets.FMD.rst", "stubs/deepinv.datasets.FastMRISliceDataset.rst", "stubs/deepinv.datasets.Flickr2kHR.rst", "stubs/deepinv.datasets.HDF5Dataset.rst", "stubs/deepinv.datasets.LidcIdriSliceDataset.rst", "stubs/deepinv.datasets.LsdirHR.rst", "stubs/deepinv.datasets.PatchDataset.rst", "stubs/deepinv.datasets.Set14HR.rst", "stubs/deepinv.datasets.Urban100HR.rst", "stubs/deepinv.datasets.generate_dataset.rst", "stubs/deepinv.loss.Artifact2ArtifactLoss.rst", "stubs/deepinv.loss.BaseLossScheduler.rst", "stubs/deepinv.loss.EILoss.rst", "stubs/deepinv.loss.FNEJacobianSpectralNorm.rst", "stubs/deepinv.loss.InterleavedEpochLossScheduler.rst", "stubs/deepinv.loss.InterleavedLossScheduler.rst", "stubs/deepinv.loss.JacobianSpectralNorm.rst", "stubs/deepinv.loss.Loss.rst", "stubs/deepinv.loss.MCLoss.rst", "stubs/deepinv.loss.MOEILoss.rst", "stubs/deepinv.loss.MOILoss.rst", "stubs/deepinv.loss.Neighbor2Neighbor.rst", "stubs/deepinv.loss.Phase2PhaseLoss.rst", "stubs/deepinv.loss.R2RLoss.rst", "stubs/deepinv.loss.RandomLossScheduler.rst", "stubs/deepinv.loss.ScoreLoss.rst", "stubs/deepinv.loss.SplittingLoss.rst", "stubs/deepinv.loss.StepLossScheduler.rst", "stubs/deepinv.loss.SupLoss.rst", "stubs/deepinv.loss.SureGaussianLoss.rst", "stubs/deepinv.loss.SurePGLoss.rst", "stubs/deepinv.loss.SurePoissonLoss.rst", "stubs/deepinv.loss.TVLoss.rst", "stubs/deepinv.loss.adversarial.DiscriminatorLoss.rst", "stubs/deepinv.loss.adversarial.DiscriminatorMetric.rst", "stubs/deepinv.loss.adversarial.GeneratorLoss.rst", "stubs/deepinv.loss.adversarial.SupAdversarialDiscriminatorLoss.rst", "stubs/deepinv.loss.adversarial.SupAdversarialGeneratorLoss.rst", "stubs/deepinv.loss.adversarial.UAIRGeneratorLoss.rst", "stubs/deepinv.loss.adversarial.UnsupAdversarialDiscriminatorLoss.rst", "stubs/deepinv.loss.adversarial.UnsupAdversarialGeneratorLoss.rst", "stubs/deepinv.loss.metric.L1L2.rst", "stubs/deepinv.loss.metric.LPIPS.rst", "stubs/deepinv.loss.metric.LpNorm.rst", "stubs/deepinv.loss.metric.MAE.rst", "stubs/deepinv.loss.metric.MSE.rst", "stubs/deepinv.loss.metric.Metric.rst", "stubs/deepinv.loss.metric.NIQE.rst", "stubs/deepinv.loss.metric.NMSE.rst", "stubs/deepinv.loss.metric.PSNR.rst", "stubs/deepinv.loss.metric.QNR.rst", "stubs/deepinv.loss.metric.SSIM.rst", "stubs/deepinv.models.ArtifactRemoval.rst", "stubs/deepinv.models.AutoEncoder.rst", "stubs/deepinv.models.BM3D.rst", "stubs/deepinv.models.CSGMGenerator.rst", "stubs/deepinv.models.ConvDecoder.rst", "stubs/deepinv.models.DCGANDiscriminator.rst", "stubs/deepinv.models.DCGANGenerator.rst", "stubs/deepinv.models.DRUNet.rst", "stubs/deepinv.models.DeepImagePrior.rst", "stubs/deepinv.models.DiffUNet.rst", "stubs/deepinv.models.DnCNN.rst", "stubs/deepinv.models.EPLLDenoiser.rst", "stubs/deepinv.models.ESRGANDiscriminator.rst", "stubs/deepinv.models.EquivariantDenoiser.rst", "stubs/deepinv.models.GSDRUNet.rst", "stubs/deepinv.models.ICNN.rst", "stubs/deepinv.models.MedianFilter.rst", "stubs/deepinv.models.PDNet_DualBlock.rst", "stubs/deepinv.models.PDNet_PrimalBlock.rst", "stubs/deepinv.models.PatchGANDiscriminator.rst", "stubs/deepinv.models.Restormer.rst", "stubs/deepinv.models.SCUNet.rst", "stubs/deepinv.models.SwinIR.rst", "stubs/deepinv.models.TGVDenoiser.rst", "stubs/deepinv.models.TVDenoiser.rst", "stubs/deepinv.models.TimeAgnosticNet.rst", "stubs/deepinv.models.TimeAveragingNet.rst", "stubs/deepinv.models.UNet.rst", "stubs/deepinv.models.WaveletDenoiser.rst", "stubs/deepinv.models.WaveletDictDenoiser.rst", "stubs/deepinv.models.complex.to_complex_denoiser.rst", "stubs/deepinv.optim.BaseOptim.rst", "stubs/deepinv.optim.DPIR.rst", "stubs/deepinv.optim.EPLL.rst", "stubs/deepinv.optim.FixedPoint.rst", "stubs/deepinv.optim.L12Prior.rst", "stubs/deepinv.optim.L1Prior.rst", "stubs/deepinv.optim.OptimIterator.rst", "stubs/deepinv.optim.PatchNR.rst", "stubs/deepinv.optim.PatchPrior.rst", "stubs/deepinv.optim.PnP.rst", "stubs/deepinv.optim.Potential.rst", "stubs/deepinv.optim.Prior.rst", "stubs/deepinv.optim.RED.rst", "stubs/deepinv.optim.ScorePrior.rst", "stubs/deepinv.optim.TVPrior.rst", "stubs/deepinv.optim.Tikhonov.rst", "stubs/deepinv.optim.WaveletPrior.rst", "stubs/deepinv.optim.bregman.Bregman.rst", "stubs/deepinv.optim.bregman.BregmanL2.rst", "stubs/deepinv.optim.bregman.Bregman_ICNN.rst", "stubs/deepinv.optim.bregman.BurgEntropy.rst", "stubs/deepinv.optim.bregman.NegEntropy.rst", "stubs/deepinv.optim.data_fidelity.AmplitudeLoss.rst", "stubs/deepinv.optim.data_fidelity.DataFidelity.rst", "stubs/deepinv.optim.data_fidelity.IndicatorL2.rst", "stubs/deepinv.optim.data_fidelity.L1.rst", "stubs/deepinv.optim.data_fidelity.L2.rst", "stubs/deepinv.optim.data_fidelity.LogPoissonLikelihood.rst", "stubs/deepinv.optim.data_fidelity.PoissonLikelihood.rst", "stubs/deepinv.optim.optim_builder.rst", "stubs/deepinv.optim.optim_iterators.ADMMIteration.rst", "stubs/deepinv.optim.optim_iterators.CPIteration.rst", "stubs/deepinv.optim.optim_iterators.DRSIteration.rst", "stubs/deepinv.optim.optim_iterators.FISTAIteration.rst", "stubs/deepinv.optim.optim_iterators.GDIteration.rst", "stubs/deepinv.optim.optim_iterators.HQSIteration.rst", "stubs/deepinv.optim.optim_iterators.PGDIteration.rst", "stubs/deepinv.optim.optim_iterators.SMIteration.rst", "stubs/deepinv.optim.utils.GaussianMixtureModel.rst", "stubs/deepinv.optim.utils.conjugate_gradient.rst", "stubs/deepinv.optim.utils.gradient_descent.rst", "stubs/deepinv.physics.Blur.rst", "stubs/deepinv.physics.BlurFFT.rst", "stubs/deepinv.physics.CompressedSensing.rst", "stubs/deepinv.physics.Decolorize.rst", "stubs/deepinv.physics.DecomposablePhysics.rst", "stubs/deepinv.physics.Demosaicing.rst", "stubs/deepinv.physics.Denoising.rst", "stubs/deepinv.physics.Downsampling.rst", "stubs/deepinv.physics.DynamicMRI.rst", "stubs/deepinv.physics.GammaNoise.rst", "stubs/deepinv.physics.GaussianNoise.rst", "stubs/deepinv.physics.Haze.rst", "stubs/deepinv.physics.Inpainting.rst", "stubs/deepinv.physics.LinearPhysics.rst", "stubs/deepinv.physics.LogPoissonNoise.rst", "stubs/deepinv.physics.MRI.rst", "stubs/deepinv.physics.Pansharpen.rst", "stubs/deepinv.physics.PhaseRetrieval.rst", "stubs/deepinv.physics.Physics.rst", "stubs/deepinv.physics.PoissonGaussianNoise.rst", "stubs/deepinv.physics.PoissonNoise.rst", "stubs/deepinv.physics.RadioInterferometry.rst", "stubs/deepinv.physics.RandomPhaseRetrieval.rst", "stubs/deepinv.physics.SequentialMRI.rst", "stubs/deepinv.physics.SinglePhotonLidar.rst", "stubs/deepinv.physics.SinglePixelCamera.rst", "stubs/deepinv.physics.SpaceVaryingBlur.rst", "stubs/deepinv.physics.TimeMixin.rst", "stubs/deepinv.physics.Tomography.rst", "stubs/deepinv.physics.UniformGaussianNoise.rst", "stubs/deepinv.physics.UniformNoise.rst", "stubs/deepinv.physics.adjoint_function.rst", "stubs/deepinv.physics.blur.bicubic_filter.rst", "stubs/deepinv.physics.blur.bilinear_filter.rst", "stubs/deepinv.physics.blur.gaussian_blur.rst", "stubs/deepinv.physics.blur.sinc_filter.rst", "stubs/deepinv.physics.functional.IRadon.rst", "stubs/deepinv.physics.functional.Radon.rst", "stubs/deepinv.physics.functional.conv2d.rst", "stubs/deepinv.physics.functional.conv2d_fft.rst", "stubs/deepinv.physics.functional.conv3d_fft.rst", "stubs/deepinv.physics.functional.conv_transpose2d.rst", "stubs/deepinv.physics.functional.conv_transpose2d_fft.rst", "stubs/deepinv.physics.functional.conv_transpose3d_fft.rst", "stubs/deepinv.physics.functional.histogram.rst", "stubs/deepinv.physics.functional.histogramdd.rst", "stubs/deepinv.physics.functional.multiplier.rst", "stubs/deepinv.physics.functional.multiplier_adjoint.rst", "stubs/deepinv.physics.functional.product_convolution2d.rst", "stubs/deepinv.physics.generator.Artifact2ArtifactSplittingMaskGenerator.rst", "stubs/deepinv.physics.generator.BaseMaskGenerator.rst", "stubs/deepinv.physics.generator.BernoulliSplittingMaskGenerator.rst", "stubs/deepinv.physics.generator.DiffractionBlurGenerator.rst", "stubs/deepinv.physics.generator.DiffractionBlurGenerator3D.rst", "stubs/deepinv.physics.generator.EquispacedMaskGenerator.rst", "stubs/deepinv.physics.generator.GaussianMaskGenerator.rst", "stubs/deepinv.physics.generator.GaussianSplittingMaskGenerator.rst", "stubs/deepinv.physics.generator.GeneratorMixture.rst", "stubs/deepinv.physics.generator.MotionBlurGenerator.rst", "stubs/deepinv.physics.generator.Phase2PhaseSplittingMaskGenerator.rst", "stubs/deepinv.physics.generator.PhysicsGenerator.rst", "stubs/deepinv.physics.generator.ProductConvolutionBlurGenerator.rst", "stubs/deepinv.physics.generator.RandomMaskGenerator.rst", "stubs/deepinv.physics.generator.SigmaGenerator.rst", "stubs/deepinv.sampling.DDRM.rst", "stubs/deepinv.sampling.DPS.rst", "stubs/deepinv.sampling.DiffPIR.rst", "stubs/deepinv.sampling.DiffusionSampler.rst", "stubs/deepinv.sampling.MonteCarlo.rst", "stubs/deepinv.sampling.SKRock.rst", "stubs/deepinv.sampling.ULA.rst", "stubs/deepinv.test.rst", "stubs/deepinv.train.rst", "stubs/deepinv.training.AdversarialTrainer.rst", "stubs/deepinv.transform.CPABDiffeomorphism.rst", "stubs/deepinv.transform.Homography.rst", "stubs/deepinv.transform.Reflect.rst", "stubs/deepinv.transform.Rotate.rst", "stubs/deepinv.transform.Scale.rst", "stubs/deepinv.transform.Shift.rst", "stubs/deepinv.transform.ShiftTime.rst", "stubs/deepinv.transform.Transform.rst", "stubs/deepinv.transform.projective.Affine.rst", "stubs/deepinv.transform.projective.Euclidean.rst", "stubs/deepinv.transform.projective.PanTiltRotate.rst", "stubs/deepinv.transform.projective.Similarity.rst", "stubs/deepinv.unfolded.BaseDEQ.rst", "stubs/deepinv.unfolded.BaseUnfold.rst", "stubs/deepinv.unfolded.DEQ_builder.rst", "stubs/deepinv.unfolded.unfolded_builder.rst", "stubs/deepinv.utils.TensorList.rst", "stubs/deepinv.utils.demo.demo_mri_model.rst", "stubs/deepinv.utils.get_freer_gpu.rst", "stubs/deepinv.utils.load_image.rst", "stubs/deepinv.utils.load_url_image.rst", "stubs/deepinv.utils.ones_like.rst", "stubs/deepinv.utils.plot.rst", "stubs/deepinv.utils.plot_curves.rst", "stubs/deepinv.utils.plot_inset.rst", "stubs/deepinv.utils.plot_ortho3D.rst", "stubs/deepinv.utils.plot_parameters.rst", "stubs/deepinv.utils.plot_videos.rst", "stubs/deepinv.utils.rand_like.rst", "stubs/deepinv.utils.randn_like.rst", "stubs/deepinv.utils.zeros_like.rst"], "indexentries": {"__add__() (deepinv.physics.generator.physicsgenerator method)": [[260, "deepinv.physics.generator.PhysicsGenerator.__add__", false]], "__add__() (deepinv.physics.linearphysics method)": [[213, "deepinv.physics.LinearPhysics.__add__", false]], "__add__() (deepinv.physics.physics method)": [[218, "deepinv.physics.Physics.__add__", false]], "__add__() (deepinv.transform.transform method)": [[281, "deepinv.transform.Transform.__add__", false]], "__add__() (deepinv.utils.tensorlist method)": [[290, "deepinv.utils.TensorList.__add__", false]], "__mul__() (deepinv.physics.inpainting method)": [[212, "deepinv.physics.Inpainting.__mul__", false]], "__mul__() (deepinv.physics.linearphysics method)": [[213, "deepinv.physics.LinearPhysics.__mul__", false]], "__mul__() (deepinv.physics.physics method)": [[218, "deepinv.physics.Physics.__mul__", false]], "__mul__() (deepinv.transform.transform method)": [[281, "deepinv.transform.Transform.__mul__", false]], "__mul__() (deepinv.utils.tensorlist method)": [[290, "deepinv.utils.TensorList.__mul__", false]], "__neg__() (deepinv.utils.tensorlist method)": [[290, "deepinv.utils.TensorList.__neg__", false]], "__sub__() (deepinv.utils.tensorlist method)": [[290, "deepinv.utils.TensorList.__sub__", false]], "__truediv__() (deepinv.utils.tensorlist method)": [[290, "deepinv.utils.TensorList.__truediv__", false]], "a() (deepinv.physics.blur method)": [[200, "deepinv.physics.Blur.A", false]], "a() (deepinv.physics.blurfft method)": [[201, "deepinv.physics.BlurFFT.A", false]], "a() (deepinv.physics.compressedsensing method)": [[202, "deepinv.physics.CompressedSensing.A", false]], "a() (deepinv.physics.decomposablephysics method)": [[204, "deepinv.physics.DecomposablePhysics.A", false]], "a() (deepinv.physics.downsampling method)": [[207, "deepinv.physics.Downsampling.A", false]], "a() (deepinv.physics.dynamicmri method)": [[208, "deepinv.physics.DynamicMRI.A", false]], "a() (deepinv.physics.haze method)": [[211, "deepinv.physics.Haze.A", false]], "a() (deepinv.physics.pansharpen method)": [[216, "deepinv.physics.Pansharpen.A", false]], "a() (deepinv.physics.phaseretrieval method)": [[217, "deepinv.physics.PhaseRetrieval.A", false]], "a() (deepinv.physics.physics method)": [[218, "deepinv.physics.Physics.A", false]], "a() (deepinv.physics.radiointerferometry method)": [[221, "deepinv.physics.RadioInterferometry.A", false]], "a() (deepinv.physics.sequentialmri method)": [[223, "deepinv.physics.SequentialMRI.A", false]], "a() (deepinv.physics.singlephotonlidar method)": [[224, "deepinv.physics.SinglePhotonLidar.A", false]], "a() (deepinv.physics.spacevaryingblur method)": [[226, "deepinv.physics.SpaceVaryingBlur.A", false]], "a() (deepinv.physics.tomography method)": [[228, "deepinv.physics.Tomography.A", false]], "a_a_adjoint() (deepinv.physics.decomposablephysics method)": [[204, "deepinv.physics.DecomposablePhysics.A_A_adjoint", false]], "a_a_adjoint() (deepinv.physics.linearphysics method)": [[213, "deepinv.physics.LinearPhysics.A_A_adjoint", false]], "a_adjoint() (deepinv.physics.blur method)": [[200, "deepinv.physics.Blur.A_adjoint", false]], "a_adjoint() (deepinv.physics.blurfft method)": [[201, "deepinv.physics.BlurFFT.A_adjoint", false]], "a_adjoint() (deepinv.physics.compressedsensing method)": [[202, "deepinv.physics.CompressedSensing.A_adjoint", false]], "a_adjoint() (deepinv.physics.decomposablephysics method)": [[204, "deepinv.physics.DecomposablePhysics.A_adjoint", false]], "a_adjoint() (deepinv.physics.downsampling method)": [[207, "deepinv.physics.Downsampling.A_adjoint", false]], "a_adjoint() (deepinv.physics.dynamicmri method)": [[208, "deepinv.physics.DynamicMRI.A_adjoint", false]], "a_adjoint() (deepinv.physics.linearphysics method)": [[213, "deepinv.physics.LinearPhysics.A_adjoint", false]], "a_adjoint() (deepinv.physics.pansharpen method)": [[216, "deepinv.physics.Pansharpen.A_adjoint", false]], "a_adjoint() (deepinv.physics.radiointerferometry method)": [[221, "deepinv.physics.RadioInterferometry.A_adjoint", false]], "a_adjoint() (deepinv.physics.sequentialmri method)": [[223, "deepinv.physics.SequentialMRI.A_adjoint", false]], "a_adjoint() (deepinv.physics.spacevaryingblur method)": [[226, "deepinv.physics.SpaceVaryingBlur.A_adjoint", false]], "a_adjoint() (deepinv.physics.tomography method)": [[228, "deepinv.physics.Tomography.A_adjoint", false]], "a_adjoint_a() (deepinv.physics.decomposablephysics method)": [[204, "deepinv.physics.DecomposablePhysics.A_adjoint_A", false]], "a_adjoint_a() (deepinv.physics.linearphysics method)": [[213, "deepinv.physics.LinearPhysics.A_adjoint_A", false]], "a_dagger() (deepinv.physics.compressedsensing method)": [[202, "deepinv.physics.CompressedSensing.A_dagger", false]], "a_dagger() (deepinv.physics.decomposablephysics method)": [[204, "deepinv.physics.DecomposablePhysics.A_dagger", false]], "a_dagger() (deepinv.physics.dynamicmri method)": [[208, "deepinv.physics.DynamicMRI.A_dagger", false]], "a_dagger() (deepinv.physics.haze method)": [[211, "deepinv.physics.Haze.A_dagger", false]], "a_dagger() (deepinv.physics.linearphysics method)": [[213, "deepinv.physics.LinearPhysics.A_dagger", false]], "a_dagger() (deepinv.physics.phaseretrieval method)": [[217, "deepinv.physics.PhaseRetrieval.A_dagger", false]], "a_dagger() (deepinv.physics.physics method)": [[218, "deepinv.physics.Physics.A_dagger", false]], "a_dagger() (deepinv.physics.singlephotonlidar method)": [[224, "deepinv.physics.SinglePhotonLidar.A_dagger", false]], "a_dagger() (deepinv.physics.tomography method)": [[228, "deepinv.physics.Tomography.A_dagger", false]], "a_vjp() (deepinv.physics.linearphysics method)": [[213, "deepinv.physics.LinearPhysics.A_vjp", false]], "a_vjp() (deepinv.physics.phaseretrieval method)": [[217, "deepinv.physics.PhaseRetrieval.A_vjp", false]], "a_vjp() (deepinv.physics.physics method)": [[218, "deepinv.physics.Physics.A_vjp", false]], "adapt_model() (deepinv.loss.baselossscheduler method)": [[87, "deepinv.loss.BaseLossScheduler.adapt_model", false]], "adapt_model() (deepinv.loss.loss method)": [[93, "deepinv.loss.Loss.adapt_model", false]], "adapt_model() (deepinv.loss.phase2phaseloss method)": [[98, "deepinv.loss.Phase2PhaseLoss.adapt_model", false]], "adapt_model() (deepinv.loss.r2rloss method)": [[99, "deepinv.loss.R2RLoss.adapt_model", false]], "adapt_model() (deepinv.loss.scoreloss method)": [[101, "deepinv.loss.ScoreLoss.adapt_model", false]], "adapt_model() (deepinv.loss.splittingloss method)": [[102, "deepinv.loss.SplittingLoss.adapt_model", false]], "adjoint_function (class in deepinv.physics)": [[231, "deepinv.physics.adjoint_function", false]], "adjointness_test() (deepinv.physics.linearphysics method)": [[213, "deepinv.physics.LinearPhysics.adjointness_test", false]], "admmiteration (class in deepinv.optim.optim_iterators)": [[189, "deepinv.optim.optim_iterators.ADMMIteration", false]], "adversarial_loss() (deepinv.loss.adversarial.discriminatorloss method)": [[109, "deepinv.loss.adversarial.DiscriminatorLoss.adversarial_loss", false]], "adversarial_loss() (deepinv.loss.adversarial.generatorloss method)": [[111, "deepinv.loss.adversarial.GeneratorLoss.adversarial_loss", false]], "adversarialtrainer (class in deepinv.training)": [[273, "deepinv.training.AdversarialTrainer", false]], "affine (class in deepinv.transform.projective)": [[282, "deepinv.transform.projective.Affine", false]], "amplitudeloss (class in deepinv.optim.data_fidelity)": [[181, "deepinv.optim.data_fidelity.AmplitudeLoss", false]], "anderson_acceleration_step() (deepinv.optim.fixedpoint method)": [[162, "deepinv.optim.FixedPoint.anderson_acceleration_step", false]], "append() (deepinv.utils.tensorlist method)": [[290, "deepinv.utils.TensorList.append", false]], "artifact2artifactloss (class in deepinv.loss)": [[86, "deepinv.loss.Artifact2ArtifactLoss", false]], "artifact2artifactsplittingmaskgenerator (class in deepinv.physics.generator)": [[249, "deepinv.physics.generator.Artifact2ArtifactSplittingMaskGenerator", false]], "artifactremoval (class in deepinv.models)": [[128, "deepinv.models.ArtifactRemoval", false]], "autoencoder (class in deepinv.models)": [[129, "deepinv.models.AutoEncoder", false]], "average() (deepinv.physics.timemixin static method)": [[227, "deepinv.physics.TimeMixin.average", false]], "b_dagger() (deepinv.physics.phaseretrieval method)": [[217, "deepinv.physics.PhaseRetrieval.B_dagger", false]], "basedeq (class in deepinv.unfolded)": [[286, "deepinv.unfolded.BaseDEQ", false]], "baselossscheduler (class in deepinv.loss)": [[87, "deepinv.loss.BaseLossScheduler", false]], "basemaskgenerator (class in deepinv.physics.generator)": [[250, "deepinv.physics.generator.BaseMaskGenerator", false]], "baseoptim (class in deepinv.optim)": [[159, "deepinv.optim.BaseOptim", false]], "baseunfold (class in deepinv.unfolded)": [[287, "deepinv.unfolded.BaseUnfold", false]], "batch_step() (deepinv.physics.generator.artifact2artifactsplittingmaskgenerator method)": [[249, "deepinv.physics.generator.Artifact2ArtifactSplittingMaskGenerator.batch_step", false]], "batch_step() (deepinv.physics.generator.bernoullisplittingmaskgenerator method)": [[251, "deepinv.physics.generator.BernoulliSplittingMaskGenerator.batch_step", false]], "batch_step() (deepinv.physics.generator.gaussiansplittingmaskgenerator method)": [[256, "deepinv.physics.generator.GaussianSplittingMaskGenerator.batch_step", false]], "batch_step() (deepinv.physics.generator.phase2phasesplittingmaskgenerator method)": [[259, "deepinv.physics.generator.Phase2PhaseSplittingMaskGenerator.batch_step", false]], "bernoullisplittingmaskgenerator (class in deepinv.physics.generator)": [[251, "deepinv.physics.generator.BernoulliSplittingMaskGenerator", false]], "bicubic_filter() (in module deepinv.physics.blur)": [[232, "deepinv.physics.blur.bicubic_filter", false]], "bilinear_filter() (in module deepinv.physics.blur)": [[233, "deepinv.physics.blur.bilinear_filter", false]], "blur (class in deepinv.physics)": [[200, "deepinv.physics.Blur", false]], "blurfft (class in deepinv.physics)": [[201, "deepinv.physics.BlurFFT", false]], "bm3d (class in deepinv.models)": [[130, "deepinv.models.BM3D", false]], "bregman (class in deepinv.optim.bregman)": [[176, "deepinv.optim.bregman.Bregman", false]], "bregman_icnn (class in deepinv.optim.bregman)": [[178, "deepinv.optim.bregman.Bregman_ICNN", false]], "bregman_prox() (deepinv.optim.potential method)": [[169, "deepinv.optim.Potential.bregman_prox", false]], "bregmanl2 (class in deepinv.optim.bregman)": [[177, "deepinv.optim.bregman.BregmanL2", false]], "burgentropy (class in deepinv.optim.bregman)": [[179, "deepinv.optim.bregman.BurgEntropy", false]], "cbsd68 (class in deepinv.datasets)": [[74, "deepinv.datasets.CBSD68", false]], "check_clip_grad() (deepinv.trainer method)": [[73, "deepinv.Trainer.check_clip_grad", false]], "check_clip_grad_d() (deepinv.training.adversarialtrainer method)": [[273, "deepinv.training.AdversarialTrainer.check_clip_grad_D", false]], "check_conv_fn() (deepinv.optim.baseoptim method)": [[159, "deepinv.optim.BaseOptim.check_conv_fn", false]], "check_dataset_exists() (deepinv.datasets.cbsd68 method)": [[74, "deepinv.datasets.CBSD68.check_dataset_exists", false]], "check_dataset_exists() (deepinv.datasets.flickr2khr method)": [[78, "deepinv.datasets.Flickr2kHR.check_dataset_exists", false]], "check_dataset_exists() (deepinv.datasets.set14hr method)": [[83, "deepinv.datasets.Set14HR.check_dataset_exists", false]], "check_dataset_exists() (deepinv.datasets.urban100hr method)": [[84, "deepinv.datasets.Urban100HR.check_dataset_exists", false]], "check_iteration_fn() (deepinv.optim.baseoptim method)": [[159, "deepinv.optim.BaseOptim.check_iteration_fn", false]], "check_mask() (deepinv.physics.dynamicmri method)": [[208, "deepinv.physics.DynamicMRI.check_mask", false]], "check_mask() (deepinv.physics.mri method)": [[215, "deepinv.physics.MRI.check_mask", false]], "check_pixelwise() (deepinv.physics.generator.bernoullisplittingmaskgenerator method)": [[251, "deepinv.physics.generator.BernoulliSplittingMaskGenerator.check_pixelwise", false]], "classify() (deepinv.optim.utils.gaussianmixturemodel method)": [[197, "deepinv.optim.utils.GaussianMixtureModel.classify", false]], "component_log_likelihoods() (deepinv.optim.utils.gaussianmixturemodel method)": [[197, "deepinv.optim.utils.GaussianMixtureModel.component_log_likelihoods", false]], "compressedsensing (class in deepinv.physics)": [[202, "deepinv.physics.CompressedSensing", false]], "compute_alpha_betas() (deepinv.sampling.dps method)": [[265, "deepinv.sampling.DPS.compute_alpha_betas", false]], "compute_loss() (deepinv.trainer method)": [[73, "deepinv.Trainer.compute_loss", false]], "compute_loss() (deepinv.training.adversarialtrainer method)": [[273, "deepinv.training.AdversarialTrainer.compute_loss", false]], "compute_metrics() (deepinv.trainer method)": [[73, "deepinv.Trainer.compute_metrics", false]], "compute_norm() (deepinv.physics.linearphysics method)": [[213, "deepinv.physics.LinearPhysics.compute_norm", false]], "conj() (deepinv.utils.tensorlist method)": [[290, "deepinv.utils.TensorList.conj", false]], "conjugate() (deepinv.optim.bregman.bregman_icnn method)": [[178, "deepinv.optim.bregman.Bregman_ICNN.conjugate", false]], "conjugate() (deepinv.optim.bregman.bregmanl2 method)": [[177, "deepinv.optim.bregman.BregmanL2.conjugate", false]], "conjugate() (deepinv.optim.bregman.burgentropy method)": [[179, "deepinv.optim.bregman.BurgEntropy.conjugate", false]], "conjugate() (deepinv.optim.bregman.negentropy method)": [[180, "deepinv.optim.bregman.NegEntropy.conjugate", false]], "conjugate() (deepinv.optim.potential method)": [[169, "deepinv.optim.Potential.conjugate", false]], "conjugate_gradient (class in deepinv.optim.utils)": [[198, "deepinv.optim.utils.conjugate_gradient", false]], "conv2d (class in deepinv.physics.functional)": [[238, "deepinv.physics.functional.conv2d", false]], "conv2d_fft (class in deepinv.physics.functional)": [[239, "deepinv.physics.functional.conv2d_fft", false]], "conv3d_fft (class in deepinv.physics.functional)": [[240, "deepinv.physics.functional.conv3d_fft", false]], "conv_transpose2d (class in deepinv.physics.functional)": [[241, "deepinv.physics.functional.conv_transpose2d", false]], "conv_transpose2d_fft (class in deepinv.physics.functional)": [[242, "deepinv.physics.functional.conv_transpose2d_fft", false]], "conv_transpose3d_fft (class in deepinv.physics.functional)": [[243, "deepinv.physics.functional.conv_transpose3d_fft", false]], "convdecoder (class in deepinv.models)": [[132, "deepinv.models.ConvDecoder", false]], "convert_to_fp16() (deepinv.models.diffunet method)": [[137, "deepinv.models.DiffUNet.convert_to_fp16", false]], "convert_to_fp32() (deepinv.models.diffunet method)": [[137, "deepinv.models.DiffUNet.convert_to_fp32", false]], "cpabdiffeomorphism (class in deepinv.transform)": [[274, "deepinv.transform.CPABDiffeomorphism", false]], "cpiteration (class in deepinv.optim.optim_iterators)": [[190, "deepinv.optim.optim_iterators.CPIteration", false]], "crop_output() (deepinv.models.waveletdenoiser method)": [[156, "deepinv.models.WaveletDenoiser.crop_output", false]], "csgmgenerator (class in deepinv.models)": [[131, "deepinv.models.CSGMGenerator", false]], "d_lambda() (deepinv.loss.metric.qnr method)": [[126, "deepinv.loss.metric.QNR.D_lambda", false]], "d_s() (deepinv.loss.metric.qnr method)": [[126, "deepinv.loss.metric.QNR.D_s", false]], "datafidelity (class in deepinv.optim.data_fidelity)": [[182, "deepinv.optim.data_fidelity.DataFidelity", false]], "dcgandiscriminator (class in deepinv.models)": [[133, "deepinv.models.DCGANDiscriminator", false]], "dcgangenerator (class in deepinv.models)": [[134, "deepinv.models.DCGANGenerator", false]], "ddrm (class in deepinv.sampling)": [[264, "deepinv.sampling.DDRM", false]], "decolorize (class in deepinv.physics)": [[203, "deepinv.physics.Decolorize", false]], "decomposablephysics (class in deepinv.physics)": [[204, "deepinv.physics.DecomposablePhysics", false]], "deepimageprior (class in deepinv.models)": [[136, "deepinv.models.DeepImagePrior", false]], "demo_mri_model() (in module deepinv.utils.demo)": [[291, "deepinv.utils.demo.demo_mri_model", false]], "demosaicing (class in deepinv.physics)": [[205, "deepinv.physics.Demosaicing", false]], "denoising (class in deepinv.physics)": [[206, "deepinv.physics.Denoising", false]], "deq_builder() (in module deepinv.unfolded)": [[288, "deepinv.unfolded.DEQ_builder", false]], "diffpir (class in deepinv.sampling)": [[266, "deepinv.sampling.DiffPIR", false]], "diffractionblurgenerator (class in deepinv.physics.generator)": [[252, "deepinv.physics.generator.DiffractionBlurGenerator", false]], "diffractionblurgenerator3d (class in deepinv.physics.generator)": [[253, "deepinv.physics.generator.DiffractionBlurGenerator3D", false]], "diffunet (class in deepinv.models)": [[137, "deepinv.models.DiffUNet", false]], "diffusionsampler (class in deepinv.sampling)": [[267, "deepinv.sampling.DiffusionSampler", false]], "discriminatorloss (class in deepinv.loss.adversarial)": [[109, "deepinv.loss.adversarial.DiscriminatorLoss", false]], "discriminatormetric (class in deepinv.loss.adversarial)": [[110, "deepinv.loss.adversarial.DiscriminatorMetric", false]], "div() (deepinv.optim.bregman.bregman method)": [[176, "deepinv.optim.bregman.Bregman.div", false]], "div() (deepinv.optim.bregman.bregmanl2 method)": [[177, "deepinv.optim.bregman.BregmanL2.div", false]], "div2k (class in deepinv.datasets)": [[75, "deepinv.datasets.DIV2K", false]], "dncnn (class in deepinv.models)": [[138, "deepinv.models.DnCNN", false]], "downsampling (class in deepinv.physics)": [[207, "deepinv.physics.Downsampling", false]], "dpir (class in deepinv.optim)": [[160, "deepinv.optim.DPIR", false]], "dps (class in deepinv.sampling)": [[265, "deepinv.sampling.DPS", false]], "drsiteration (class in deepinv.optim.optim_iterators)": [[191, "deepinv.optim.optim_iterators.DRSIteration", false]], "drunet (class in deepinv.models)": [[135, "deepinv.models.DRUNet", false]], "dwt() (deepinv.models.waveletdenoiser method)": [[156, "deepinv.models.WaveletDenoiser.dwt", false]], "dynamicmri (class in deepinv.physics)": [[208, "deepinv.physics.DynamicMRI", false]], "eiloss (class in deepinv.loss)": [[88, "deepinv.loss.EILoss", false]], "epll (class in deepinv.optim)": [[161, "deepinv.optim.EPLL", false]], "eplldenoiser (class in deepinv.models)": [[139, "deepinv.models.EPLLDenoiser", false]], "epsilon() (deepinv.models.tgvdenoiser static method)": [[151, "deepinv.models.TGVDenoiser.epsilon", false]], "epsilon_adjoint() (deepinv.models.tgvdenoiser static method)": [[151, "deepinv.models.TGVDenoiser.epsilon_adjoint", false]], "equispacedmaskgenerator (class in deepinv.physics.generator)": [[254, "deepinv.physics.generator.EquispacedMaskGenerator", false]], "equivariantdenoiser (class in deepinv.models)": [[141, "deepinv.models.EquivariantDenoiser", false]], "esrgandiscriminator (class in deepinv.models)": [[140, "deepinv.models.ESRGANDiscriminator", false]], "euclidean (class in deepinv.transform.projective)": [[283, "deepinv.transform.projective.Euclidean", false]], "f_matern() (deepinv.physics.generator.motionblurgenerator method)": [[258, "deepinv.physics.generator.MotionBlurGenerator.f_matern", false]], "fastmrislicedataset (class in deepinv.datasets)": [[77, "deepinv.datasets.FastMRISliceDataset", false]], "fastmrislicedataset.slicesamplefileidentifier (class in deepinv.datasets)": [[77, "deepinv.datasets.FastMRISliceDataset.SliceSampleFileIdentifier", false]], "find_nearest() (deepinv.models.diffunet method)": [[137, "deepinv.models.DiffUNet.find_nearest", false]], "find_nearest() (deepinv.sampling.diffpir method)": [[266, "deepinv.sampling.DiffPIR.find_nearest", false]], "fistaiteration (class in deepinv.optim.optim_iterators)": [[192, "deepinv.optim.optim_iterators.FISTAIteration", false]], "fit() (deepinv.optim.utils.gaussianmixturemodel method)": [[197, "deepinv.optim.utils.GaussianMixtureModel.fit", false]], "fixedpoint (class in deepinv.optim)": [[162, "deepinv.optim.FixedPoint", false]], "flatten() (deepinv.physics.timemixin static method)": [[227, "deepinv.physics.TimeMixin.flatten", false]], "flatten() (deepinv.utils.tensorlist method)": [[290, "deepinv.utils.TensorList.flatten", false]], "flatten_c() (deepinv.physics.timemixin static method)": [[227, "deepinv.physics.TimeMixin.flatten_C", false]], "flatten_coeffs() (deepinv.models.waveletdenoiser method)": [[156, "deepinv.models.WaveletDenoiser.flatten_coeffs", false]], "flickr2khr (class in deepinv.datasets)": [[78, "deepinv.datasets.Flickr2kHR", false]], "fmd (class in deepinv.datasets)": [[76, "deepinv.datasets.FMD", false]], "fmd.noisysampleidentifier (class in deepinv.datasets)": [[76, "deepinv.datasets.FMD.NoisySampleIdentifier", false]], "fn() (deepinv.optim.bregman.bregman_icnn method)": [[178, "deepinv.optim.bregman.Bregman_ICNN.fn", false]], "fn() (deepinv.optim.bregman.bregmanl2 method)": [[177, "deepinv.optim.bregman.BregmanL2.fn", false]], "fn() (deepinv.optim.bregman.burgentropy method)": [[179, "deepinv.optim.bregman.BurgEntropy.fn", false]], "fn() (deepinv.optim.bregman.negentropy method)": [[180, "deepinv.optim.bregman.NegEntropy.fn", false]], "fn() (deepinv.optim.data_fidelity.datafidelity method)": [[182, "deepinv.optim.data_fidelity.DataFidelity.fn", false]], "fn() (deepinv.optim.l12prior method)": [[163, "deepinv.optim.L12Prior.fn", false]], "fn() (deepinv.optim.l1prior method)": [[164, "deepinv.optim.L1Prior.fn", false]], "fn() (deepinv.optim.patchnr method)": [[166, "deepinv.optim.PatchNR.fn", false]], "fn() (deepinv.optim.patchprior method)": [[167, "deepinv.optim.PatchPrior.fn", false]], "fn() (deepinv.optim.potential method)": [[169, "deepinv.optim.Potential.fn", false]], "fn() (deepinv.optim.tikhonov method)": [[174, "deepinv.optim.Tikhonov.fn", false]], "fn() (deepinv.optim.tvprior method)": [[173, "deepinv.optim.TVPrior.fn", false]], "fn() (deepinv.optim.waveletprior method)": [[175, "deepinv.optim.WaveletPrior.fn", false]], "fname (deepinv.datasets.fastmrislicedataset.slicesamplefileidentifier attribute)": [[77, "deepinv.datasets.FastMRISliceDataset.SliceSampleFileIdentifier.fname", false]], "fname (deepinv.datasets.fmd.noisysampleidentifier attribute)": [[76, "deepinv.datasets.FMD.NoisySampleIdentifier.fname", false]], "fnejacobianspectralnorm (class in deepinv.loss)": [[89, "deepinv.loss.FNEJacobianSpectralNorm", false]], "forward() (deepinv.loss.adversarial.discriminatorloss method)": [[109, "deepinv.loss.adversarial.DiscriminatorLoss.forward", false]], "forward() (deepinv.loss.adversarial.generatorloss method)": [[111, "deepinv.loss.adversarial.GeneratorLoss.forward", false]], "forward() (deepinv.loss.adversarial.supadversarialdiscriminatorloss method)": [[112, "deepinv.loss.adversarial.SupAdversarialDiscriminatorLoss.forward", false]], "forward() (deepinv.loss.adversarial.supadversarialgeneratorloss method)": [[113, "deepinv.loss.adversarial.SupAdversarialGeneratorLoss.forward", false]], "forward() (deepinv.loss.adversarial.uairgeneratorloss method)": [[114, "deepinv.loss.adversarial.UAIRGeneratorLoss.forward", false]], "forward() (deepinv.loss.adversarial.unsupadversarialdiscriminatorloss method)": [[115, "deepinv.loss.adversarial.UnsupAdversarialDiscriminatorLoss.forward", false]], "forward() (deepinv.loss.adversarial.unsupadversarialgeneratorloss method)": [[116, "deepinv.loss.adversarial.UnsupAdversarialGeneratorLoss.forward", false]], "forward() (deepinv.loss.artifact2artifactloss method)": [[86, "deepinv.loss.Artifact2ArtifactLoss.forward", false]], "forward() (deepinv.loss.baselossscheduler method)": [[87, "deepinv.loss.BaseLossScheduler.forward", false]], "forward() (deepinv.loss.eiloss method)": [[88, "deepinv.loss.EILoss.forward", false]], "forward() (deepinv.loss.fnejacobianspectralnorm method)": [[89, "deepinv.loss.FNEJacobianSpectralNorm.forward", false]], "forward() (deepinv.loss.jacobianspectralnorm method)": [[92, "deepinv.loss.JacobianSpectralNorm.forward", false]], "forward() (deepinv.loss.loss method)": [[93, "deepinv.loss.Loss.forward", false]], "forward() (deepinv.loss.mcloss method)": [[94, "deepinv.loss.MCLoss.forward", false]], "forward() (deepinv.loss.metric.metric method)": [[122, "deepinv.loss.metric.Metric.forward", false]], "forward() (deepinv.loss.moeiloss method)": [[95, "deepinv.loss.MOEILoss.forward", false]], "forward() (deepinv.loss.moiloss method)": [[96, "deepinv.loss.MOILoss.forward", false]], "forward() (deepinv.loss.neighbor2neighbor method)": [[97, "deepinv.loss.Neighbor2Neighbor.forward", false]], "forward() (deepinv.loss.r2rloss method)": [[99, "deepinv.loss.R2RLoss.forward", false]], "forward() (deepinv.loss.scoreloss method)": [[101, "deepinv.loss.ScoreLoss.forward", false]], "forward() (deepinv.loss.splittingloss method)": [[102, "deepinv.loss.SplittingLoss.forward", false]], "forward() (deepinv.loss.suploss method)": [[104, "deepinv.loss.SupLoss.forward", false]], "forward() (deepinv.loss.suregaussianloss method)": [[105, "deepinv.loss.SureGaussianLoss.forward", false]], "forward() (deepinv.loss.surepgloss method)": [[106, "deepinv.loss.SurePGLoss.forward", false]], "forward() (deepinv.loss.surepoissonloss method)": [[107, "deepinv.loss.SurePoissonLoss.forward", false]], "forward() (deepinv.loss.tvloss method)": [[108, "deepinv.loss.TVLoss.forward", false]], "forward() (deepinv.models.artifactremoval method)": [[128, "deepinv.models.ArtifactRemoval.forward", false]], "forward() (deepinv.models.autoencoder method)": [[129, "deepinv.models.AutoEncoder.forward", false]], "forward() (deepinv.models.bm3d method)": [[130, "deepinv.models.BM3D.forward", false]], "forward() (deepinv.models.convdecoder method)": [[132, "deepinv.models.ConvDecoder.forward", false]], "forward() (deepinv.models.csgmgenerator method)": [[131, "deepinv.models.CSGMGenerator.forward", false]], "forward() (deepinv.models.dcgandiscriminator method)": [[133, "deepinv.models.DCGANDiscriminator.forward", false]], "forward() (deepinv.models.dcgangenerator method)": [[134, "deepinv.models.DCGANGenerator.forward", false]], "forward() (deepinv.models.deepimageprior method)": [[136, "deepinv.models.DeepImagePrior.forward", false]], "forward() (deepinv.models.diffunet method)": [[137, "deepinv.models.DiffUNet.forward", false]], "forward() (deepinv.models.dncnn method)": [[138, "deepinv.models.DnCNN.forward", false]], "forward() (deepinv.models.drunet method)": [[135, "deepinv.models.DRUNet.forward", false]], "forward() (deepinv.models.eplldenoiser method)": [[139, "deepinv.models.EPLLDenoiser.forward", false]], "forward() (deepinv.models.equivariantdenoiser method)": [[141, "deepinv.models.EquivariantDenoiser.forward", false]], "forward() (deepinv.models.esrgandiscriminator method)": [[140, "deepinv.models.ESRGANDiscriminator.forward", false]], "forward() (deepinv.models.icnn method)": [[143, "deepinv.models.ICNN.forward", false]], "forward() (deepinv.models.medianfilter method)": [[144, "deepinv.models.MedianFilter.forward", false]], "forward() (deepinv.models.patchgandiscriminator method)": [[147, "deepinv.models.PatchGANDiscriminator.forward", false]], "forward() (deepinv.models.pdnet_dualblock method)": [[145, "deepinv.models.PDNet_DualBlock.forward", false]], "forward() (deepinv.models.pdnet_primalblock method)": [[146, "deepinv.models.PDNet_PrimalBlock.forward", false]], "forward() (deepinv.models.restormer method)": [[148, "deepinv.models.Restormer.forward", false]], "forward() (deepinv.models.scunet method)": [[149, "deepinv.models.SCUNet.forward", false]], "forward() (deepinv.models.swinir method)": [[150, "deepinv.models.SwinIR.forward", false]], "forward() (deepinv.models.tgvdenoiser method)": [[151, "deepinv.models.TGVDenoiser.forward", false]], "forward() (deepinv.models.timeagnosticnet method)": [[153, "deepinv.models.TimeAgnosticNet.forward", false]], "forward() (deepinv.models.timeaveragingnet method)": [[154, "deepinv.models.TimeAveragingNet.forward", false]], "forward() (deepinv.models.tvdenoiser method)": [[152, "deepinv.models.TVDenoiser.forward", false]], "forward() (deepinv.models.unet method)": [[155, "deepinv.models.UNet.forward", false]], "forward() (deepinv.models.waveletdenoiser method)": [[156, "deepinv.models.WaveletDenoiser.forward", false]], "forward() (deepinv.models.waveletdictdenoiser method)": [[157, "deepinv.models.WaveletDictDenoiser.forward", false]], "forward() (deepinv.optim.baseoptim method)": [[159, "deepinv.optim.BaseOptim.forward", false]], "forward() (deepinv.optim.epll method)": [[161, "deepinv.optim.EPLL.forward", false]], "forward() (deepinv.optim.fixedpoint method)": [[162, "deepinv.optim.FixedPoint.forward", false]], "forward() (deepinv.optim.optim_iterators.admmiteration method)": [[189, "deepinv.optim.optim_iterators.ADMMIteration.forward", false]], "forward() (deepinv.optim.optim_iterators.cpiteration method)": [[190, "deepinv.optim.optim_iterators.CPIteration.forward", false]], "forward() (deepinv.optim.optim_iterators.drsiteration method)": [[191, "deepinv.optim.optim_iterators.DRSIteration.forward", false]], "forward() (deepinv.optim.optim_iterators.fistaiteration method)": [[192, "deepinv.optim.optim_iterators.FISTAIteration.forward", false]], "forward() (deepinv.optim.optim_iterators.gditeration method)": [[193, "deepinv.optim.optim_iterators.GDIteration.forward", false]], "forward() (deepinv.optim.optim_iterators.smiteration method)": [[196, "deepinv.optim.optim_iterators.SMIteration.forward", false]], "forward() (deepinv.optim.optimiterator method)": [[165, "deepinv.optim.OptimIterator.forward", false]], "forward() (deepinv.optim.potential method)": [[169, "deepinv.optim.Potential.forward", false]], "forward() (deepinv.optim.utils.gaussianmixturemodel method)": [[197, "deepinv.optim.utils.GaussianMixtureModel.forward", false]], "forward() (deepinv.physics.functional.iradon method)": [[236, "deepinv.physics.functional.IRadon.forward", false]], "forward() (deepinv.physics.functional.radon method)": [[237, "deepinv.physics.functional.Radon.forward", false]], "forward() (deepinv.physics.gammanoise method)": [[209, "deepinv.physics.GammaNoise.forward", false]], "forward() (deepinv.physics.gaussiannoise method)": [[210, "deepinv.physics.GaussianNoise.forward", false]], "forward() (deepinv.physics.logpoissonnoise method)": [[214, "deepinv.physics.LogPoissonNoise.forward", false]], "forward() (deepinv.physics.pansharpen method)": [[216, "deepinv.physics.Pansharpen.forward", false]], "forward() (deepinv.physics.phaseretrieval method)": [[217, "deepinv.physics.PhaseRetrieval.forward", false]], "forward() (deepinv.physics.physics method)": [[218, "deepinv.physics.Physics.forward", false]], "forward() (deepinv.physics.poissongaussiannoise method)": [[219, "deepinv.physics.PoissonGaussianNoise.forward", false]], "forward() (deepinv.physics.poissonnoise method)": [[220, "deepinv.physics.PoissonNoise.forward", false]], "forward() (deepinv.physics.uniformgaussiannoise method)": [[229, "deepinv.physics.UniformGaussianNoise.forward", false]], "forward() (deepinv.physics.uniformnoise method)": [[230, "deepinv.physics.UniformNoise.forward", false]], "forward() (deepinv.sampling.ddrm method)": [[264, "deepinv.sampling.DDRM.forward", false]], "forward() (deepinv.sampling.diffpir method)": [[266, "deepinv.sampling.DiffPIR.forward", false]], "forward() (deepinv.sampling.dps method)": [[265, "deepinv.sampling.DPS.forward", false]], "forward() (deepinv.sampling.montecarlo method)": [[268, "deepinv.sampling.MonteCarlo.forward", false]], "forward() (deepinv.transform.transform method)": [[281, "deepinv.transform.Transform.forward", false]], "forward() (deepinv.unfolded.basedeq method)": [[286, "deepinv.unfolded.BaseDEQ.forward", false]], "forward() (deepinv.unfolded.baseunfold method)": [[287, "deepinv.unfolded.BaseUnfold.forward", false]], "forward_denoise() (deepinv.models.diffunet method)": [[137, "deepinv.models.DiffUNet.forward_denoise", false]], "forward_diffusion() (deepinv.models.diffunet method)": [[137, "deepinv.models.DiffUNet.forward_diffusion", false]], "forward_restormer() (deepinv.models.restormer method)": [[148, "deepinv.models.Restormer.forward_restormer", false]], "fov (deepinv.datasets.fmd.noisysampleidentifier attribute)": [[76, "deepinv.datasets.FMD.NoisySampleIdentifier.fov", false]], "gammanoise (class in deepinv.physics)": [[209, "deepinv.physics.GammaNoise", false]], "gaussian_blur() (in module deepinv.physics.blur)": [[234, "deepinv.physics.blur.gaussian_blur", false]], "gaussianmaskgenerator (class in deepinv.physics.generator)": [[255, "deepinv.physics.generator.GaussianMaskGenerator", false]], "gaussianmixturemodel (class in deepinv.optim.utils)": [[197, "deepinv.optim.utils.GaussianMixtureModel", false]], "gaussiannoise (class in deepinv.physics)": [[210, "deepinv.physics.GaussianNoise", false]], "gaussiansplittingmaskgenerator (class in deepinv.physics.generator)": [[256, "deepinv.physics.generator.GaussianSplittingMaskGenerator", false]], "gditeration (class in deepinv.optim.optim_iterators)": [[193, "deepinv.optim.optim_iterators.GDIteration", false]], "generate_coeff() (deepinv.physics.generator.diffractionblurgenerator method)": [[252, "deepinv.physics.generator.DiffractionBlurGenerator.generate_coeff", false]], "generate_dataset (class in deepinv.datasets)": [[85, "deepinv.datasets.generate_dataset", false]], "generatorloss (class in deepinv.loss.adversarial)": [[111, "deepinv.loss.adversarial.GeneratorLoss", false]], "generatormixture (class in deepinv.physics.generator)": [[257, "deepinv.physics.generator.GeneratorMixture", false]], "get_alpha_beta() (deepinv.sampling.diffpir method)": [[266, "deepinv.sampling.DiffPIR.get_alpha_beta", false]], "get_alpha_prod() (deepinv.models.diffunet method)": [[137, "deepinv.models.DiffUNet.get_alpha_prod", false]], "get_alpha_prod() (deepinv.sampling.diffpir method)": [[266, "deepinv.sampling.DiffPIR.get_alpha_prod", false]], "get_chain() (deepinv.sampling.montecarlo method)": [[268, "deepinv.sampling.MonteCarlo.get_chain", false]], "get_cov() (deepinv.optim.utils.gaussianmixturemodel method)": [[197, "deepinv.optim.utils.GaussianMixtureModel.get_cov", false]], "get_cov_inv_reg() (deepinv.optim.utils.gaussianmixturemodel method)": [[197, "deepinv.optim.utils.GaussianMixtureModel.get_cov_inv_reg", false]], "get_freer_gpu() (in module deepinv.utils)": [[292, "deepinv.utils.get_freer_gpu", false]], "get_noise_schedule() (deepinv.sampling.diffpir method)": [[266, "deepinv.sampling.DiffPIR.get_noise_schedule", false]], "get_params() (deepinv.transform.transform method)": [[281, "deepinv.transform.Transform.get_params", false]], "get_pdf() (deepinv.physics.generator.gaussianmaskgenerator method)": [[255, "deepinv.physics.generator.GaussianMaskGenerator.get_pdf", false]], "get_pdf() (deepinv.physics.generator.randommaskgenerator method)": [[262, "deepinv.physics.generator.RandomMaskGenerator.get_pdf", false]], "get_samples() (deepinv.trainer method)": [[73, "deepinv.Trainer.get_samples", false]], "get_samples_offline() (deepinv.trainer method)": [[73, "deepinv.Trainer.get_samples_offline", false]], "get_samples_online() (deepinv.trainer method)": [[73, "deepinv.Trainer.get_samples_online", false]], "get_weights() (deepinv.optim.utils.gaussianmixturemodel method)": [[197, "deepinv.optim.utils.GaussianMixtureModel.get_weights", false]], "grad() (deepinv.optim.bregman.bregmanl2 method)": [[177, "deepinv.optim.bregman.BregmanL2.grad", false]], "grad() (deepinv.optim.bregman.burgentropy method)": [[179, "deepinv.optim.bregman.BurgEntropy.grad", false]], "grad() (deepinv.optim.bregman.negentropy method)": [[180, "deepinv.optim.bregman.NegEntropy.grad", false]], "grad() (deepinv.optim.data_fidelity.datafidelity method)": [[182, "deepinv.optim.data_fidelity.DataFidelity.grad", false]], "grad() (deepinv.optim.potential method)": [[169, "deepinv.optim.Potential.grad", false]], "grad() (deepinv.optim.red method)": [[171, "deepinv.optim.RED.grad", false]], "grad() (deepinv.optim.scoreprior method)": [[172, "deepinv.optim.ScorePrior.grad", false]], "grad() (deepinv.optim.tikhonov method)": [[174, "deepinv.optim.Tikhonov.grad", false]], "grad_conj() (deepinv.optim.bregman.bregmanl2 method)": [[177, "deepinv.optim.bregman.BregmanL2.grad_conj", false]], "grad_conj() (deepinv.optim.bregman.burgentropy method)": [[179, "deepinv.optim.bregman.BurgEntropy.grad_conj", false]], "grad_conj() (deepinv.optim.bregman.negentropy method)": [[180, "deepinv.optim.bregman.NegEntropy.grad_conj", false]], "grad_conj() (deepinv.optim.potential method)": [[169, "deepinv.optim.Potential.grad_conj", false]], "gradient_descent (class in deepinv.optim.utils)": [[199, "deepinv.optim.utils.gradient_descent", false]], "gsdrunet (class in deepinv.models)": [[142, "deepinv.models.GSDRUNet", false]], "hard_threshold_topk() (deepinv.models.waveletdenoiser method)": [[156, "deepinv.models.WaveletDenoiser.hard_threshold_topk", false]], "haze (class in deepinv.physics)": [[211, "deepinv.physics.Haze", false]], "hdf5dataset (class in deepinv.datasets)": [[79, "deepinv.datasets.HDF5Dataset", false]], "histogram (class in deepinv.physics.functional)": [[244, "deepinv.physics.functional.histogram", false]], "histogramdd (class in deepinv.physics.functional)": [[245, "deepinv.physics.functional.histogramdd", false]], "homography (class in deepinv.transform)": [[275, "deepinv.transform.Homography", false]], "hqsiteration (class in deepinv.optim.optim_iterators)": [[194, "deepinv.optim.optim_iterators.HQSIteration", false]], "icnn (class in deepinv.models)": [[143, "deepinv.models.ICNN", false]], "identity() (deepinv.transform.transform method)": [[281, "deepinv.transform.Transform.identity", false]], "img_type (deepinv.datasets.fmd.noisysampleidentifier attribute)": [[76, "deepinv.datasets.FMD.NoisySampleIdentifier.img_type", false]], "indicatorl2 (class in deepinv.optim.data_fidelity)": [[183, "deepinv.optim.data_fidelity.IndicatorL2", false]], "init_anderson_acceleration() (deepinv.optim.fixedpoint method)": [[162, "deepinv.optim.FixedPoint.init_anderson_acceleration", false]], "init_iterate_fn() (deepinv.optim.baseoptim method)": [[159, "deepinv.optim.BaseOptim.init_iterate_fn", false]], "init_metrics_fn() (deepinv.optim.baseoptim method)": [[159, "deepinv.optim.BaseOptim.init_metrics_fn", false]], "inpainting (class in deepinv.physics)": [[212, "deepinv.physics.Inpainting", false]], "interleavedepochlossscheduler (class in deepinv.loss)": [[90, "deepinv.loss.InterleavedEpochLossScheduler", false]], "interleavedlossscheduler (class in deepinv.loss)": [[91, "deepinv.loss.InterleavedLossScheduler", false]], "inverse() (deepinv.transform.transform method)": [[281, "deepinv.transform.Transform.inverse", false]], "invert_metric() (deepinv.loss.metric.metric method)": [[122, "deepinv.loss.metric.Metric.invert_metric", false]], "invert_metric() (deepinv.loss.metric.qnr method)": [[126, "deepinv.loss.metric.QNR.invert_metric", false]], "invert_metric() (deepinv.loss.metric.ssim method)": [[127, "deepinv.loss.metric.SSIM.invert_metric", false]], "invert_params() (deepinv.transform.transform method)": [[281, "deepinv.transform.Transform.invert_params", false]], "iradon (class in deepinv.physics.functional)": [[236, "deepinv.physics.functional.IRadon", false]], "is_standard_deblurring_network() (deepinv.models.restormer method)": [[148, "deepinv.models.Restormer.is_standard_deblurring_network", false]], "is_standard_denoising_network() (deepinv.models.restormer method)": [[148, "deepinv.models.Restormer.is_standard_denoising_network", false]], "is_standard_deraining_network() (deepinv.models.restormer method)": [[148, "deepinv.models.Restormer.is_standard_deraining_network", false]], "iwt() (deepinv.models.waveletdenoiser method)": [[156, "deepinv.models.WaveletDenoiser.iwt", false]], "jacobianspectralnorm (class in deepinv.loss)": [[92, "deepinv.loss.JacobianSpectralNorm", false]], "l1 (class in deepinv.optim.data_fidelity)": [[184, "deepinv.optim.data_fidelity.L1", false]], "l12prior (class in deepinv.optim)": [[163, "deepinv.optim.L12Prior", false]], "l1l2 (class in deepinv.loss.metric)": [[117, "deepinv.loss.metric.L1L2", false]], "l1prior (class in deepinv.optim)": [[164, "deepinv.optim.L1Prior", false]], "l2 (class in deepinv.optim.data_fidelity)": [[185, "deepinv.optim.data_fidelity.L2", false]], "lidcidrislicedataset (class in deepinv.datasets)": [[80, "deepinv.datasets.LidcIdriSliceDataset", false]], "lidcidrislicedataset.slicesampleidentifier (class in deepinv.datasets)": [[80, "deepinv.datasets.LidcIdriSliceDataset.SliceSampleIdentifier", false]], "linearphysics (class in deepinv.physics)": [[213, "deepinv.physics.LinearPhysics", false]], "load_image() (in module deepinv.utils)": [[293, "deepinv.utils.load_image", false]], "load_state_dict() (deepinv.optim.utils.gaussianmixturemodel method)": [[197, "deepinv.optim.utils.GaussianMixtureModel.load_state_dict", false]], "load_url_image() (in module deepinv.utils)": [[294, "deepinv.utils.load_url_image", false]], "log_metrics_wandb() (deepinv.trainer method)": [[73, "deepinv.Trainer.log_metrics_wandb", false]], "logpoissonlikelihood (class in deepinv.optim.data_fidelity)": [[186, "deepinv.optim.data_fidelity.LogPoissonLikelihood", false]], "logpoissonnoise (class in deepinv.physics)": [[214, "deepinv.physics.LogPoissonNoise", false]], "loss (class in deepinv.loss)": [[93, "deepinv.loss.Loss", false]], "lpips (class in deepinv.loss.metric)": [[118, "deepinv.loss.metric.LPIPS", false]], "lpnorm (class in deepinv.loss.metric)": [[119, "deepinv.loss.metric.LpNorm", false]], "lsdirhr (class in deepinv.datasets)": [[81, "deepinv.datasets.LsdirHR", false]], "mae (class in deepinv.loss.metric)": [[120, "deepinv.loss.metric.MAE", false]], "matern_kernel() (deepinv.physics.generator.motionblurgenerator method)": [[258, "deepinv.physics.generator.MotionBlurGenerator.matern_kernel", false]], "mcloss (class in deepinv.loss)": [[94, "deepinv.loss.MCLoss", false]], "md_step() (deepinv.optim.bregman.bregman method)": [[176, "deepinv.optim.bregman.Bregman.MD_step", false]], "mean_has_converged() (deepinv.sampling.montecarlo method)": [[268, "deepinv.sampling.MonteCarlo.mean_has_converged", false]], "medianfilter (class in deepinv.models)": [[144, "deepinv.models.MedianFilter", false]], "metric (class in deepinv.loss.metric)": [[122, "deepinv.loss.metric.Metric", false]], "metric() (deepinv.loss.metric.l1l2 method)": [[117, "deepinv.loss.metric.L1L2.metric", false]], "metric() (deepinv.loss.metric.lpips method)": [[118, "deepinv.loss.metric.LPIPS.metric", false]], "metric() (deepinv.loss.metric.lpnorm method)": [[119, "deepinv.loss.metric.LpNorm.metric", false]], "metric() (deepinv.loss.metric.mae method)": [[120, "deepinv.loss.metric.MAE.metric", false]], "metric() (deepinv.loss.metric.metric method)": [[122, "deepinv.loss.metric.Metric.metric", false]], "metric() (deepinv.loss.metric.mse method)": [[121, "deepinv.loss.metric.MSE.metric", false]], "metric() (deepinv.loss.metric.niqe method)": [[123, "deepinv.loss.metric.NIQE.metric", false]], "metric() (deepinv.loss.metric.nmse method)": [[124, "deepinv.loss.metric.NMSE.metric", false]], "metric() (deepinv.loss.metric.psnr method)": [[125, "deepinv.loss.metric.PSNR.metric", false]], "metric() (deepinv.loss.metric.qnr method)": [[126, "deepinv.loss.metric.QNR.metric", false]], "metric() (deepinv.loss.metric.ssim method)": [[127, "deepinv.loss.metric.SSIM.metric", false]], "model_inference() (deepinv.trainer method)": [[73, "deepinv.Trainer.model_inference", false]], "moeiloss (class in deepinv.loss)": [[95, "deepinv.loss.MOEILoss", false]], "moiloss (class in deepinv.loss)": [[96, "deepinv.loss.MOILoss", false]], "montecarlo (class in deepinv.sampling)": [[268, "deepinv.sampling.MonteCarlo", false]], "motionblurgenerator (class in deepinv.physics.generator)": [[258, "deepinv.physics.generator.MotionBlurGenerator", false]], "mri (class in deepinv.physics)": [[215, "deepinv.physics.MRI", false]], "mse (class in deepinv.loss.metric)": [[121, "deepinv.loss.metric.MSE", false]], "multiplier (class in deepinv.physics.functional)": [[246, "deepinv.physics.functional.multiplier", false]], "multiplier_adjoint (class in deepinv.physics.functional)": [[247, "deepinv.physics.functional.multiplier_adjoint", false]], "nabla() (deepinv.models.tgvdenoiser static method)": [[151, "deepinv.models.TGVDenoiser.nabla", false]], "nabla() (deepinv.models.tvdenoiser static method)": [[152, "deepinv.models.TVDenoiser.nabla", false]], "nabla() (deepinv.optim.tvprior method)": [[173, "deepinv.optim.TVPrior.nabla", false]], "nabla_adjoint() (deepinv.models.tgvdenoiser static method)": [[151, "deepinv.models.TGVDenoiser.nabla_adjoint", false]], "nabla_adjoint() (deepinv.models.tvdenoiser static method)": [[152, "deepinv.models.TVDenoiser.nabla_adjoint", false]], "nabla_adjoint() (deepinv.optim.tvprior method)": [[173, "deepinv.optim.TVPrior.nabla_adjoint", false]], "negative_log_likelihood() (deepinv.optim.epll method)": [[161, "deepinv.optim.EPLL.negative_log_likelihood", false]], "negentropy (class in deepinv.optim.bregman)": [[180, "deepinv.optim.bregman.NegEntropy", false]], "neighbor2neighbor (class in deepinv.loss)": [[97, "deepinv.loss.Neighbor2Neighbor", false]], "next_physics() (deepinv.loss.moiloss method)": [[96, "deepinv.loss.MOILoss.next_physics", false]], "niqe (class in deepinv.loss.metric)": [[123, "deepinv.loss.metric.NIQE", false]], "nmse (class in deepinv.loss.metric)": [[124, "deepinv.loss.metric.NMSE", false]], "no_learning_inference() (deepinv.trainer method)": [[73, "deepinv.Trainer.no_learning_inference", false]], "noise() (deepinv.physics.dynamicmri method)": [[208, "deepinv.physics.DynamicMRI.noise", false]], "noise() (deepinv.physics.inpainting method)": [[212, "deepinv.physics.Inpainting.noise", false]], "noise() (deepinv.physics.physics method)": [[218, "deepinv.physics.Physics.noise", false]], "noise_dirname (deepinv.datasets.fmd.noisysampleidentifier attribute)": [[76, "deepinv.datasets.FMD.NoisySampleIdentifier.noise_dirname", false]], "ones_like() (in module deepinv.utils)": [[295, "deepinv.utils.ones_like", false]], "optim_builder() (in module deepinv.optim)": [[188, "deepinv.optim.optim_builder", false]], "optimiterator (class in deepinv.optim)": [[165, "deepinv.optim.OptimIterator", false]], "optimize_z() (deepinv.models.csgmgenerator method)": [[131, "deepinv.models.CSGMGenerator.optimize_z", false]], "pad_input() (deepinv.models.waveletdenoiser method)": [[156, "deepinv.models.WaveletDenoiser.pad_input", false]], "pansharpen (class in deepinv.physics)": [[216, "deepinv.physics.Pansharpen", false]], "pantiltrotate (class in deepinv.transform.projective)": [[284, "deepinv.transform.projective.PanTiltRotate", false]], "patchdataset (class in deepinv.datasets)": [[82, "deepinv.datasets.PatchDataset", false]], "patchgandiscriminator (class in deepinv.models)": [[147, "deepinv.models.PatchGANDiscriminator", false]], "patchnr (class in deepinv.optim)": [[166, "deepinv.optim.PatchNR", false]], "patchprior (class in deepinv.optim)": [[167, "deepinv.optim.PatchPrior", false]], "patient_id (deepinv.datasets.lidcidrislicedataset.slicesampleidentifier attribute)": [[80, "deepinv.datasets.LidcIdriSliceDataset.SliceSampleIdentifier.patient_id", false]], "pdnet_dualblock (class in deepinv.models)": [[145, "deepinv.models.PDNet_DualBlock", false]], "pdnet_primalblock (class in deepinv.models)": [[146, "deepinv.models.PDNet_PrimalBlock", false]], "pgditeration (class in deepinv.optim.optim_iterators)": [[195, "deepinv.optim.optim_iterators.PGDIteration", false]], "phase2phaseloss (class in deepinv.loss)": [[98, "deepinv.loss.Phase2PhaseLoss", false]], "phase2phasesplittingmaskgenerator (class in deepinv.physics.generator)": [[259, "deepinv.physics.generator.Phase2PhaseSplittingMaskGenerator", false]], "phaseretrieval (class in deepinv.physics)": [[217, "deepinv.physics.PhaseRetrieval", false]], "physics (class in deepinv.physics)": [[218, "deepinv.physics.Physics", false]], "physicsgenerator (class in deepinv.physics.generator)": [[260, "deepinv.physics.generator.PhysicsGenerator", false]], "plot() (deepinv.trainer method)": [[73, "deepinv.Trainer.plot", false]], "plot() (in module deepinv.utils)": [[296, "deepinv.utils.plot", false]], "plot_curves() (in module deepinv.utils)": [[297, "deepinv.utils.plot_curves", false]], "plot_inset() (in module deepinv.utils)": [[298, "deepinv.utils.plot_inset", false]], "plot_ortho3d() (in module deepinv.utils)": [[299, "deepinv.utils.plot_ortho3D", false]], "plot_parameters() (in module deepinv.utils)": [[300, "deepinv.utils.plot_parameters", false]], "plot_videos() (in module deepinv.utils)": [[301, "deepinv.utils.plot_videos", false]], "pnp (class in deepinv.optim)": [[168, "deepinv.optim.PnP", false]], "poissongaussiannoise (class in deepinv.physics)": [[219, "deepinv.physics.PoissonGaussianNoise", false]], "poissonlikelihood (class in deepinv.optim.data_fidelity)": [[187, "deepinv.optim.data_fidelity.PoissonLikelihood", false]], "poissonnoise (class in deepinv.physics)": [[220, "deepinv.physics.PoissonNoise", false]], "potential (class in deepinv.optim)": [[169, "deepinv.optim.Potential", false]], "prior (class in deepinv.optim)": [[170, "deepinv.optim.Prior", false]], "product_convolution2d (class in deepinv.physics.functional)": [[248, "deepinv.physics.functional.product_convolution2d", false]], "productconvolutionblurgenerator (class in deepinv.physics.generator)": [[261, "deepinv.physics.generator.ProductConvolutionBlurGenerator", false]], "prox() (deepinv.optim.data_fidelity.indicatorl2 method)": [[183, "deepinv.optim.data_fidelity.IndicatorL2.prox", false]], "prox() (deepinv.optim.data_fidelity.l1 method)": [[184, "deepinv.optim.data_fidelity.L1.prox", false]], "prox() (deepinv.optim.data_fidelity.l2 method)": [[185, "deepinv.optim.data_fidelity.L2.prox", false]], "prox() (deepinv.optim.l12prior method)": [[163, "deepinv.optim.L12Prior.prox", false]], "prox() (deepinv.optim.l1prior method)": [[164, "deepinv.optim.L1Prior.prox", false]], "prox() (deepinv.optim.pnp method)": [[168, "deepinv.optim.PnP.prox", false]], "prox() (deepinv.optim.potential method)": [[169, "deepinv.optim.Potential.prox", false]], "prox() (deepinv.optim.tikhonov method)": [[174, "deepinv.optim.Tikhonov.prox", false]], "prox() (deepinv.optim.tvprior method)": [[173, "deepinv.optim.TVPrior.prox", false]], "prox() (deepinv.optim.waveletprior method)": [[175, "deepinv.optim.WaveletPrior.prox", false]], "prox_conjugate() (deepinv.optim.potential method)": [[169, "deepinv.optim.Potential.prox_conjugate", false]], "prox_l0() (deepinv.models.waveletdenoiser method)": [[156, "deepinv.models.WaveletDenoiser.prox_l0", false]], "prox_l1() (deepinv.models.waveletdenoiser method)": [[156, "deepinv.models.WaveletDenoiser.prox_l1", false]], "prox_l2() (deepinv.physics.decomposablephysics method)": [[204, "deepinv.physics.DecomposablePhysics.prox_l2", false]], "prox_l2() (deepinv.physics.downsampling method)": [[207, "deepinv.physics.Downsampling.prox_l2", false]], "prox_l2() (deepinv.physics.linearphysics method)": [[213, "deepinv.physics.LinearPhysics.prox_l2", false]], "prox_tau_fx() (deepinv.models.tvdenoiser method)": [[152, "deepinv.models.TVDenoiser.prox_tau_fx", false]], "psi() (deepinv.models.waveletdenoiser static method)": [[156, "deepinv.models.WaveletDenoiser.psi", false]], "psi() (deepinv.models.waveletdictdenoiser method)": [[157, "deepinv.models.WaveletDictDenoiser.psi", false]], "psi() (deepinv.optim.waveletprior method)": [[175, "deepinv.optim.WaveletPrior.psi", false]], "psnr (class in deepinv.loss.metric)": [[125, "deepinv.loss.metric.PSNR", false]], "qnr (class in deepinv.loss.metric)": [[126, "deepinv.loss.metric.QNR", false]], "r2rloss (class in deepinv.loss)": [[99, "deepinv.loss.R2RLoss", false]], "radiointerferometry (class in deepinv.physics)": [[221, "deepinv.physics.RadioInterferometry", false]], "radon (class in deepinv.physics.functional)": [[237, "deepinv.physics.functional.Radon", false]], "rand_like() (in module deepinv.utils)": [[302, "deepinv.utils.rand_like", false]], "randn_like() (in module deepinv.utils)": [[303, "deepinv.utils.randn_like", false]], "random_latent() (deepinv.models.csgmgenerator method)": [[131, "deepinv.models.CSGMGenerator.random_latent", false]], "randomlossscheduler (class in deepinv.loss)": [[100, "deepinv.loss.RandomLossScheduler", false]], "randommaskgenerator (class in deepinv.physics.generator)": [[262, "deepinv.physics.generator.RandomMaskGenerator", false]], "randomphaseretrieval (class in deepinv.physics)": [[222, "deepinv.physics.RandomPhaseRetrieval", false]], "red (class in deepinv.optim)": [[171, "deepinv.optim.RED", false]], "reflect (class in deepinv.transform)": [[276, "deepinv.transform.Reflect", false]], "relaxation_step() (deepinv.optim.optimiterator method)": [[165, "deepinv.optim.OptimIterator.relaxation_step", false]], "repeat() (deepinv.physics.timemixin static method)": [[227, "deepinv.physics.TimeMixin.repeat", false]], "reset() (deepinv.sampling.montecarlo method)": [[268, "deepinv.sampling.MonteCarlo.reset", false]], "reset_metrics() (deepinv.trainer method)": [[73, "deepinv.Trainer.reset_metrics", false]], "reset_rng() (deepinv.physics.generator.physicsgenerator method)": [[260, "deepinv.physics.generator.PhysicsGenerator.reset_rng", false]], "reshape() (deepinv.utils.tensorlist method)": [[290, "deepinv.utils.TensorList.reshape", false]], "reshape_ths() (deepinv.models.waveletdenoiser method)": [[156, "deepinv.models.WaveletDenoiser.reshape_ths", false]], "restormer (class in deepinv.models)": [[148, "deepinv.models.Restormer", false]], "rng_manual_seed() (deepinv.physics.generator.physicsgenerator method)": [[260, "deepinv.physics.generator.PhysicsGenerator.rng_manual_seed", false]], "roll_reflect_1d() (deepinv.transform.shifttime method)": [[280, "deepinv.transform.ShiftTime.roll_reflect_1d", false]], "rotate (class in deepinv.transform)": [[277, "deepinv.transform.Rotate", false]], "sample_mask() (deepinv.physics.generator.basemaskgenerator method)": [[250, "deepinv.physics.generator.BaseMaskGenerator.sample_mask", false]], "sample_mask() (deepinv.physics.generator.equispacedmaskgenerator method)": [[254, "deepinv.physics.generator.EquispacedMaskGenerator.sample_mask", false]], "sample_mask() (deepinv.physics.generator.randommaskgenerator method)": [[262, "deepinv.physics.generator.RandomMaskGenerator.sample_mask", false]], "save_model() (deepinv.trainer method)": [[73, "deepinv.Trainer.save_model", false]], "save_model() (deepinv.training.adversarialtrainer method)": [[273, "deepinv.training.AdversarialTrainer.save_model", false]], "scale (class in deepinv.transform)": [[278, "deepinv.transform.Scale", false]], "scan_folder (deepinv.datasets.lidcidrislicedataset.slicesampleidentifier attribute)": [[80, "deepinv.datasets.LidcIdriSliceDataset.SliceSampleIdentifier.scan_folder", false]], "schedule() (deepinv.loss.baselossscheduler method)": [[87, "deepinv.loss.BaseLossScheduler.schedule", false]], "schedule() (deepinv.loss.interleavedepochlossscheduler method)": [[90, "deepinv.loss.InterleavedEpochLossScheduler.schedule", false]], "schedule() (deepinv.loss.interleavedlossscheduler method)": [[91, "deepinv.loss.InterleavedLossScheduler.schedule", false]], "schedule() (deepinv.loss.randomlossscheduler method)": [[100, "deepinv.loss.RandomLossScheduler.schedule", false]], "schedule() (deepinv.loss.steplossscheduler method)": [[103, "deepinv.loss.StepLossScheduler.schedule", false]], "scoreloss (class in deepinv.loss)": [[101, "deepinv.loss.ScoreLoss", false]], "scoreprior (class in deepinv.optim)": [[172, "deepinv.optim.ScorePrior", false]], "scunet (class in deepinv.models)": [[149, "deepinv.models.SCUNet", false]], "sensor() (deepinv.physics.physics method)": [[218, "deepinv.physics.Physics.sensor", false]], "sequentialmri (class in deepinv.physics)": [[223, "deepinv.physics.SequentialMRI", false]], "set14hr (class in deepinv.datasets)": [[83, "deepinv.datasets.Set14HR", false]], "set_cov() (deepinv.optim.utils.gaussianmixturemodel method)": [[197, "deepinv.optim.utils.GaussianMixtureModel.set_cov", false]], "set_cov_reg() (deepinv.optim.utils.gaussianmixturemodel method)": [[197, "deepinv.optim.utils.GaussianMixtureModel.set_cov_reg", false]], "set_weights() (deepinv.optim.utils.gaussianmixturemodel method)": [[197, "deepinv.optim.utils.GaussianMixtureModel.set_weights", false]], "setup_train() (deepinv.trainer method)": [[73, "deepinv.Trainer.setup_train", false]], "setup_train() (deepinv.training.adversarialtrainer method)": [[273, "deepinv.training.AdversarialTrainer.setup_train", false]], "shift (class in deepinv.transform)": [[279, "deepinv.transform.Shift", false]], "shifttime (class in deepinv.transform)": [[280, "deepinv.transform.ShiftTime", false]], "sigmagenerator (class in deepinv.physics.generator)": [[263, "deepinv.physics.generator.SigmaGenerator", false]], "similarity (class in deepinv.transform.projective)": [[285, "deepinv.transform.projective.Similarity", false]], "sinc_filter() (in module deepinv.physics.blur)": [[235, "deepinv.physics.blur.sinc_filter", false]], "singlephotonlidar (class in deepinv.physics)": [[224, "deepinv.physics.SinglePhotonLidar", false]], "singlepixelcamera (class in deepinv.physics)": [[225, "deepinv.physics.SinglePixelCamera", false]], "skrock (class in deepinv.sampling)": [[269, "deepinv.sampling.SKRock", false]], "slice_fname (deepinv.datasets.lidcidrislicedataset.slicesampleidentifier attribute)": [[80, "deepinv.datasets.LidcIdriSliceDataset.SliceSampleIdentifier.slice_fname", false]], "slice_ind (deepinv.datasets.fastmrislicedataset.slicesamplefileidentifier attribute)": [[77, "deepinv.datasets.FastMRISliceDataset.SliceSampleFileIdentifier.slice_ind", false]], "smiteration (class in deepinv.optim.optim_iterators)": [[196, "deepinv.optim.optim_iterators.SMIteration", false]], "spacevaryingblur (class in deepinv.physics)": [[226, "deepinv.physics.SpaceVaryingBlur", false]], "split() (deepinv.loss.phase2phaseloss static method)": [[98, "deepinv.loss.Phase2PhaseLoss.split", false]], "split() (deepinv.loss.splittingloss static method)": [[102, "deepinv.loss.SplittingLoss.split", false]], "splittingloss (class in deepinv.loss)": [[102, "deepinv.loss.SplittingLoss", false]], "ssim (class in deepinv.loss.metric)": [[127, "deepinv.loss.metric.SSIM", false]], "step() (deepinv.physics.generator.basemaskgenerator method)": [[250, "deepinv.physics.generator.BaseMaskGenerator.step", false]], "step() (deepinv.physics.generator.bernoullisplittingmaskgenerator method)": [[251, "deepinv.physics.generator.BernoulliSplittingMaskGenerator.step", false]], "step() (deepinv.physics.generator.diffractionblurgenerator method)": [[252, "deepinv.physics.generator.DiffractionBlurGenerator.step", false]], "step() (deepinv.physics.generator.diffractionblurgenerator3d method)": [[253, "deepinv.physics.generator.DiffractionBlurGenerator3D.step", false]], "step() (deepinv.physics.generator.generatormixture method)": [[257, "deepinv.physics.generator.GeneratorMixture.step", false]], "step() (deepinv.physics.generator.motionblurgenerator method)": [[258, "deepinv.physics.generator.MotionBlurGenerator.step", false]], "step() (deepinv.physics.generator.physicsgenerator method)": [[260, "deepinv.physics.generator.PhysicsGenerator.step", false]], "step() (deepinv.physics.generator.productconvolutionblurgenerator method)": [[261, "deepinv.physics.generator.ProductConvolutionBlurGenerator.step", false]], "step() (deepinv.physics.generator.sigmagenerator method)": [[263, "deepinv.physics.generator.SigmaGenerator.step", false]], "step() (deepinv.trainer method)": [[73, "deepinv.Trainer.step", false]], "steplossscheduler (class in deepinv.loss)": [[103, "deepinv.loss.StepLossScheduler", false]], "sum() (deepinv.utils.tensorlist method)": [[290, "deepinv.utils.TensorList.sum", false]], "supadversarialdiscriminatorloss (class in deepinv.loss.adversarial)": [[112, "deepinv.loss.adversarial.SupAdversarialDiscriminatorLoss", false]], "supadversarialgeneratorloss (class in deepinv.loss.adversarial)": [[113, "deepinv.loss.adversarial.SupAdversarialGeneratorLoss", false]], "suploss (class in deepinv.loss)": [[104, "deepinv.loss.SupLoss", false]], "suregaussianloss (class in deepinv.loss)": [[105, "deepinv.loss.SureGaussianLoss", false]], "surepgloss (class in deepinv.loss)": [[106, "deepinv.loss.SurePGLoss", false]], "surepoissonloss (class in deepinv.loss)": [[107, "deepinv.loss.SurePoissonLoss", false]], "swinir (class in deepinv.models)": [[150, "deepinv.models.SwinIR", false]], "symmetrize() (deepinv.transform.transform method)": [[281, "deepinv.transform.Transform.symmetrize", false]], "tensorlist (class in deepinv.utils)": [[290, "deepinv.utils.TensorList", false]], "test() (deepinv.trainer method)": [[73, "deepinv.Trainer.test", false]], "test() (in module deepinv)": [[271, "deepinv.test", false]], "tgvdenoiser (class in deepinv.models)": [[151, "deepinv.models.TGVDenoiser", false]], "threshold_3d() (deepinv.models.waveletdenoiser method)": [[156, "deepinv.models.WaveletDenoiser.threshold_3D", false]], "threshold_nd() (deepinv.models.waveletdenoiser method)": [[156, "deepinv.models.WaveletDenoiser.threshold_ND", false]], "thresold_2d() (deepinv.models.waveletdenoiser method)": [[156, "deepinv.models.WaveletDenoiser.thresold_2D", false]], "thresold_func() (deepinv.models.waveletdenoiser method)": [[156, "deepinv.models.WaveletDenoiser.thresold_func", false]], "tikhonov (class in deepinv.optim)": [[174, "deepinv.optim.Tikhonov", false]], "timeagnosticnet (class in deepinv.models)": [[153, "deepinv.models.TimeAgnosticNet", false]], "timeaveragingnet (class in deepinv.models)": [[154, "deepinv.models.TimeAveragingNet", false]], "timemixin (class in deepinv.physics)": [[227, "deepinv.physics.TimeMixin", false]], "to_complex_denoiser (class in deepinv.models.complex)": [[158, "deepinv.models.complex.to_complex_denoiser", false]], "to_static() (deepinv.physics.dynamicmri method)": [[208, "deepinv.physics.DynamicMRI.to_static", false]], "tomography (class in deepinv.physics)": [[228, "deepinv.physics.Tomography", false]], "train() (deepinv.trainer method)": [[73, "deepinv.Trainer.train", false]], "train() (in module deepinv)": [[272, "deepinv.train", false]], "trainer (class in deepinv)": [[73, "deepinv.Trainer", false]], "transform (class in deepinv.transform)": [[281, "deepinv.transform.Transform", false]], "transform() (deepinv.transform.transform method)": [[281, "deepinv.transform.Transform.transform", false]], "tvdenoiser (class in deepinv.models)": [[152, "deepinv.models.TVDenoiser", false]], "tvloss (class in deepinv.loss)": [[108, "deepinv.loss.TVLoss", false]], "tvprior (class in deepinv.optim)": [[173, "deepinv.optim.TVPrior", false]], "uairgeneratorloss (class in deepinv.loss.adversarial)": [[114, "deepinv.loss.adversarial.UAIRGeneratorLoss", false]], "ula (class in deepinv.sampling)": [[270, "deepinv.sampling.ULA", false]], "unet (class in deepinv.models)": [[155, "deepinv.models.UNet", false]], "unflatten() (deepinv.physics.timemixin static method)": [[227, "deepinv.physics.TimeMixin.unflatten", false]], "unfolded_builder() (in module deepinv.unfolded)": [[289, "deepinv.unfolded.unfolded_builder", false]], "uniformgaussiannoise (class in deepinv.physics)": [[229, "deepinv.physics.UniformGaussianNoise", false]], "uniformnoise (class in deepinv.physics)": [[230, "deepinv.physics.UniformNoise", false]], "unsupadversarialdiscriminatorloss (class in deepinv.loss.adversarial)": [[115, "deepinv.loss.adversarial.UnsupAdversarialDiscriminatorLoss", false]], "unsupadversarialgeneratorloss (class in deepinv.loss.adversarial)": [[116, "deepinv.loss.adversarial.UnsupAdversarialGeneratorLoss", false]], "update() (deepinv.physics.physics method)": [[218, "deepinv.physics.Physics.update", false]], "update_data_fidelity_fn() (deepinv.optim.baseoptim method)": [[159, "deepinv.optim.BaseOptim.update_data_fidelity_fn", false]], "update_metrics_fn() (deepinv.optim.baseoptim method)": [[159, "deepinv.optim.BaseOptim.update_metrics_fn", false]], "update_parameters() (deepinv.physics.blur method)": [[200, "deepinv.physics.Blur.update_parameters", false]], "update_parameters() (deepinv.physics.blurfft method)": [[201, "deepinv.physics.BlurFFT.update_parameters", false]], "update_parameters() (deepinv.physics.decomposablephysics method)": [[204, "deepinv.physics.DecomposablePhysics.update_parameters", false]], "update_parameters() (deepinv.physics.gammanoise method)": [[209, "deepinv.physics.GammaNoise.update_parameters", false]], "update_parameters() (deepinv.physics.gaussiannoise method)": [[210, "deepinv.physics.GaussianNoise.update_parameters", false]], "update_parameters() (deepinv.physics.logpoissonnoise method)": [[214, "deepinv.physics.LogPoissonNoise.update_parameters", false]], "update_parameters() (deepinv.physics.mri method)": [[215, "deepinv.physics.MRI.update_parameters", false]], "update_parameters() (deepinv.physics.poissongaussiannoise method)": [[219, "deepinv.physics.PoissonGaussianNoise.update_parameters", false]], "update_parameters() (deepinv.physics.poissonnoise method)": [[220, "deepinv.physics.PoissonNoise.update_parameters", false]], "update_parameters() (deepinv.physics.spacevaryingblur method)": [[226, "deepinv.physics.SpaceVaryingBlur.update_parameters", false]], "update_parameters() (deepinv.physics.uniformnoise method)": [[230, "deepinv.physics.UniformNoise.update_parameters", false]], "update_params_fn() (deepinv.optim.baseoptim method)": [[159, "deepinv.optim.BaseOptim.update_params_fn", false]], "update_prior_fn() (deepinv.optim.baseoptim method)": [[159, "deepinv.optim.BaseOptim.update_prior_fn", false]], "urban100hr (class in deepinv.datasets)": [[84, "deepinv.datasets.Urban100HR", false]], "var_has_converged() (deepinv.sampling.montecarlo method)": [[268, "deepinv.sampling.MonteCarlo.var_has_converged", false]], "verify_split_dataset_integrity() (deepinv.datasets.div2k method)": [[75, "deepinv.datasets.DIV2K.verify_split_dataset_integrity", false]], "verify_split_dataset_integrity() (deepinv.datasets.lsdirhr method)": [[81, "deepinv.datasets.LsdirHR.verify_split_dataset_integrity", false]], "waveletdenoiser (class in deepinv.models)": [[156, "deepinv.models.WaveletDenoiser", false]], "waveletdictdenoiser (class in deepinv.models)": [[157, "deepinv.models.WaveletDictDenoiser", false]], "waveletprior (class in deepinv.optim)": [[175, "deepinv.optim.WaveletPrior", false]], "wrap_flatten_c() (deepinv.physics.timemixin static method)": [[227, "deepinv.physics.TimeMixin.wrap_flatten_C", false]], "zeros_like() (in module deepinv.utils)": [[304, "deepinv.utils.zeros_like", false]]}, "objects": {"deepinv": [[73, 0, 1, "", "Trainer"], [271, 3, 1, "", "test"], [272, 3, 1, "", "train"]], "deepinv.Trainer": [[73, 1, 1, "", "check_clip_grad"], [73, 1, 1, "", "compute_loss"], [73, 1, 1, "", "compute_metrics"], [73, 1, 1, "", "get_samples"], [73, 1, 1, "", "get_samples_offline"], [73, 1, 1, "", "get_samples_online"], [73, 1, 1, "", "log_metrics_wandb"], [73, 1, 1, "", "model_inference"], [73, 1, 1, "", "no_learning_inference"], [73, 1, 1, "", "plot"], [73, 1, 1, "", "reset_metrics"], [73, 1, 1, "", "save_model"], [73, 1, 1, "", "setup_train"], [73, 1, 1, "", "step"], [73, 1, 1, "", "test"], [73, 1, 1, "", "train"]], "deepinv.datasets": [[74, 0, 1, "", "CBSD68"], [75, 0, 1, "", "DIV2K"], [76, 0, 1, "", "FMD"], [77, 0, 1, "", "FastMRISliceDataset"], [78, 0, 1, "", "Flickr2kHR"], [79, 0, 1, "", "HDF5Dataset"], [80, 0, 1, "", "LidcIdriSliceDataset"], [81, 0, 1, "", "LsdirHR"], [82, 0, 1, "", "PatchDataset"], [83, 0, 1, "", "Set14HR"], [84, 0, 1, "", "Urban100HR"], [85, 0, 1, "", "generate_dataset"]], "deepinv.datasets.CBSD68": [[74, 1, 1, "", "check_dataset_exists"]], "deepinv.datasets.DIV2K": [[75, 1, 1, "", "verify_split_dataset_integrity"]], "deepinv.datasets.FMD": [[76, 0, 1, "", "NoisySampleIdentifier"]], "deepinv.datasets.FMD.NoisySampleIdentifier": [[76, 2, 1, "", "fname"], [76, 2, 1, "", "fov"], [76, 2, 1, "", "img_type"], [76, 2, 1, "", "noise_dirname"]], "deepinv.datasets.FastMRISliceDataset": [[77, 0, 1, "", "SliceSampleFileIdentifier"]], "deepinv.datasets.FastMRISliceDataset.SliceSampleFileIdentifier": [[77, 2, 1, "", "fname"], [77, 2, 1, "", "slice_ind"]], "deepinv.datasets.Flickr2kHR": [[78, 1, 1, "", "check_dataset_exists"]], "deepinv.datasets.LidcIdriSliceDataset": [[80, 0, 1, "", "SliceSampleIdentifier"]], "deepinv.datasets.LidcIdriSliceDataset.SliceSampleIdentifier": [[80, 2, 1, "", "patient_id"], [80, 2, 1, "", "scan_folder"], [80, 2, 1, "", "slice_fname"]], "deepinv.datasets.LsdirHR": [[81, 1, 1, "", "verify_split_dataset_integrity"]], "deepinv.datasets.Set14HR": [[83, 1, 1, "", "check_dataset_exists"]], "deepinv.datasets.Urban100HR": [[84, 1, 1, "", "check_dataset_exists"]], "deepinv.loss": [[86, 0, 1, "", "Artifact2ArtifactLoss"], [87, 0, 1, "", "BaseLossScheduler"], [88, 0, 1, "", "EILoss"], [89, 0, 1, "", "FNEJacobianSpectralNorm"], [90, 0, 1, "", "InterleavedEpochLossScheduler"], [91, 0, 1, "", "InterleavedLossScheduler"], [92, 0, 1, "", "JacobianSpectralNorm"], [93, 0, 1, "", "Loss"], [94, 0, 1, "", "MCLoss"], [95, 0, 1, "", "MOEILoss"], [96, 0, 1, "", "MOILoss"], [97, 0, 1, "", "Neighbor2Neighbor"], [98, 0, 1, "", "Phase2PhaseLoss"], [99, 0, 1, "", "R2RLoss"], [100, 0, 1, "", "RandomLossScheduler"], [101, 0, 1, "", "ScoreLoss"], [102, 0, 1, "", "SplittingLoss"], [103, 0, 1, "", "StepLossScheduler"], [104, 0, 1, "", "SupLoss"], [105, 0, 1, "", "SureGaussianLoss"], [106, 0, 1, "", "SurePGLoss"], [107, 0, 1, "", "SurePoissonLoss"], [108, 0, 1, "", "TVLoss"]], "deepinv.loss.Artifact2ArtifactLoss": [[86, 1, 1, "", "forward"]], "deepinv.loss.BaseLossScheduler": [[87, 1, 1, "", "adapt_model"], [87, 1, 1, "", "forward"], [87, 1, 1, "", "schedule"]], "deepinv.loss.EILoss": [[88, 1, 1, "", "forward"]], "deepinv.loss.FNEJacobianSpectralNorm": [[89, 1, 1, "", "forward"]], "deepinv.loss.InterleavedEpochLossScheduler": [[90, 1, 1, "", "schedule"]], "deepinv.loss.InterleavedLossScheduler": [[91, 1, 1, "", "schedule"]], "deepinv.loss.JacobianSpectralNorm": [[92, 1, 1, "", "forward"]], "deepinv.loss.Loss": [[93, 1, 1, "", "adapt_model"], [93, 1, 1, "", "forward"]], "deepinv.loss.MCLoss": [[94, 1, 1, "", "forward"]], "deepinv.loss.MOEILoss": [[95, 1, 1, "", "forward"]], "deepinv.loss.MOILoss": [[96, 1, 1, "", "forward"], [96, 1, 1, "", "next_physics"]], "deepinv.loss.Neighbor2Neighbor": [[97, 1, 1, "", "forward"]], "deepinv.loss.Phase2PhaseLoss": [[98, 1, 1, "", "adapt_model"], [98, 1, 1, "", "split"]], "deepinv.loss.R2RLoss": [[99, 1, 1, "", "adapt_model"], [99, 1, 1, "", "forward"]], "deepinv.loss.RandomLossScheduler": [[100, 1, 1, "", "schedule"]], "deepinv.loss.ScoreLoss": [[101, 1, 1, "", "adapt_model"], [101, 1, 1, "", "forward"]], "deepinv.loss.SplittingLoss": [[102, 1, 1, "", "adapt_model"], [102, 1, 1, "", "forward"], [102, 1, 1, "", "split"]], "deepinv.loss.StepLossScheduler": [[103, 1, 1, "", "schedule"]], "deepinv.loss.SupLoss": [[104, 1, 1, "", "forward"]], "deepinv.loss.SureGaussianLoss": [[105, 1, 1, "", "forward"]], "deepinv.loss.SurePGLoss": [[106, 1, 1, "", "forward"]], "deepinv.loss.SurePoissonLoss": [[107, 1, 1, "", "forward"]], "deepinv.loss.TVLoss": [[108, 1, 1, "", "forward"]], "deepinv.loss.adversarial": [[109, 0, 1, "", "DiscriminatorLoss"], [110, 0, 1, "", "DiscriminatorMetric"], [111, 0, 1, "", "GeneratorLoss"], [112, 0, 1, "", "SupAdversarialDiscriminatorLoss"], [113, 0, 1, "", "SupAdversarialGeneratorLoss"], [114, 0, 1, "", "UAIRGeneratorLoss"], [115, 0, 1, "", "UnsupAdversarialDiscriminatorLoss"], [116, 0, 1, "", "UnsupAdversarialGeneratorLoss"]], "deepinv.loss.adversarial.DiscriminatorLoss": [[109, 1, 1, "", "adversarial_loss"], [109, 1, 1, "", "forward"]], "deepinv.loss.adversarial.GeneratorLoss": [[111, 1, 1, "", "adversarial_loss"], [111, 1, 1, "", "forward"]], "deepinv.loss.adversarial.SupAdversarialDiscriminatorLoss": [[112, 1, 1, "", "forward"]], "deepinv.loss.adversarial.SupAdversarialGeneratorLoss": [[113, 1, 1, "", "forward"]], "deepinv.loss.adversarial.UAIRGeneratorLoss": [[114, 1, 1, "", "forward"]], "deepinv.loss.adversarial.UnsupAdversarialDiscriminatorLoss": [[115, 1, 1, "", "forward"]], "deepinv.loss.adversarial.UnsupAdversarialGeneratorLoss": [[116, 1, 1, "", "forward"]], "deepinv.loss.metric": [[117, 0, 1, "", "L1L2"], [118, 0, 1, "", "LPIPS"], [119, 0, 1, "", "LpNorm"], [120, 0, 1, "", "MAE"], [121, 0, 1, "", "MSE"], [122, 0, 1, "", "Metric"], [123, 0, 1, "", "NIQE"], [124, 0, 1, "", "NMSE"], [125, 0, 1, "", "PSNR"], [126, 0, 1, "", "QNR"], [127, 0, 1, "", "SSIM"]], "deepinv.loss.metric.L1L2": [[117, 1, 1, "", "metric"]], "deepinv.loss.metric.LPIPS": [[118, 1, 1, "", "metric"]], "deepinv.loss.metric.LpNorm": [[119, 1, 1, "", "metric"]], "deepinv.loss.metric.MAE": [[120, 1, 1, "", "metric"]], "deepinv.loss.metric.MSE": [[121, 1, 1, "", "metric"]], "deepinv.loss.metric.Metric": [[122, 1, 1, "", "forward"], [122, 1, 1, "", "invert_metric"], [122, 1, 1, "", "metric"]], "deepinv.loss.metric.NIQE": [[123, 1, 1, "", "metric"]], "deepinv.loss.metric.NMSE": [[124, 1, 1, "", "metric"]], "deepinv.loss.metric.PSNR": [[125, 1, 1, "", "metric"]], "deepinv.loss.metric.QNR": [[126, 1, 1, "", "D_lambda"], [126, 1, 1, "", "D_s"], [126, 1, 1, "", "invert_metric"], [126, 1, 1, "", "metric"]], "deepinv.loss.metric.SSIM": [[127, 1, 1, "", "invert_metric"], [127, 1, 1, "", "metric"]], "deepinv.models": [[128, 0, 1, "", "ArtifactRemoval"], [129, 0, 1, "", "AutoEncoder"], [130, 0, 1, "", "BM3D"], [131, 0, 1, "", "CSGMGenerator"], [132, 0, 1, "", "ConvDecoder"], [133, 0, 1, "", "DCGANDiscriminator"], [134, 0, 1, "", "DCGANGenerator"], [135, 0, 1, "", "DRUNet"], [136, 0, 1, "", "DeepImagePrior"], [137, 0, 1, "", "DiffUNet"], [138, 0, 1, "", "DnCNN"], [139, 0, 1, "", "EPLLDenoiser"], [140, 0, 1, "", "ESRGANDiscriminator"], [141, 0, 1, "", "EquivariantDenoiser"], [142, 0, 1, "", "GSDRUNet"], [143, 0, 1, "", "ICNN"], [144, 0, 1, "", "MedianFilter"], [145, 0, 1, "", "PDNet_DualBlock"], [146, 0, 1, "", "PDNet_PrimalBlock"], [147, 0, 1, "", "PatchGANDiscriminator"], [148, 0, 1, "", "Restormer"], [149, 0, 1, "", "SCUNet"], [150, 0, 1, "", "SwinIR"], [151, 0, 1, "", "TGVDenoiser"], [152, 0, 1, "", "TVDenoiser"], [153, 0, 1, "", "TimeAgnosticNet"], [154, 0, 1, "", "TimeAveragingNet"], [155, 0, 1, "", "UNet"], [156, 0, 1, "", "WaveletDenoiser"], [157, 0, 1, "", "WaveletDictDenoiser"]], "deepinv.models.ArtifactRemoval": [[128, 1, 1, "", "forward"]], "deepinv.models.AutoEncoder": [[129, 1, 1, "", "forward"]], "deepinv.models.BM3D": [[130, 1, 1, "", "forward"]], "deepinv.models.CSGMGenerator": [[131, 1, 1, "", "forward"], [131, 1, 1, "", "optimize_z"], [131, 1, 1, "", "random_latent"]], "deepinv.models.ConvDecoder": [[132, 1, 1, "", "forward"]], "deepinv.models.DCGANDiscriminator": [[133, 1, 1, "", "forward"]], "deepinv.models.DCGANGenerator": [[134, 1, 1, "", "forward"]], "deepinv.models.DRUNet": [[135, 1, 1, "", "forward"]], "deepinv.models.DeepImagePrior": [[136, 1, 1, "", "forward"]], "deepinv.models.DiffUNet": [[137, 1, 1, "", "convert_to_fp16"], [137, 1, 1, "", "convert_to_fp32"], [137, 1, 1, "", "find_nearest"], [137, 1, 1, "", "forward"], [137, 1, 1, "", "forward_denoise"], [137, 1, 1, "", "forward_diffusion"], [137, 1, 1, "", "get_alpha_prod"]], "deepinv.models.DnCNN": [[138, 1, 1, "", "forward"]], "deepinv.models.EPLLDenoiser": [[139, 1, 1, "", "forward"]], "deepinv.models.ESRGANDiscriminator": [[140, 1, 1, "", "forward"]], "deepinv.models.EquivariantDenoiser": [[141, 1, 1, "", "forward"]], "deepinv.models.ICNN": [[143, 1, 1, "", "forward"]], "deepinv.models.MedianFilter": [[144, 1, 1, "", "forward"]], "deepinv.models.PDNet_DualBlock": [[145, 1, 1, "", "forward"]], "deepinv.models.PDNet_PrimalBlock": [[146, 1, 1, "", "forward"]], "deepinv.models.PatchGANDiscriminator": [[147, 1, 1, "", "forward"]], "deepinv.models.Restormer": [[148, 1, 1, "", "forward"], [148, 1, 1, "", "forward_restormer"], [148, 1, 1, "", "is_standard_deblurring_network"], [148, 1, 1, "", "is_standard_denoising_network"], [148, 1, 1, "", "is_standard_deraining_network"]], "deepinv.models.SCUNet": [[149, 1, 1, "", "forward"]], "deepinv.models.SwinIR": [[150, 1, 1, "", "forward"]], "deepinv.models.TGVDenoiser": [[151, 1, 1, "", "epsilon"], [151, 1, 1, "", "epsilon_adjoint"], [151, 1, 1, "", "forward"], [151, 1, 1, "", "nabla"], [151, 1, 1, "", "nabla_adjoint"]], "deepinv.models.TVDenoiser": [[152, 1, 1, "", "forward"], [152, 1, 1, "", "nabla"], [152, 1, 1, "", "nabla_adjoint"], [152, 1, 1, "", "prox_tau_fx"]], "deepinv.models.TimeAgnosticNet": [[153, 1, 1, "", "forward"]], "deepinv.models.TimeAveragingNet": [[154, 1, 1, "", "forward"]], "deepinv.models.UNet": [[155, 1, 1, "", "forward"]], "deepinv.models.WaveletDenoiser": [[156, 1, 1, "", "crop_output"], [156, 1, 1, "", "dwt"], [156, 1, 1, "", "flatten_coeffs"], [156, 1, 1, "", "forward"], [156, 1, 1, "", "hard_threshold_topk"], [156, 1, 1, "", "iwt"], [156, 1, 1, "", "pad_input"], [156, 1, 1, "", "prox_l0"], [156, 1, 1, "", "prox_l1"], [156, 1, 1, "", "psi"], [156, 1, 1, "", "reshape_ths"], [156, 1, 1, "", "threshold_3D"], [156, 1, 1, "", "threshold_ND"], [156, 1, 1, "", "thresold_2D"], [156, 1, 1, "", "thresold_func"]], "deepinv.models.WaveletDictDenoiser": [[157, 1, 1, "", "forward"], [157, 1, 1, "", "psi"]], "deepinv.models.complex": [[158, 0, 1, "", "to_complex_denoiser"]], "deepinv.optim": [[159, 0, 1, "", "BaseOptim"], [160, 0, 1, "", "DPIR"], [161, 0, 1, "", "EPLL"], [162, 0, 1, "", "FixedPoint"], [163, 0, 1, "", "L12Prior"], [164, 0, 1, "", "L1Prior"], [165, 0, 1, "", "OptimIterator"], [166, 0, 1, "", "PatchNR"], [167, 0, 1, "", "PatchPrior"], [168, 0, 1, "", "PnP"], [169, 0, 1, "", "Potential"], [170, 0, 1, "", "Prior"], [171, 0, 1, "", "RED"], [172, 0, 1, "", "ScorePrior"], [173, 0, 1, "", "TVPrior"], [174, 0, 1, "", "Tikhonov"], [175, 0, 1, "", "WaveletPrior"], [188, 3, 1, "", "optim_builder"]], "deepinv.optim.BaseOptim": [[159, 1, 1, "", "check_conv_fn"], [159, 1, 1, "", "check_iteration_fn"], [159, 1, 1, "", "forward"], [159, 1, 1, "", "init_iterate_fn"], [159, 1, 1, "", "init_metrics_fn"], [159, 1, 1, "", "update_data_fidelity_fn"], [159, 1, 1, "", "update_metrics_fn"], [159, 1, 1, "", "update_params_fn"], [159, 1, 1, "", "update_prior_fn"]], "deepinv.optim.EPLL": [[161, 1, 1, "", "forward"], [161, 1, 1, "", "negative_log_likelihood"]], "deepinv.optim.FixedPoint": [[162, 1, 1, "", "anderson_acceleration_step"], [162, 1, 1, "", "forward"], [162, 1, 1, "", "init_anderson_acceleration"]], "deepinv.optim.L12Prior": [[163, 1, 1, "", "fn"], [163, 1, 1, "", "prox"]], "deepinv.optim.L1Prior": [[164, 1, 1, "", "fn"], [164, 1, 1, "", "prox"]], "deepinv.optim.OptimIterator": [[165, 1, 1, "", "forward"], [165, 1, 1, "", "relaxation_step"]], "deepinv.optim.PatchNR": [[166, 1, 1, "", "fn"]], "deepinv.optim.PatchPrior": [[167, 1, 1, "", "fn"]], "deepinv.optim.PnP": [[168, 1, 1, "", "prox"]], "deepinv.optim.Potential": [[169, 1, 1, "", "bregman_prox"], [169, 1, 1, "", "conjugate"], [169, 1, 1, "", "fn"], [169, 1, 1, "", "forward"], [169, 1, 1, "", "grad"], [169, 1, 1, "", "grad_conj"], [169, 1, 1, "", "prox"], [169, 1, 1, "", "prox_conjugate"]], "deepinv.optim.RED": [[171, 1, 1, "", "grad"]], "deepinv.optim.ScorePrior": [[172, 1, 1, "", "grad"]], "deepinv.optim.TVPrior": [[173, 1, 1, "", "fn"], [173, 1, 1, "", "nabla"], [173, 1, 1, "", "nabla_adjoint"], [173, 1, 1, "", "prox"]], "deepinv.optim.Tikhonov": [[174, 1, 1, "", "fn"], [174, 1, 1, "", "grad"], [174, 1, 1, "", "prox"]], "deepinv.optim.WaveletPrior": [[175, 1, 1, "", "fn"], [175, 1, 1, "", "prox"], [175, 1, 1, "", "psi"]], "deepinv.optim.bregman": [[176, 0, 1, "", "Bregman"], [177, 0, 1, "", "BregmanL2"], [178, 0, 1, "", "Bregman_ICNN"], [179, 0, 1, "", "BurgEntropy"], [180, 0, 1, "", "NegEntropy"]], "deepinv.optim.bregman.Bregman": [[176, 1, 1, "", "MD_step"], [176, 1, 1, "", "div"]], "deepinv.optim.bregman.BregmanL2": [[177, 1, 1, "", "conjugate"], [177, 1, 1, "", "div"], [177, 1, 1, "", "fn"], [177, 1, 1, "", "grad"], [177, 1, 1, "", "grad_conj"]], "deepinv.optim.bregman.Bregman_ICNN": [[178, 1, 1, "", "conjugate"], [178, 1, 1, "", "fn"]], "deepinv.optim.bregman.BurgEntropy": [[179, 1, 1, "", "conjugate"], [179, 1, 1, "", "fn"], [179, 1, 1, "", "grad"], [179, 1, 1, "", "grad_conj"]], "deepinv.optim.bregman.NegEntropy": [[180, 1, 1, "", "conjugate"], [180, 1, 1, "", "fn"], [180, 1, 1, "", "grad"], [180, 1, 1, "", "grad_conj"]], "deepinv.optim.data_fidelity": [[181, 0, 1, "", "AmplitudeLoss"], [182, 0, 1, "", "DataFidelity"], [183, 0, 1, "", "IndicatorL2"], [184, 0, 1, "", "L1"], [185, 0, 1, "", "L2"], [186, 0, 1, "", "LogPoissonLikelihood"], [187, 0, 1, "", "PoissonLikelihood"]], "deepinv.optim.data_fidelity.DataFidelity": [[182, 1, 1, "", "fn"], [182, 1, 1, "", "grad"]], "deepinv.optim.data_fidelity.IndicatorL2": [[183, 1, 1, "", "prox"]], "deepinv.optim.data_fidelity.L1": [[184, 1, 1, "", "prox"]], "deepinv.optim.data_fidelity.L2": [[185, 1, 1, "", "prox"]], "deepinv.optim.optim_iterators": [[189, 0, 1, "", "ADMMIteration"], [190, 0, 1, "", "CPIteration"], [191, 0, 1, "", "DRSIteration"], [192, 0, 1, "", "FISTAIteration"], [193, 0, 1, "", "GDIteration"], [194, 0, 1, "", "HQSIteration"], [195, 0, 1, "", "PGDIteration"], [196, 0, 1, "", "SMIteration"]], "deepinv.optim.optim_iterators.ADMMIteration": [[189, 1, 1, "", "forward"]], "deepinv.optim.optim_iterators.CPIteration": [[190, 1, 1, "", "forward"]], "deepinv.optim.optim_iterators.DRSIteration": [[191, 1, 1, "", "forward"]], "deepinv.optim.optim_iterators.FISTAIteration": [[192, 1, 1, "", "forward"]], "deepinv.optim.optim_iterators.GDIteration": [[193, 1, 1, "", "forward"]], "deepinv.optim.optim_iterators.SMIteration": [[196, 1, 1, "", "forward"]], "deepinv.optim.utils": [[197, 0, 1, "", "GaussianMixtureModel"], [198, 0, 1, "", "conjugate_gradient"], [199, 0, 1, "", "gradient_descent"]], "deepinv.optim.utils.GaussianMixtureModel": [[197, 1, 1, "", "classify"], [197, 1, 1, "", "component_log_likelihoods"], [197, 1, 1, "", "fit"], [197, 1, 1, "", "forward"], [197, 1, 1, "", "get_cov"], [197, 1, 1, "", "get_cov_inv_reg"], [197, 1, 1, "", "get_weights"], [197, 1, 1, "", "load_state_dict"], [197, 1, 1, "", "set_cov"], [197, 1, 1, "", "set_cov_reg"], [197, 1, 1, "", "set_weights"]], "deepinv.physics": [[200, 0, 1, "", "Blur"], [201, 0, 1, "", "BlurFFT"], [202, 0, 1, "", "CompressedSensing"], [203, 0, 1, "", "Decolorize"], [204, 0, 1, "", "DecomposablePhysics"], [205, 0, 1, "", "Demosaicing"], [206, 0, 1, "", "Denoising"], [207, 0, 1, "", "Downsampling"], [208, 0, 1, "", "DynamicMRI"], [209, 0, 1, "", "GammaNoise"], [210, 0, 1, "", "GaussianNoise"], [211, 0, 1, "", "Haze"], [212, 0, 1, "", "Inpainting"], [213, 0, 1, "", "LinearPhysics"], [214, 0, 1, "", "LogPoissonNoise"], [215, 0, 1, "", "MRI"], [216, 0, 1, "", "Pansharpen"], [217, 0, 1, "", "PhaseRetrieval"], [218, 0, 1, "", "Physics"], [219, 0, 1, "", "PoissonGaussianNoise"], [220, 0, 1, "", "PoissonNoise"], [221, 0, 1, "", "RadioInterferometry"], [222, 0, 1, "", "RandomPhaseRetrieval"], [223, 0, 1, "", "SequentialMRI"], [224, 0, 1, "", "SinglePhotonLidar"], [225, 0, 1, "", "SinglePixelCamera"], [226, 0, 1, "", "SpaceVaryingBlur"], [227, 0, 1, "", "TimeMixin"], [228, 0, 1, "", "Tomography"], [229, 0, 1, "", "UniformGaussianNoise"], [230, 0, 1, "", "UniformNoise"], [231, 0, 1, "", "adjoint_function"]], "deepinv.physics.Blur": [[200, 1, 1, "", "A"], [200, 1, 1, "", "A_adjoint"], [200, 1, 1, "", "update_parameters"]], "deepinv.physics.BlurFFT": [[201, 1, 1, "", "A"], [201, 1, 1, "", "A_adjoint"], [201, 1, 1, "", "update_parameters"]], "deepinv.physics.CompressedSensing": [[202, 1, 1, "", "A"], [202, 1, 1, "", "A_adjoint"], [202, 1, 1, "", "A_dagger"]], "deepinv.physics.DecomposablePhysics": [[204, 1, 1, "", "A"], [204, 1, 1, "", "A_A_adjoint"], [204, 1, 1, "", "A_adjoint"], [204, 1, 1, "", "A_adjoint_A"], [204, 1, 1, "", "A_dagger"], [204, 1, 1, "", "prox_l2"], [204, 1, 1, "", "update_parameters"]], "deepinv.physics.Downsampling": [[207, 1, 1, "", "A"], [207, 1, 1, "", "A_adjoint"], [207, 1, 1, "", "prox_l2"]], "deepinv.physics.DynamicMRI": [[208, 1, 1, "", "A"], [208, 1, 1, "", "A_adjoint"], [208, 1, 1, "", "A_dagger"], [208, 1, 1, "", "check_mask"], [208, 1, 1, "", "noise"], [208, 1, 1, "", "to_static"]], "deepinv.physics.GammaNoise": [[209, 1, 1, "", "forward"], [209, 1, 1, "", "update_parameters"]], "deepinv.physics.GaussianNoise": [[210, 1, 1, "", "forward"], [210, 1, 1, "", "update_parameters"]], "deepinv.physics.Haze": [[211, 1, 1, "", "A"], [211, 1, 1, "", "A_dagger"]], "deepinv.physics.Inpainting": [[212, 1, 1, "", "__mul__"], [212, 1, 1, "", "noise"]], "deepinv.physics.LinearPhysics": [[213, 1, 1, "", "A_A_adjoint"], [213, 1, 1, "", "A_adjoint"], [213, 1, 1, "", "A_adjoint_A"], [213, 1, 1, "", "A_dagger"], [213, 1, 1, "", "A_vjp"], [213, 1, 1, "", "__add__"], [213, 1, 1, "", "__mul__"], [213, 1, 1, "", "adjointness_test"], [213, 1, 1, "", "compute_norm"], [213, 1, 1, "", "prox_l2"]], "deepinv.physics.LogPoissonNoise": [[214, 1, 1, "", "forward"], [214, 1, 1, "", "update_parameters"]], "deepinv.physics.MRI": [[215, 1, 1, "", "check_mask"], [215, 1, 1, "", "update_parameters"]], "deepinv.physics.Pansharpen": [[216, 1, 1, "", "A"], [216, 1, 1, "", "A_adjoint"], [216, 1, 1, "", "forward"]], "deepinv.physics.PhaseRetrieval": [[217, 1, 1, "", "A"], [217, 1, 1, "", "A_dagger"], [217, 1, 1, "", "A_vjp"], [217, 1, 1, "", "B_dagger"], [217, 1, 1, "", "forward"]], "deepinv.physics.Physics": [[218, 1, 1, "", "A"], [218, 1, 1, "", "A_dagger"], [218, 1, 1, "", "A_vjp"], [218, 1, 1, "", "__add__"], [218, 1, 1, "", "__mul__"], [218, 1, 1, "", "forward"], [218, 1, 1, "", "noise"], [218, 1, 1, "", "sensor"], [218, 1, 1, "", "update"]], "deepinv.physics.PoissonGaussianNoise": [[219, 1, 1, "", "forward"], [219, 1, 1, "", "update_parameters"]], "deepinv.physics.PoissonNoise": [[220, 1, 1, "", "forward"], [220, 1, 1, "", "update_parameters"]], "deepinv.physics.RadioInterferometry": [[221, 1, 1, "", "A"], [221, 1, 1, "", "A_adjoint"]], "deepinv.physics.SequentialMRI": [[223, 1, 1, "", "A"], [223, 1, 1, "", "A_adjoint"]], "deepinv.physics.SinglePhotonLidar": [[224, 1, 1, "", "A"], [224, 1, 1, "", "A_dagger"]], "deepinv.physics.SpaceVaryingBlur": [[226, 1, 1, "", "A"], [226, 1, 1, "", "A_adjoint"], [226, 1, 1, "", "update_parameters"]], "deepinv.physics.TimeMixin": [[227, 1, 1, "", "average"], [227, 1, 1, "", "flatten"], [227, 1, 1, "", "flatten_C"], [227, 1, 1, "", "repeat"], [227, 1, 1, "", "unflatten"], [227, 1, 1, "", "wrap_flatten_C"]], "deepinv.physics.Tomography": [[228, 1, 1, "", "A"], [228, 1, 1, "", "A_adjoint"], [228, 1, 1, "", "A_dagger"]], "deepinv.physics.UniformGaussianNoise": [[229, 1, 1, "", "forward"]], "deepinv.physics.UniformNoise": [[230, 1, 1, "", "forward"], [230, 1, 1, "", "update_parameters"]], "deepinv.physics.blur": [[232, 3, 1, "", "bicubic_filter"], [233, 3, 1, "", "bilinear_filter"], [234, 3, 1, "", "gaussian_blur"], [235, 3, 1, "", "sinc_filter"]], "deepinv.physics.functional": [[236, 0, 1, "", "IRadon"], [237, 0, 1, "", "Radon"], [238, 0, 1, "", "conv2d"], [239, 0, 1, "", "conv2d_fft"], [240, 0, 1, "", "conv3d_fft"], [241, 0, 1, "", "conv_transpose2d"], [242, 0, 1, "", "conv_transpose2d_fft"], [243, 0, 1, "", "conv_transpose3d_fft"], [244, 0, 1, "", "histogram"], [245, 0, 1, "", "histogramdd"], [246, 0, 1, "", "multiplier"], [247, 0, 1, "", "multiplier_adjoint"], [248, 0, 1, "", "product_convolution2d"]], "deepinv.physics.functional.IRadon": [[236, 1, 1, "", "forward"]], "deepinv.physics.functional.Radon": [[237, 1, 1, "", "forward"]], "deepinv.physics.generator": [[249, 0, 1, "", "Artifact2ArtifactSplittingMaskGenerator"], [250, 0, 1, "", "BaseMaskGenerator"], [251, 0, 1, "", "BernoulliSplittingMaskGenerator"], [252, 0, 1, "", "DiffractionBlurGenerator"], [253, 0, 1, "", "DiffractionBlurGenerator3D"], [254, 0, 1, "", "EquispacedMaskGenerator"], [255, 0, 1, "", "GaussianMaskGenerator"], [256, 0, 1, "", "GaussianSplittingMaskGenerator"], [257, 0, 1, "", "GeneratorMixture"], [258, 0, 1, "", "MotionBlurGenerator"], [259, 0, 1, "", "Phase2PhaseSplittingMaskGenerator"], [260, 0, 1, "", "PhysicsGenerator"], [261, 0, 1, "", "ProductConvolutionBlurGenerator"], [262, 0, 1, "", "RandomMaskGenerator"], [263, 0, 1, "", "SigmaGenerator"]], "deepinv.physics.generator.Artifact2ArtifactSplittingMaskGenerator": [[249, 1, 1, "", "batch_step"]], "deepinv.physics.generator.BaseMaskGenerator": [[250, 1, 1, "", "sample_mask"], [250, 1, 1, "", "step"]], "deepinv.physics.generator.BernoulliSplittingMaskGenerator": [[251, 1, 1, "", "batch_step"], [251, 1, 1, "", "check_pixelwise"], [251, 1, 1, "", "step"]], "deepinv.physics.generator.DiffractionBlurGenerator": [[252, 1, 1, "", "generate_coeff"], [252, 1, 1, "", "step"]], "deepinv.physics.generator.DiffractionBlurGenerator3D": [[253, 1, 1, "", "step"]], "deepinv.physics.generator.EquispacedMaskGenerator": [[254, 1, 1, "", "sample_mask"]], "deepinv.physics.generator.GaussianMaskGenerator": [[255, 1, 1, "", "get_pdf"]], "deepinv.physics.generator.GaussianSplittingMaskGenerator": [[256, 1, 1, "", "batch_step"]], "deepinv.physics.generator.GeneratorMixture": [[257, 1, 1, "", "step"]], "deepinv.physics.generator.MotionBlurGenerator": [[258, 1, 1, "", "f_matern"], [258, 1, 1, "", "matern_kernel"], [258, 1, 1, "", "step"]], "deepinv.physics.generator.Phase2PhaseSplittingMaskGenerator": [[259, 1, 1, "", "batch_step"]], "deepinv.physics.generator.PhysicsGenerator": [[260, 1, 1, "", "__add__"], [260, 1, 1, "", "reset_rng"], [260, 1, 1, "", "rng_manual_seed"], [260, 1, 1, "", "step"]], "deepinv.physics.generator.ProductConvolutionBlurGenerator": [[261, 1, 1, "", "step"]], "deepinv.physics.generator.RandomMaskGenerator": [[262, 1, 1, "", "get_pdf"], [262, 1, 1, "", "sample_mask"]], "deepinv.physics.generator.SigmaGenerator": [[263, 1, 1, "", "step"]], "deepinv.sampling": [[264, 0, 1, "", "DDRM"], [265, 0, 1, "", "DPS"], [266, 0, 1, "", "DiffPIR"], [267, 0, 1, "", "DiffusionSampler"], [268, 0, 1, "", "MonteCarlo"], [269, 0, 1, "", "SKRock"], [270, 0, 1, "", "ULA"]], "deepinv.sampling.DDRM": [[264, 1, 1, "", "forward"]], "deepinv.sampling.DPS": [[265, 1, 1, "", "compute_alpha_betas"], [265, 1, 1, "", "forward"]], "deepinv.sampling.DiffPIR": [[266, 1, 1, "", "find_nearest"], [266, 1, 1, "", "forward"], [266, 1, 1, "", "get_alpha_beta"], [266, 1, 1, "", "get_alpha_prod"], [266, 1, 1, "", "get_noise_schedule"]], "deepinv.sampling.MonteCarlo": [[268, 1, 1, "", "forward"], [268, 1, 1, "", "get_chain"], [268, 1, 1, "", "mean_has_converged"], [268, 1, 1, "", "reset"], [268, 1, 1, "", "var_has_converged"]], "deepinv.training": [[273, 0, 1, "", "AdversarialTrainer"]], "deepinv.training.AdversarialTrainer": [[273, 1, 1, "", "check_clip_grad_D"], [273, 1, 1, "", "compute_loss"], [273, 1, 1, "", "save_model"], [273, 1, 1, "", "setup_train"]], "deepinv.transform": [[274, 0, 1, "", "CPABDiffeomorphism"], [275, 0, 1, "", "Homography"], [276, 0, 1, "", "Reflect"], [277, 0, 1, "", "Rotate"], [278, 0, 1, "", "Scale"], [279, 0, 1, "", "Shift"], [280, 0, 1, "", "ShiftTime"], [281, 0, 1, "", "Transform"]], "deepinv.transform.ShiftTime": [[280, 1, 1, "", "roll_reflect_1d"]], "deepinv.transform.Transform": [[281, 1, 1, "", "__add__"], [281, 1, 1, "", "__mul__"], [281, 1, 1, "", "forward"], [281, 1, 1, "", "get_params"], [281, 1, 1, "", "identity"], [281, 1, 1, "", "inverse"], [281, 1, 1, "", "invert_params"], [281, 1, 1, "", "symmetrize"], [281, 1, 1, "", "transform"]], "deepinv.transform.projective": [[282, 0, 1, "", "Affine"], [283, 0, 1, "", "Euclidean"], [284, 0, 1, "", "PanTiltRotate"], [285, 0, 1, "", "Similarity"]], "deepinv.unfolded": [[286, 0, 1, "", "BaseDEQ"], [287, 0, 1, "", "BaseUnfold"], [288, 3, 1, "", "DEQ_builder"], [289, 3, 1, "", "unfolded_builder"]], "deepinv.unfolded.BaseDEQ": [[286, 1, 1, "", "forward"]], "deepinv.unfolded.BaseUnfold": [[287, 1, 1, "", "forward"]], "deepinv.utils": [[290, 0, 1, "", "TensorList"], [292, 3, 1, "", "get_freer_gpu"], [293, 3, 1, "", "load_image"], [294, 3, 1, "", "load_url_image"], [295, 3, 1, "", "ones_like"], [296, 3, 1, "", "plot"], [297, 3, 1, "", "plot_curves"], [298, 3, 1, "", "plot_inset"], [299, 3, 1, "", "plot_ortho3D"], [300, 3, 1, "", "plot_parameters"], [301, 3, 1, "", "plot_videos"], [302, 3, 1, "", "rand_like"], [303, 3, 1, "", "randn_like"], [304, 3, 1, "", "zeros_like"]], "deepinv.utils.TensorList": [[290, 1, 1, "", "__add__"], [290, 1, 1, "", "__mul__"], [290, 1, 1, "", "__neg__"], [290, 1, 1, "", "__sub__"], [290, 1, 1, "", "__truediv__"], [290, 1, 1, "", "append"], [290, 1, 1, "", "conj"], [290, 1, 1, "", "flatten"], [290, 1, 1, "", "reshape"], [290, 1, 1, "", "sum"]], "deepinv.utils.demo": [[291, 3, 1, "", "demo_mri_model"]]}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "function", "Python function"]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:attribute", "3": "py:function"}, "terms": {"": [0, 2, 4, 5, 6, 7, 10, 11, 13, 16, 17, 19, 20, 21, 24, 25, 27, 28, 29, 30, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 57, 67, 73, 95, 99, 101, 114, 135, 137, 138, 142, 149, 150, 151, 152, 160, 172, 179, 202, 204, 207, 215, 223, 252, 258, 268, 271, 272, 273, 285, 290, 298], "0": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 61, 64, 66, 67, 68, 69, 72, 73, 76, 77, 80, 85, 86, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 131, 136, 137, 142, 143, 144, 148, 149, 150, 152, 156, 157, 159, 160, 162, 163, 164, 169, 172, 173, 174, 175, 176, 183, 184, 185, 186, 187, 188, 189, 190, 191, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 232, 233, 234, 235, 237, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 296, 298, 299, 302], "00": [2, 5, 6, 7, 10, 13, 16, 18, 21, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 53, 54, 55, 72, 81], "000": [5, 13, 48, 52, 76], "0000": [61, 64, 163, 200, 201, 203, 204, 208, 212, 215, 260], "00000": 74, "0000001": 81, "000001": 78, "00001": 74, "0000250": 81, "0001": [13, 75, 80, 105, 106, 131, 137, 159, 162, 266, 286], "0001000": 81, "001": [33, 52, 80, 89, 92, 101, 106, 107, 169, 213, 218, 268, 269, 270], "0014": [4, 11], "00143": 207, "002": [45, 52, 53], "0022": [4, 11], "002592722410522517": 27, "002650": 78, "003": [2, 27, 46, 52], "0037754916896422706": 27, "00378": 27, "004": [2, 27, 46], "00490826": 190, "005": [39, 46, 49, 52], "006": [2, 16, 46, 53], "0064": [4, 11], "007": [2, 44, 46], "008": [16, 40], "0084001": 81, "0084991": 81, "0085000": 81, "0087": 222, "0089": [4, 11], "0096": [4, 11], "00e": [5, 22, 33, 34], "00m": [2, 37, 39, 54], "00mib": [39, 53], "01": [1, 2, 3, 10, 13, 14, 18, 21, 24, 25, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 46, 47, 50, 53, 54, 59, 61, 72, 105, 106, 107, 113, 118, 131, 136, 152, 263], "0100": 10, "0109": [4, 11], "0144": 10, "0145": [4, 11], "0146": [10, 207], "015": [16, 46], "0157": 10, "016": 27, "0164958180264647": 27, "017": 39, "01740006355477841": 39, "01831": 141, "01985": [46, 105, 106], "01m": 54, "01mib": [39, 54], "02": [2, 13, 18, 23, 25, 26, 30, 31, 32, 33, 34, 35, 36, 38, 39, 41, 42, 47, 53, 54, 55, 72, 137, 186, 214, 266], "020": 45, "020025727886898": 45, "0202": 92, "0204": [4, 11], "022": 40, "0225": 222, "0241": 207, "0247": [4, 11], "0271": 10, "029": 46, "02it": [2, 5, 33], "02m": 39, "02mb": 2, "02mib": [39, 54], "03": [2, 5, 13, 14, 25, 27, 28, 30, 31, 33, 34, 35, 36, 39, 40, 41, 47, 49, 53, 54, 72, 298], "0306": 10, "0318": [4, 11], "032": 44, "0322": [4, 11], "0335": [4, 11], "0349": [4, 11], "03521": 202, "03679": 128, "0398": 207, "03981": 138, "03m": 54, "03mb": [2, 37], "03mib": [39, 54], "04": [2, 13, 18, 25, 30, 33, 35, 36, 38, 39, 41, 47, 53, 54, 72, 254, 255, 262], "0431": [4, 11], "04715": 270, "04it": 25, "04mb": [2, 41], "04mib": [39, 54], "05": [2, 5, 13, 15, 16, 18, 21, 22, 25, 29, 30, 35, 36, 39, 41, 46, 47, 52, 53, 54, 55, 57, 66, 72, 131, 151, 152, 159, 183, 184, 188, 197, 198, 199, 266, 269, 270], "050": 46, "0501": [4, 11], "0515": [4, 11], "0519": [4, 11], "052": 44, "0523070216572739": 44, "055": 46, "0559": [4, 11], "055923461914062": 44, "056": 44, "0568": [4, 11], "057": [13, 18, 72], "0588": 10, "05m": 53, "05mb": [2, 41], "05mib": [39, 54], "06": [2, 5, 22, 23, 25, 30, 35, 36, 38, 39, 41, 50, 54, 55, 72], "0603": 215, "062": 50, "0623": [4, 11], "0642": [4, 11], "06474": [145, 146], "066": 46, "0667": 10, "0671": 10, "069": 39, "0694199089554509": 39, "06m": 54, "06mib": 39, "07": [2, 18, 25, 26, 30, 32, 36, 38, 39, 41, 43, 54, 72], "070": 32, "0707": [4, 11], "0712": [206, 212], "0732": [4, 11], "077": [228, 237], "077b83af57538aa183971a2fe0971ec1": 101, "07886": 235, "07it": 25, "07mb": 2, "07mib": [39, 54], "08": [0, 2, 25, 32, 36, 39, 41, 54, 55, 66, 72, 173, 198], "0800": 75, "0801": 75, "081950378417968": 42, "082": [42, 46], "0845": 222, "0872": 10, "08845": 269, "08995": 266, "08mb": 2, "08mib": [39, 54], "09": [2, 36, 39, 41, 47, 54, 72], "090": [30, 32, 72], "0900": 75, "09327": [275, 284], "094": 54, "094568888346355": 53, "095": 53, "09500349114552311": 11, "097": 46, "09it": 25, "09mb": 2, "09mib": 39, "0m": [2, 13, 30, 36, 39, 40, 41, 42, 54], "0mb": [10, 13, 36, 44, 46], "0mib": [16, 41], "0x7fd74e3ddc50": [7, 15, 37], "1": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 20, 21, 22, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 57, 58, 59, 60, 61, 64, 66, 67, 68, 69, 73, 76, 77, 80, 82, 86, 88, 92, 93, 95, 96, 98, 99, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 131, 132, 135, 137, 139, 141, 142, 148, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 172, 173, 174, 175, 176, 177, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 273, 275, 276, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 296, 298, 299, 301, 302], "10": [2, 4, 9, 11, 13, 14, 17, 20, 24, 25, 30, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 66, 76, 89, 92, 103, 125, 131, 138, 143, 157, 196, 200, 201, 202, 207, 222, 228, 237, 244, 245, 261, 264, 268, 269], "100": [2, 5, 6, 7, 8, 9, 10, 13, 16, 21, 24, 25, 27, 28, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 50, 52, 53, 54, 73, 75, 78, 84, 131, 134, 159, 183, 184, 188, 197, 198, 199, 202, 213, 264, 266, 267, 272, 273], "1000": [13, 16, 35, 36, 44, 49, 50, 51, 54, 101, 129, 137, 151, 152, 173, 258, 265, 266, 268, 269, 270], "10000": 25, "1006": [212, 260], "100m": 39, "101": [2, 25, 36, 40], "1010": 80, "1018": 80, "101m": [13, 36, 39, 41], "102": [7, 25, 36], "1024": [25, 186, 214], "102m": [36, 39, 41], "103": [7, 25, 36], "1036": 9, "103m": [36, 39, 41], "104": [25, 36], "104m": [36, 39, 41], "105": [7, 25, 36], "105m": [36, 39, 41], "106": [7, 25, 36], "1068": 228, "106m": [13, 36, 39, 41], "107": [7, 25, 36, 45, 47, 72], "107m": [36, 39, 41], "108": [20, 25, 36, 46], "1080": 11, "10847507169258835": 46, "108m": [2, 36, 39, 41], "109": [25, 36], "109m": [36, 39], "10mb": 2, "10mib": 39, "10x": [50, 51], "11": [2, 6, 7, 11, 12, 16, 25, 27, 28, 30, 31, 35, 36, 37, 39, 40, 41, 42, 46, 50, 51, 53, 54, 76, 103, 131, 152, 235], "110": [25, 36, 39], "1102": 235, "110m": [13, 36, 39, 41], "111": [25, 36], "111m": [36, 39, 41], "112": [25, 36, 46], "11232": 88, "112m": [36, 39, 41], "113": [25, 36], "1135": 208, "1137": 138, "113m": [36, 39, 41], "114": [25, 36], "1140": 14, "1145": 21, "114m": [13, 36, 39, 41], "115": [25, 36], "115m": [36, 39, 40, 41], "116": [25, 36], "116m": [36, 39, 41], "117": [25, 36], "11793": 264, "117m": [36, 39, 41], "118": [25, 36], "11888": 34, "118m": [13, 36, 39, 41], "119": [22, 23, 25, 36, 72], "119510806875491": 53, "119m": [36, 39, 41], "119mb": 2, "11it": [25, 37], "11m": 53, "11mb": 37, "11mib": 39, "12": [2, 20, 24, 25, 30, 35, 36, 39, 41, 42, 47, 50, 51, 53, 54, 72, 76, 103, 131], "120": [25, 36, 53], "1200": [296, 298], "120m": [36, 39, 41], "121": [25, 35, 36], "12151": 96, "121m": [39, 41], "122": [25, 35, 36], "1227": 212, "122m": [36, 39, 41], "123": [25, 36], "123m": [2, 13, 36, 39, 41], "124": [25, 36], "124m": [36, 39, 41], "125": [4, 25, 35, 36], "125m": [13, 36, 39, 41], "126": [25, 36], "126m": [36, 39], "127": [25, 36], "127m": [36, 39, 41], "128": [2, 14, 16, 17, 25, 27, 36, 39, 41, 52, 53, 58, 118, 123, 131, 134, 135, 137, 142, 150], "128802490234374": 2, "128m": [36, 39, 41], "128mb": 2, "128x128": [2, 16, 39, 41, 53], "129": [2, 25, 36], "129m": [2, 36, 39, 40, 41], "12m": [2, 24, 28, 30, 36, 37, 39, 40, 42, 43, 45], "12mb": 2, "12mib": [39, 53], "13": [2, 5, 11, 13, 16, 25, 27, 30, 35, 36, 39, 40, 41, 42, 44, 47, 53, 54, 72, 76, 131], "130": [25, 36], "130m": [36, 39, 41], "131": [25, 36], "131m": [36, 39, 41], "132": [25, 36], "1322": 52, "13247v2": [89, 92], "132m": [36, 39, 41], "133": [25, 36], "1332": 52, "1336401602927466": 27, "133m": [39, 41], "133mb": 2, "134": [25, 27, 36], "134m": [36, 39, 41], "135": [25, 36], "135388067": [2, 40], "135m": [36, 39, 41], "136": [25, 36], "136m": [36, 39, 41], "137": [25, 36], "137m": [36, 39, 41], "137mb": 50, "138": [25, 36], "138m": [36, 39, 41], "139": [14, 18, 25, 36, 72], "139m": [36, 39, 41], "139mb": 2, "13it": 40, "13m": 44, "13mb": 2, "13mib": 39, "14": [2, 13, 16, 18, 22, 25, 27, 30, 35, 36, 39, 40, 41, 42, 44, 46, 53, 54, 76, 83, 235], "140": [25, 36, 54], "1406": 258, "140e": 11, "140m": [36, 39, 41], "140mb": 2, "141": [25, 36], "141m": [36, 39, 41], "141mb": 2, "142": [25, 36], "142m": [36, 39], "142mb": 2, "143": [2, 25, 36, 51], "143m": [36, 39, 41], "144": [25, 36, 51], "144m": [36, 39, 41], "145": [25, 36, 51], "145m": [36, 39, 41], "146": [25, 36, 51, 54], "14687": 265, "146m": [36, 39, 41], "147": [25, 36, 51], "14756": 88, "147m": [36, 39, 41], "148": [2, 25, 36, 51], "148m": [36, 39, 41], "148mb": 2, "149": [25, 36, 40], "149m": [36, 39, 41], "14m": [43, 45, 54], "14mb": 2, "14mib": [39, 54], "15": [2, 5, 21, 25, 26, 30, 33, 35, 36, 39, 41, 42, 51, 53, 54, 58, 72, 76, 150, 252, 253], "150": [25, 36, 39, 41], "1506": 202, "150m": [36, 39, 41], "151": [25, 36], "1510": 207, "151m": [36, 39, 41], "152": [25, 36, 51], "152m": [36, 39, 41], "153": [25, 36], "153m": [36, 39, 41], "154": [25, 36, 38], "154m": [36, 39, 41], "155": [25, 36, 51], "155m": [39, 41], "156": [25, 36], "1561": 222, "156m": [36, 39, 41], "157": [2, 7, 18, 25, 36, 72], "157m": [36, 39, 41], "158": [25, 36, 151, 152], "158m": [36, 39, 41], "159": [2, 25, 36, 40], "159m": [36, 39, 41], "15mib": [39, 54], "16": [2, 4, 12, 16, 24, 25, 30, 31, 35, 36, 39, 40, 41, 42, 49, 53, 54, 60, 61, 66, 69, 76, 81, 139, 161, 200, 201, 207, 213, 225, 226, 275, 282, 283, 284, 285, 289, 299, 301], "160": [24, 25, 36, 40], "1608": 138, "160m": [36, 39, 41], "161": [2, 25, 36], "1611": 128, "161m": [36, 39, 41], "162": [25, 36, 40], "162m": [36, 39, 41], "163": [2, 25, 36], "163m": [36, 39], "164": [25, 36], "16461435953776": 27, "164m": [36, 39, 41], "164mb": 40, "165": [25, 27, 36], "1650": 228, "1655": 163, "165m": [39, 41], "165mb": 40, "166": [25, 36, 42], "1666": 228, "1668": 202, "166m": [36, 39, 41], "166mb": 40, "167": [25, 36], "167m": [36, 39, 41], "167mb": 40, "168": [25, 36], "168m": [36, 39, 41], "169": [25, 36], "169m": [36, 39, 41], "16it": 25, "16m": [39, 54], "16mib": 39, "16x16": [66, 200, 201, 213, 275, 282, 283, 284, 285], "17": [0, 1, 2, 5, 13, 16, 18, 25, 30, 35, 36, 39, 41, 42, 44, 46, 50, 53, 54, 72, 76, 296, 299], "170": [25, 36], "1707": [145, 146], "170m": [36, 39, 41], "170mb": 40, "171": [25, 36], "171m": [36, 39, 41], "172": [25, 36], "172m": [36, 39, 41], "173": [2, 4, 25, 36], "173828125": 0, "173m": [36, 39], "174": [25, 36, 40, 46], "174m": [36, 39, 41], "174mb": 40, "175": [25, 36], "175m": [36, 39, 41], "176": [25, 36], "176m": [36, 39, 41], "177": [25, 36], "177m": [36, 39, 41], "178": [25, 36, 53], "1788": [204, 212], "178m": [36, 39, 41], "179": [13, 25, 36], "179m": [39, 41], "17it": 40, "17m": 41, "17mib": 39, "18": [2, 5, 13, 25, 30, 35, 36, 39, 40, 41, 52, 53, 54, 72, 76, 152], "180": [25, 36, 150, 228, 236, 237, 275, 277, 282, 283, 284, 285], "180m": [36, 39, 41], "181": [25, 36], "1814": 215, "181m": [36, 39, 41], "182": [25, 36], "1820": 212, "182m": [36, 39, 41], "183": [25, 36], "1830": 22, "183m": [36, 39, 41], "184": [25, 36], "184m": [36, 39, 41], "185": [25, 36], "185m": [39, 41], "186": [25, 36], "186646143595378": 27, "186m": [36, 39, 41], "187": [25, 27, 36, 51], "187019": [39, 41], "187m": [36, 39, 41], "188": [25, 36, 54], "188174": 54, "188m": [36, 39, 41], "189": [25, 36], "189m": [36, 39, 41], "18it": 25, "18mb": 2, "18mib": 39, "19": [2, 7, 16, 25, 27, 30, 34, 35, 36, 39, 41, 42, 43, 45, 46, 52, 53, 54, 76], "190": [25, 36], "1908": 269, "190m": [36, 39, 41], "191": [25, 36], "191m": [36, 39, 41], "192": [25, 36], "192m": [36, 39], "193": [25, 36], "193m": [36, 39, 41], "194": [25, 36], "194m": [36, 39, 41], "195": [10, 18, 25, 36, 72], "195m": [36, 39, 41], "196": [25, 36], "196m": [36, 39, 41], "197": [25, 36], "197m": [36, 39, 41], "198": [25, 36], "1985": 206, "198m": [36, 39, 41], "199": [25, 36], "1991": 11, "199m": [36, 39, 41], "19mib": 39, "1_alex": 27, "1conv": 150, "1d": [17, 141, 255, 256, 262], "1e": [0, 2, 5, 7, 12, 14, 16, 20, 21, 25, 30, 39, 40, 41, 42, 43, 44, 45, 46, 49, 52, 53, 54, 64, 92, 131, 151, 152, 159, 162, 173, 183, 184, 197, 198, 199, 201, 286], "1e2": 33, "1e3": [33, 268], "1e4": 52, "1f": 194, "1j": [0, 13], "1m": [2, 13, 24, 30, 36, 39, 40, 41, 42, 53, 54], "1mb": [2, 13, 24, 25, 30, 36, 42, 43, 46], "1mib": 41, "1z2us9zhjdgolu6r1jee0s2bbej2xv5": 25, "2": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 58, 59, 61, 64, 66, 67, 68, 76, 77, 80, 86, 88, 94, 95, 96, 97, 98, 99, 101, 102, 104, 105, 106, 107, 108, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 131, 135, 136, 137, 139, 141, 142, 144, 148, 150, 151, 152, 153, 154, 155, 156, 157, 159, 161, 162, 163, 165, 169, 172, 173, 174, 175, 177, 181, 183, 184, 185, 190, 191, 195, 196, 200, 201, 202, 204, 207, 208, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 238, 240, 249, 251, 252, 253, 254, 255, 256, 258, 262, 265, 266, 267, 268, 269, 270, 273, 276, 281, 283, 285, 296, 298, 299, 301], "20": [0, 2, 10, 13, 15, 16, 17, 21, 24, 25, 29, 30, 34, 35, 36, 39, 41, 42, 44, 46, 49, 51, 53, 54, 58, 64, 76, 125, 138, 273], "200": [25, 28, 29, 36, 50, 51, 53, 139, 161], "2000": 21, "2007": 130, "2009": [5, 20, 21, 27, 30, 152], "200m": [36, 39, 41], "2010": 151, "2011": 161, "2012": [89, 92], "2013": [151, 152], "2017": [5, 27, 160, 248], "2018": [7, 52, 136], "20185546875": 44, "201m": [39, 41], "202": [22, 44], "2020": 52, "2021": 101, "2022": [7, 33, 34, 37], "2024": [0, 27], "202m": [36, 39, 41], "2031": 222, "203m": [36, 39, 41], "2040": 75, "204661061157774": [16, 53], "2048": 15, "204m": [36, 39, 41], "205": [16, 53], "205m": [36, 39, 41], "2064": 206, "2067779": 16, "2069441": 42, "206m": [36, 39, 41], "207m": [36, 39, 41], "208m": [36, 39], "209": [11, 18, 72], "209m": [36, 39, 41], "20it": 36, "20m": 53, "20m1387961": 138, "20mb": 2, "20mib": 39, "21": [2, 8, 13, 18, 21, 24, 25, 28, 30, 35, 36, 38, 39, 41, 42, 46, 49, 53, 54, 55, 72, 235, 253], "2103": [88, 270], "210m": [36, 39, 41], "211m": [39, 41], "212m": [36, 39, 41], "213": 49, "2139": 206, "213m": [36, 39, 41], "214m": [36, 39, 41], "215": [5, 18, 72], "215m": [36, 39, 41], "216m": [36, 39, 41], "217m": [36, 39, 41], "218m": [36, 39, 41], "219": 50, "2197": 202, "219m": [36, 39, 41], "21it": [7, 36], "21mb": 2, "21mib": 39, "22": [2, 7, 12, 16, 25, 26, 27, 30, 32, 35, 36, 39, 41, 42, 43, 45, 46, 50, 54, 72], "2201": [96, 264], "2209": [34, 265], "220m": [36, 39, 41], "221": [9, 18, 72], "221m": [36, 39, 41], "222": 13, "222m": [36, 39, 41], "223m": [36, 39, 41], "224": 8, "224m": [36, 39, 41], "224x224": 8, "225": 25, "225m": 39, "226m": [36, 39, 41], "2270": 163, "227m": [36, 39, 41], "228": 46, "228m": [36, 39, 41], "229m": [36, 39, 41], "22it": [25, 36], "22mb": 2, "22mib": [39, 53, 54], "23": [2, 24, 25, 28, 29, 30, 33, 35, 36, 39, 41, 42, 44, 45, 46, 52, 53, 54], "2305": 266, "230m": [36, 39, 41], "2312": [88, 141], "231m": [36, 39, 41], "232m": [36, 39, 41], "233m": [36, 39, 41], "2348": 163, "234m": [36, 39, 41], "235": 52, "235m": [36, 39, 41], "236m": [36, 39, 41], "237m": [36, 39, 41], "238": 44, "23841247558594": 44, "238m": [36, 39, 41], "239m": [39, 41], "23it": 36, "23m": 53, "23mb": 2, "23mib": [39, 54], "24": [2, 7, 13, 16, 22, 25, 30, 35, 36, 37, 39, 41, 42, 43, 44, 45, 50, 53, 54], "2403": [275, 284], "2409": [46, 105, 106], "240m": [36, 39, 41], "2419": 152, "241m": [36, 39], "242m": [36, 39, 41], "2434": 152, "243m": [36, 39, 41], "244m": [36, 39, 41], "245": [24, 26, 72], "245m": [39, 41], "246m": [36, 39, 41], "247m": [36, 39, 41], "248m": [36, 39, 41], "249": [46, 47, 72], "249m": [36, 39, 41], "24it": [25, 36], "24m": [39, 41], "24mib": 39, "25": [0, 2, 11, 13, 24, 25, 30, 33, 35, 36, 39, 41, 49, 52, 53, 54, 58, 150, 221, 252, 253, 258, 261, 266], "250": 81, "2500": [66, 131, 136, 200, 201], "250m": [36, 39, 41], "251m": [36, 39, 41], "252m": [36, 39, 41], "2532": [260, 263], "253m": [36, 39, 41], "254m": [36, 39], "255": [24, 25, 35, 36, 37, 58, 150], "2550": 14, "25592549641927": 30, "255m": [36, 39, 41], "256": [2, 4, 5, 6, 15, 21, 22, 30, 40, 58, 77, 131, 132, 135, 137, 142, 149, 166, 226, 252, 296], "256k": [2, 37], "256m": [36, 39, 41], "256x256": [35, 36], "257m": [36, 39, 41], "258": [228, 237], "25852": [29, 179], "258m": [36, 39, 41], "259": [17, 18, 33, 38, 72], "259m": [39, 41], "25it": [25, 36, 40], "25m": [2, 24, 28, 30, 36, 40, 41, 42, 43, 44, 45], "25mb": 2, "25mib": 39, "26": [2, 25, 27, 30, 34, 35, 36, 39, 40, 41, 49, 54], "260m": [36, 39, 41], "261m": [36, 39, 41], "262m": [36, 39, 41], "263m": [36, 39, 41], "2640": 228, "264m": [36, 39, 41], "265": [41, 51], "2652720747247512": 41, "265m": [36, 39, 41], "266m": [36, 39], "2674": 228, "267m": [36, 39, 41], "268m": [36, 39, 41], "269m": [36, 39, 41], "26it": 36, "26m": [53, 54], "26mib": 39, "27": [2, 13, 25, 30, 35, 36, 39, 41, 44, 52, 53, 54], "270": [30, 277], "27044744932888226": 30, "270m": [36, 39, 41], "271m": [36, 39, 41], "272m": [36, 39, 41], "273": 39, "273216157077679": 39, "273m": [36, 39, 41], "274": [6, 18, 72], "2744": 163, "274m": [36, 39, 41], "275m": [36, 39, 41], "276": [54, 83], "276m": [36, 39, 41], "277m": [36, 39, 41], "278m": [36, 39, 41], "279m": [39, 41], "27it": 36, "27mb": [2, 41], "27mib": [39, 54], "28": [2, 24, 25, 30, 33, 35, 36, 39, 40, 41, 42, 44, 46, 50, 51, 52, 54, 57, 66], "280m": [36, 39, 41], "281m": [36, 39], "282m": [36, 39, 41], "283m": [36, 39, 41], "284m": [36, 39, 41], "285": 235, "285m": [36, 39, 41], "28690": 0, "286m": [36, 39, 41], "28786186322774": 41, "287m": [36, 39, 41], "288": [41, 50, 51], "288m": [36, 39, 41], "289": 55, "289m": [36, 39, 41], "28crop": [7, 33, 34, 37], "28mb": 2, "28mib": [39, 53, 54], "29": [2, 7, 13, 15, 24, 25, 30, 33, 34, 35, 36, 37, 39, 41, 44, 52, 53, 54, 72], "2908": 215, "290m": [36, 39, 41], "291m": [36, 39, 41], "292m": [36, 39, 41], "293": 16, "293m": [36, 39, 41], "294m": [36, 39, 41], "295m": [36, 39, 41], "296": 50, "296m": [36, 39, 41], "297m": [36, 39, 41], "2989": 14, "298m": [36, 39], "299m": [36, 39, 41], "29it": 25, "29m": [41, 53, 54], "29mb": 2, "29mib": 39, "2_2": [2, 114, 125], "2a": 106, "2artifact": 86, "2ax_": 28, "2cm": 162, "2d": [0, 4, 15, 17, 39, 40, 66, 77, 80, 156, 200, 208, 215, 221, 223, 225, 238, 239, 241, 242, 248, 252, 256, 258, 275, 277, 278, 279, 282, 283, 284, 285], "2e": [0, 2, 14], "2f": [0, 7, 12, 13, 14, 20, 21, 22, 24, 25, 28, 29, 31, 33, 34, 37, 89], "2m": [2, 13, 16, 24, 30, 36, 39, 41, 53, 54, 202, 222], "2mb": [13, 24, 28, 30, 36, 40, 42, 43, 44, 45], "2mib": 41, "2nd": 151, "2x": 39, "2x2": [66, 200, 201, 215], "2x_": [28, 53], "3": [0, 2, 4, 5, 6, 9, 10, 11, 12, 13, 14, 16, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 58, 60, 61, 66, 68, 69, 73, 76, 77, 80, 92, 101, 117, 119, 120, 121, 122, 124, 125, 126, 127, 131, 133, 134, 135, 137, 138, 139, 142, 143, 145, 146, 147, 148, 149, 150, 151, 155, 156, 157, 161, 163, 175, 185, 192, 202, 203, 204, 205, 206, 212, 213, 216, 222, 223, 224, 225, 228, 231, 232, 235, 251, 252, 253, 256, 257, 258, 260, 264, 266, 273, 274, 275, 281, 282, 283, 284, 285, 296, 299, 301], "30": [2, 13, 25, 27, 30, 31, 34, 35, 36, 39, 41, 50, 52, 53, 54, 281], "300": [13, 21, 22, 57, 66], "300m": [36, 39, 41], "301": 2, "301279076545696": 2, "301m": [39, 41], "302m": [36, 39, 41], "303m": [36, 39, 41], "304": 27, "3043": 222, "304m": [36, 39, 41], "305": 27, "305m": [36, 39, 41], "306m": [36, 39, 41], "307": 16, "307m": [36, 39, 41], "308m": [36, 39, 41], "309": 54, "309m": [36, 39, 41], "30e": 5, "30it": [2, 7, 25], "30m": 39, "30mib": 39, "31": [2, 4, 21, 25, 30, 36, 39, 41, 44, 54], "310m": [36, 39, 41], "311m": [36, 39, 41], "312m": [36, 39, 41], "3132": 14, "313m": [36, 39], "314m": [36, 39, 41], "315": 53, "315m": [39, 41], "316": [25, 26, 72], "31698811848958": 39, "316m": [36, 39, 41], "317": 39, "317m": [36, 39, 41], "318m": [36, 39, 41], "319": 52, "319m": [36, 39, 41], "31it": 25, "31mb": 2, "31mib": 39, "32": [2, 4, 6, 7, 10, 13, 14, 16, 24, 25, 27, 30, 31, 33, 34, 36, 37, 39, 41, 42, 43, 45, 46, 49, 52, 53, 54, 58, 66, 86, 98, 127, 129, 139, 145, 146, 161, 202, 207, 213, 216, 225, 226, 264, 266], "320": [24, 208, 215, 223], "320m": [36, 39, 41], "320x320": 41, "321m": [36, 39, 41], "322": 49, "3223": 206, "322m": [36, 39, 41], "323m": [36, 39, 41], "324m": [36, 39, 41], "325m": [36, 39, 41], "326": 51, "326m": [36, 39, 41], "327k": 54, "327m": [39, 41], "328m": [36, 39, 41], "329m": [36, 39], "32m": 39, "32mb": 2, "32mib": [39, 54], "32x32": [16, 53, 207, 213, 216, 225, 264, 266], "33": [2, 5, 7, 13, 24, 25, 30, 34, 35, 36, 39, 40, 41, 54], "330m": [36, 39, 41], "331m": [36, 39, 41], "332m": [36, 39, 41], "333": 248, "333m": [36, 39, 41], "334": 5, "334139506022137": 5, "334m": [36, 39, 41], "335m": [36, 39, 41], "336m": [36, 39, 41], "337m": [36, 39, 41], "338m": [36, 39, 41], "339": 2, "33935546875": 2, "339m": [36, 39, 41], "33it": 25, "33mb": 2, "33mib": [39, 54], "34": [2, 11, 13, 18, 25, 30, 36, 39, 40, 41, 54, 72], "340m": [36, 39, 41], "341m": [36, 39, 41], "342m": [36, 39, 41], "343m": [36, 39, 41], "344m": [36, 39, 41], "345m": [39, 41], "346": [43, 45], "346023559570312": [43, 45], "346m": [36, 39], "3479": 13, "347m": [36, 39, 41], "348": 248, "348m": [36, 39, 41], "349": 53, "349m": [36, 39, 41], "34it": 25, "34m": 41, "34mb": [2, 37], "34mib": [39, 54], "35": [2, 11, 13, 24, 25, 30, 36, 39, 41, 53, 54], "350m": [36, 39, 41], "351m": [36, 39, 41], "352m": [36, 39, 41], "353m": [36, 39, 41], "354m": [36, 39, 41], "355": [15, 18, 54, 72], "3553": 222, "355m": [36, 39, 41], "356": 49, "356m": [36, 39, 41], "357": 137, "357m": [36, 39, 41], "358m": [39, 41], "3595": 17, "359m": [39, 41], "35it": 25, "35m": 39, "35mb": 2, "35mib": [39, 54], "36": [2, 13, 25, 30, 36, 39, 41, 42, 53, 54, 55, 72], "360": [228, 277], "3608000": 2, "360m": [39, 41], "3617": 39, "361m": [39, 41], "362": 25, "3624": 206, "362m": [39, 41], "3636": 163, "363m": 39, "364m": [39, 41], "365m": [39, 41], "366m": [39, 41], "367m": [39, 41], "368": [12, 18, 72], "368m": [39, 41], "3695": 163, "369m": [39, 41], "36it": [25, 37], "36m": [44, 54], "36mb": 2, "36mib": [39, 54], "37": [2, 13, 25, 30, 35, 36, 39, 41, 52, 53, 54], "370m": [39, 41], "371": [50, 51], "371m": [39, 41], "372m": [39, 41], "3731": 212, "373m": 39, "374": 46, "3744": 215, "374m": [39, 41], "375": 42, "3750308335884607": 42, "375m": [39, 41], "376m": [39, 41], "377m": [39, 41], "378m": [39, 41], "379m": [39, 41], "37it": [2, 25], "37m": 54, "37mb": 2, "37mib": 39, "38": [2, 25, 30, 36, 39, 41, 54], "380": 23, "380m": [39, 41], "381m": [39, 41], "382": [4, 18, 72], "382m": [39, 41], "383m": [39, 41], "384": [28, 32, 72], "384m": [39, 41], "3856": 228, "385k": [6, 21, 27, 53, 54], "385m": [39, 41], "386m": 39, "387": 42, "387406780888059": 42, "387m": [39, 41], "388": 2, "388037109375": 2, "3881": 163, "38880230629281": 41, "388m": [39, 41], "389": 41, "389m": [39, 41], "38e": 5, "38it": 25, "38m": [2, 13, 30, 36, 37, 40, 42, 43, 44, 45, 53], "38mb": [2, 41], "38mib": [39, 54], "39": [2, 13, 25, 30, 36, 37, 39, 40, 41, 53, 54], "390m": [39, 41], "391m": [39, 41], "392": 0, "3929": [27, 160], "392m": [39, 41], "3938": [27, 160], "393m": [39, 41], "394m": [39, 41], "395e": 11, "395m": [39, 41], "396m": [39, 41], "397m": [39, 41], "3986": [204, 212], "398m": [39, 41], "399m": [39, 41], "39m": 41, "39mb": 2, "39mib": [39, 53, 54], "3c353_gdth": 0, "3conv": 150, "3d": [18, 19, 23, 39, 40, 72, 77, 130, 156, 157, 175, 200, 210, 213, 218, 240, 243, 253, 260, 284, 292, 296, 299], "3f": [13, 46], "3k": 10, "3m": [2, 39, 40, 41, 54], "3mb": [2, 13, 25, 28, 30, 36, 40, 42, 43, 45], "3mib": [16, 41], "3x3": [163, 202, 203, 206, 212, 213, 222, 228], "4": [0, 2, 4, 5, 6, 9, 13, 15, 16, 17, 20, 22, 24, 25, 27, 28, 30, 31, 34, 35, 36, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 57, 64, 66, 76, 77, 80, 85, 86, 98, 131, 132, 135, 139, 141, 144, 148, 149, 150, 153, 154, 155, 159, 161, 162, 163, 200, 201, 205, 213, 216, 228, 231, 232, 235, 250, 253, 254, 255, 256, 262, 276, 281, 286, 296, 298, 299], "40": [2, 13, 24, 25, 29, 30, 34, 35, 36, 39, 40, 41, 54], "400": 13, "402": 27, "4024091561635335": 27, "403": [44, 46, 50], "4033": [204, 212], "4081": 163, "4099398": 105, "40it": [7, 25], "40m": 16, "40mib": [53, 54], "41": [2, 3, 13, 24, 25, 30, 36, 39, 41, 42, 45, 52, 54, 72], "410": [39, 47, 72], "411": 41, "411393798566601": 41, "416": [33, 52], "41it": 25, "41mib": [39, 53, 54], "42": [2, 8, 13, 16, 24, 25, 30, 36, 39, 41, 53, 54], "421": 16, "4268960671244293": 2, "427": 2, "4290": 215, "42it": [5, 25], "42m": 53, "42mb": 2, "42mib": [39, 54], "43": [2, 13, 16, 21, 25, 30, 32, 35, 36, 39, 40, 41, 44, 46, 54], "430": [8, 18, 72], "4322": 206, "4375": 0, "4385367335731565": 44, "439": 44, "43m": [41, 54], "43mib": [39, 53, 54], "44": [2, 7, 13, 16, 20, 23, 25, 28, 30, 36, 39, 41, 43, 44, 46, 50, 53, 54, 55, 72], "442": [50, 55, 72], "444737": [43, 44, 45, 46], "444867": [2, 40], "4453": 208, "4468237274226996": 27, "447": [14, 27], "449": 52, "44it": 25, "44m": 54, "44mb": 2, "44mib": [39, 53, 54], "45": [2, 10, 13, 14, 15, 16, 25, 30, 36, 39, 41, 42, 47, 54, 72, 228], "4542": 222, "4564": 215, "458": 51, "45it": 25, "45mb": 2, "45mib": [39, 53, 54], "46": [0, 2, 13, 25, 30, 36, 39, 41, 51, 54], "460": [151, 152], "465": 46, "4666": 163, "467": 52, "46m": 54, "46mb": [2, 50], "46mib": [39, 54], "47": [2, 13, 24, 25, 30, 35, 36, 39, 41, 53, 54], "4776": 163, "479": [151, 152], "47it": [2, 25], "47mb": 2, "47mib": [39, 54], "48": [2, 12, 25, 30, 36, 39, 41, 54, 148, 225], "482": 53, "486": 52, "4860": 228, "488": [41, 47, 72], "4882": 228, "489e": 11, "48it": [7, 25], "48m": 41, "48mb": 2, "48mib": [39, 53, 54], "49": [2, 25, 30, 36, 39, 41, 42, 46, 53, 54, 92], "492": [33, 151], "4949": 163, "49m": 54, "49mb": 2, "49mib": [39, 53], "4a": 232, "4e": 2, "4m": [2, 24, 30, 36, 39, 40, 41, 54], "4mb": [2, 13, 24, 28, 30, 36, 39, 42, 45, 46, 50], "4mib": 41, "4x": 208, "4x4": [205, 228], "5": [0, 2, 4, 5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 20, 24, 25, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 58, 59, 64, 66, 69, 76, 77, 99, 101, 102, 106, 107, 114, 117, 131, 137, 143, 145, 146, 150, 151, 152, 155, 159, 162, 163, 166, 201, 202, 206, 213, 228, 229, 231, 232, 233, 237, 252, 257, 258, 263, 264, 266, 270, 275, 278, 282, 283, 284, 285, 286, 287, 289, 298, 301], "50": [0, 2, 9, 10, 13, 15, 16, 24, 25, 30, 34, 35, 36, 39, 40, 41, 42, 43, 46, 53, 54, 58, 66, 76, 92, 150, 162, 169, 196, 213, 218, 224, 235, 275, 282, 283, 284, 285, 286], "500": 5, "5000": [0, 24, 76], "501": 43, "5012940824804186": 43, "505": 51, "507": 44, "5073385957994816": 44, "50it": [25, 34], "50m": [2, 30, 36, 42, 53], "50mb": 2, "50mib": [39, 53, 54], "50th": 9, "51": [2, 11, 13, 22, 25, 30, 36, 39, 41, 54, 92, 253], "512": [59, 76, 80, 83, 131, 135, 142, 253], "512k": 2, "51it": 25, "51mb": 2, "51mib": [39, 53, 54], "52": [2, 25, 30, 36, 39, 40, 41, 53, 54], "526": 151, "527952575683594": 2, "528": 2, "5281": [228, 237], "5282": 202, "529": [51, 52], "52it": [25, 34], "52mib": 39, "53": [2, 23, 25, 30, 35, 36, 39, 40, 41, 42, 54], "530": [21, 23, 72], "534": [17, 51], "5369": 163, "538": [16, 51], "53it": 25, "53m": [39, 41], "53mb": 2, "53mib": [39, 54], "54": [0, 2, 13, 25, 30, 36, 37, 39, 41, 53, 54], "5410": [204, 212], "543": 51, "546": 52, "548789978027344": 44, "549": [44, 49], "54it": [25, 34], "54k": [44, 46, 50], "54mb": 2, "54mib": [39, 53, 54], "55": [2, 5, 7, 11, 25, 30, 36, 39, 40, 41, 54], "5513": 163, "553": 51, "5567108": 211, "558": [43, 45, 46], "55it": 25, "55m": 28, "55mb": 2, "55mib": [39, 54], "56": [2, 25, 30, 36, 39, 41, 53, 54], "560": [53, 55, 72], "561": 26, "566": 52, "5684": [202, 204, 212], "569": 39, "56it": 25, "56m": 37, "56mb": 2, "56mib": [39, 54], "57": [0, 2, 25, 30, 35, 36, 39, 41, 54, 228, 237], "5720": 228, "5748996872970398": 30, "575": [30, 72], "576": 53, "5779": 202, "579": 51, "57it": 25, "57m": 54, "57mb": 2, "57mib": [39, 53, 54], "58": [2, 13, 25, 30, 36, 39, 41, 42, 47, 54, 72, 248], "580": [37, 38, 72], "5842": 235, "586": 16, "587": 52, "5870": 14, "58m": 53, "58mb": 2, "58mib": [39, 53, 54], "59": [2, 13, 24, 25, 30, 36, 39, 41, 53, 54], "5976": 0, "59it": [25, 34], "59mb": [2, 37], "59mib": [39, 53, 54], "5a": 232, "5d": [11, 65, 68, 86, 98, 281], "5e": [16, 41, 42, 43, 45, 46, 51, 54], "5e3": 37, "5j": 13, "5m": [2, 13, 16, 24, 30, 36, 39, 41, 54], "5mb": [2, 13, 24, 30, 36, 40, 42, 43, 44], "5mib": [16, 41, 54], "5x5": [33, 35], "6": [0, 2, 4, 11, 16, 20, 21, 24, 25, 30, 34, 35, 36, 39, 40, 41, 42, 44, 46, 51, 52, 53, 54, 55, 76, 82, 131, 139, 146, 148, 150, 161, 166, 167, 251, 256], "60": [2, 22, 25, 30, 34, 35, 36, 39, 41, 54, 76], "60it": 25, "60m": 41, "60mb": 2, "60mib": [39, 54], "61": [2, 13, 25, 30, 36, 39, 41, 54], "611": 52, "61101531982422": 52, "6160": 202, "618": 52, "61e": 34, "61it": [7, 25, 33], "61mb": [2, 37], "61mib": [39, 54], "62": [2, 25, 30, 36, 39, 41, 53, 54], "6209": 215, "62it": 25, "62m": [2, 30, 36, 39, 42], "62mb": 2, "62mib": [39, 53, 54], "63": [2, 13, 25, 30, 35, 36, 39, 41, 42, 45, 54], "633": 43, "633206176757813": 43, "639": [34, 38, 53, 72], "63it": [25, 34], "63m": 54, "63mb": [2, 37], "63mib": [39, 54], "64": [2, 4, 7, 12, 13, 14, 15, 21, 22, 25, 28, 29, 30, 35, 36, 39, 41, 42, 50, 51, 53, 54, 122, 126, 131, 133, 134, 135, 138, 142, 143, 147, 149, 254, 255, 261, 262], "640k": [2, 37, 41], "6418031": 119, "645": 41, "64it": [25, 34], "64mb": 2, "64mib": [39, 54], "64x64": [15, 35, 36], "65": [2, 25, 36, 39, 40, 41, 44, 54], "651": 49, "6536": 228, "65it": [25, 34], "65m": [39, 41, 44, 46, 50], "65mb": 2, "65mib": [39, 53, 54], "66": [2, 7, 25, 30, 33, 36, 39, 41, 43, 44, 54, 148], "660": 47, "668229": 49, "6687": 14, "669": [52, 55, 72], "66it": [2, 25, 34], "66m": 53, "66mib": [39, 53, 54], "67": [2, 5, 13, 16, 25, 30, 34, 35, 36, 39, 40, 41, 42, 53, 54], "671": 51, "6714502": [106, 107], "6752": 202, "677": 51, "678": 50, "679": [16, 18, 50, 52, 72], "67it": [5, 25], "67mb": 2, "67mib": [39, 53, 54], "68": [2, 12, 13, 25, 36, 37, 39, 40, 41, 54, 74], "681k": 39, "682": 52, "687k": 54, "68878173828125": 46, "689": [42, 46], "689459228515625": 42, "68it": 25, "68m": 54, "68mb": 2, "68mib": [39, 54], "69": [2, 25, 30, 36, 39, 41, 53, 54], "695": [0, 1, 72], "6995": 228, "69it": [7, 25], "69m": 54, "69mb": 2, "69mib": [39, 53, 54], "6m": [2, 13, 30, 36, 39, 41, 42, 53, 54], "6mb": [2, 13, 24, 39], "6mib": [6, 41], "7": [0, 2, 5, 12, 13, 16, 24, 25, 29, 30, 34, 35, 36, 39, 40, 41, 42, 46, 51, 52, 53, 54, 66, 76, 131, 132, 145, 200, 201, 207, 212, 221, 235, 261, 266], "70": [2, 25, 30, 34, 35, 36, 39, 40, 41, 54, 212], "703": 2, "703303237720839": 2, "70675455729167": 39, "707": 39, "70e": [5, 11], "70it": [25, 35], "70mb": 2, "70mib": [39, 53, 54], "71": [2, 13, 24, 25, 30, 34, 36, 39, 40, 41, 42, 53, 54], "7125": 163, "7137": 228, "717": 54, "719": [40, 47, 72], "7193": [204, 212], "71it": 25, "71mb": 2, "71mib": [39, 53, 54], "72": [2, 25, 29, 36, 39, 41, 54, 151], "722": 51, "726": 39, "7261516614270602": 39, "72it": 25, "72m": 53, "72mb": 2, "72mib": [39, 54], "73": [2, 25, 30, 35, 36, 39, 41, 54], "7302": 206, "731": [20, 23, 72], "7340": 228, "735636393229164": 5, "736": 5, "738": 44, "73807144244024": 44, "739k": 25, "73m": 53, "73mb": 2, "73mib": [39, 53, 54], "74": [2, 25, 36, 39, 41, 53, 54], "7408121787192714": 2, "741": 2, "7412": 13, "7444": 258, "74m": 53, "74mb": 2, "74mib": [39, 54], "75": [2, 13, 15, 25, 30, 35, 36, 39, 41, 42, 51, 54, 208, 278], "75595": 52, "757126": 0, "75m": [2, 13, 30, 36, 37, 54], "75mb": 2, "75mib": [39, 53, 54], "76": [2, 13, 25, 30, 36, 39, 41, 54], "763": 52, "768": 83, "768k": 2, "769": 51, "76mb": 2, "76mib": [39, 53, 54], "77": [2, 7, 25, 35, 36, 39, 40, 41, 53, 54], "773": [29, 32, 52, 72], "775": 46, "776": 51, "7769": 202, "77it": [25, 35], "77mb": 2, "77mib": [39, 54], "78": [0, 2, 9, 13, 25, 30, 34, 36, 39, 41, 50, 51, 54], "782": 49, "783": 39, "786": [43, 45], "78632784200239": [43, 45], "7883": 163, "78it": [25, 35], "78mib": [39, 54], "79": [2, 25, 34, 36, 37, 39, 41, 53, 54], "791": 40, "7928400039672852": 39, "793": 39, "795": [50, 51], "7969": 208, "797": 51, "79it": [7, 35], "79m": [16, 39, 53, 54], "79mb": 2, "79mib": [39, 54], "7db": 44, "7m": [2, 24, 39, 40, 41, 53, 54], "7mb": [13, 30, 36, 42], "7mib": [16, 41], "8": [0, 2, 4, 5, 7, 11, 13, 15, 16, 17, 21, 22, 24, 25, 27, 28, 30, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 66, 76, 80, 99, 102, 117, 119, 120, 121, 124, 125, 131, 139, 148, 150, 152, 153, 154, 161, 173, 200, 201, 213, 216, 235, 254, 255, 256, 261, 262, 299, 301], "80": [2, 7, 13, 24, 25, 30, 34, 35, 36, 39, 41, 42, 54, 125], "8064": 206, "80e": 14, "80it": 35, "80mb": 2, "80mib": [39, 53], "81": [2, 13, 25, 27, 30, 36, 39, 40, 41, 54], "811": [51, 55, 72], "813": 40, "8137": 208, "8181": 202, "81it": 35, "81m": 54, "81mb": 2, "81mib": [39, 53, 54], "82": [2, 24, 25, 36, 39, 41, 53, 54], "824": 39, "825": [2, 3, 35, 38, 72], "826": [2, 46], "828": 2, "82it": [7, 35], "82mb": [2, 37], "82mib": [39, 53, 54], "83": [2, 25, 30, 35, 36, 37, 39, 40, 41, 44, 54], "8307932": [228, 237], "832": [31, 32, 72], "833": [44, 47, 72], "837k": 53, "8380": 212, "83it": [25, 35], "83m": 46, "83mib": [39, 53, 54], "84": [2, 13, 25, 36, 39, 41, 53, 54], "843": 52, "8457": 228, "848833121419835": 16, "849": 16, "84it": [7, 35], "84m": 53, "84mb": 2, "84mib": 39, "85": [0, 2, 13, 25, 30, 36, 39, 41, 42, 43, 45, 54, 264], "850": [36, 38, 72], "8518": 222, "856": 52, "8567": 212, "859": 16, "85it": 35, "85mb": 2, "85mib": [39, 53], "86": [2, 25, 30, 36, 37, 39, 41, 54], "8607": 13, "8622": 215, "864": 54, "866": [42, 47, 72], "8668": 222, "86it": 35, "86m": 54, "86mb": 2, "86mib": [39, 54], "87": [2, 25, 28, 30, 35, 36, 39, 40, 41, 53, 54], "872": 39, "876": 45, "876023864746095": 45, "87it": [25, 35], "87mib": [39, 53, 54], "88": [2, 7, 13, 25, 28, 30, 36, 39, 40, 41, 54], "881": 46, "8814043693576259": 46, "887": 39, "8872030258178711": 39, "88it": 25, "88m": [2, 36, 41, 54], "88mib": 39, "89": [2, 16, 25, 36, 39, 40, 41, 42, 52, 54], "890": [54, 55, 72], "8986": 163, "8994": 260, "899650573730469": [16, 53], "89it": 7, "89mib": [39, 54], "8a": 232, "8m": [2, 13, 16, 30, 36, 39, 41, 42, 53, 54], "8mb": [13, 24, 30, 36, 42, 44, 46], "8mib": [21, 27, 41], "8x64x64": [254, 255, 262], "9": [2, 4, 5, 11, 12, 16, 17, 22, 25, 30, 33, 34, 35, 36, 37, 39, 41, 42, 44, 46, 50, 51, 52, 53, 54, 76, 102, 105, 106, 131, 144, 159, 213, 251, 256, 273], "90": [2, 4, 17, 20, 25, 30, 34, 35, 36, 39, 41, 53, 54, 141, 277, 281], "900": [16, 41, 53], "9000": 163, "9002": 228, "902": [13, 30], "902324676513672": 30, "9026750869443771": 5, "903": 5, "908": 16, "90it": 25, "90m": 40, "90mb": 2, "90mib": [39, 53, 54], "91": [2, 13, 25, 30, 34, 36, 39, 41, 54], "9127841": 224, "918": [49, 55, 72], "91e": 33, "91m": [44, 46, 50, 53], "91mb": 2, "91mib": [39, 53, 54], "92": [2, 13, 25, 36, 39, 41, 53, 54], "921": 16, "921340942382812": 16, "92m": 46, "92mb": 2, "92mib": [39, 41], "93": [2, 25, 30, 35, 36, 39, 40, 41, 42, 54], "9332": 202, "9360": 228, "93it": 25, "93m": 39, "93mb": [2, 36], "93mib": [39, 41], "94": [2, 24, 25, 36, 39, 41, 54], "941": 18, "9493": 228, "94it": 40, "94mib": [39, 54], "95": [2, 13, 25, 30, 36, 37, 39, 41, 53, 54, 235], "952": 49, "9577798": 99, "95mb": 36, "95mib": [39, 53, 54], "96": [2, 14, 24, 25, 30, 36, 39, 41, 54], "9605e": 66, "963": 52, "96it": 5, "96mb": 2, "96mib": [39, 41, 54], "97": [2, 13, 25, 29, 35, 36, 39, 41, 42, 53, 54], "972": 52, "973": 41, "976": 52, "9793": 228, "97m": [39, 53], "97mb": 37, "97mib": [39, 41], "98": [2, 25, 30, 36, 39, 41, 54], "98084411621094": 46, "981": 46, "982": 52, "982418060302734": 52, "9851": 13, "9860": 208, "987": [43, 47, 72], "9897": 228, "98it": 40, "98mib": 39, "99": [2, 7, 13, 25, 28, 36, 39, 40, 41, 46, 52, 54, 152], "991": [27, 32, 72], "996": 54, "9971": 228, "999": 13, "9999": [61, 103], "99e": 22, "99mb": 2, "99mib": [39, 41, 53], "9k": [25, 44, 46, 50], "9m": [2, 13, 24, 30, 36, 39, 40, 41, 42, 54], "9mb": [13, 24, 36, 43, 44, 45, 46], "9mib": [16, 41], "A": [0, 5, 10, 14, 16, 18, 19, 20, 21, 22, 24, 25, 28, 29, 30, 31, 33, 35, 36, 42, 48, 50, 51, 52, 53, 60, 61, 63, 64, 66, 67, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 92, 94, 99, 102, 105, 106, 107, 128, 135, 137, 151, 152, 156, 159, 162, 165, 182, 183, 184, 190, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 228, 231, 234, 235, 238, 239, 240, 241, 242, 243, 244, 245, 250, 252, 254, 255, 257, 258, 260, 261, 262, 269, 270, 271, 273, 287, 292, 294, 296, 301], "And": [148, 155], "As": [0, 2, 20, 24, 25, 27, 29, 35, 36, 39, 40, 41, 42, 170, 175, 179, 291], "At": [86, 98, 101, 131, 148], "By": [4, 17, 61, 73, 86, 88, 94, 95, 96, 97, 98, 101, 102, 104, 105, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 148, 159, 163, 165, 169, 171, 213, 216, 218, 268, 269, 270, 272, 275, 277, 278], "For": [0, 2, 4, 7, 10, 11, 16, 17, 20, 21, 22, 25, 28, 29, 31, 35, 36, 39, 40, 44, 49, 50, 51, 53, 54, 57, 59, 61, 62, 64, 66, 68, 73, 77, 102, 109, 111, 141, 148, 151, 152, 159, 170, 175, 198, 202, 214, 224, 239, 242, 251, 254, 255, 262, 269, 270, 274, 275, 277, 281, 286, 288], "If": [0, 10, 12, 14, 25, 42, 50, 51, 53, 56, 66, 67, 68, 71, 73, 74, 75, 76, 78, 79, 81, 83, 84, 85, 86, 95, 96, 102, 104, 105, 106, 107, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 135, 136, 137, 138, 141, 142, 149, 150, 156, 159, 161, 165, 166, 169, 172, 175, 188, 189, 190, 191, 200, 201, 202, 204, 207, 208, 209, 210, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 230, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 256, 259, 260, 268, 269, 270, 271, 273, 281, 286, 287, 288, 289, 293, 294, 296, 299, 301], "In": [0, 2, 4, 5, 8, 9, 10, 11, 12, 13, 15, 16, 20, 21, 22, 24, 25, 27, 28, 29, 30, 33, 34, 35, 36, 37, 39, 41, 42, 43, 45, 46, 49, 50, 51, 52, 53, 54, 58, 61, 62, 64, 66, 69, 73, 77, 80, 85, 98, 126, 137, 152, 160, 181, 184, 190, 213, 225, 228], "It": [4, 11, 12, 21, 22, 25, 39, 41, 53, 58, 63, 66, 69, 70, 73, 74, 84, 85, 86, 88, 98, 108, 122, 123, 137, 138, 144, 154, 166, 185, 198, 200, 201, 202, 207, 213, 214, 216, 218, 225, 226, 232, 233, 264, 273, 290], "No": [0, 126, 139, 161, 215, 256, 281], "On": 25, "One": [4, 36, 50], "The": [2, 4, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 20, 21, 22, 25, 27, 28, 29, 30, 31, 33, 34, 37, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 80, 81, 82, 83, 84, 85, 86, 88, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 114, 122, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 165, 166, 170, 177, 179, 180, 182, 187, 192, 193, 194, 195, 196, 200, 202, 203, 204, 205, 206, 208, 211, 212, 213, 214, 215, 216, 217, 218, 221, 223, 224, 225, 227, 228, 231, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 250, 252, 253, 254, 255, 257, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 275, 281, 284, 286, 290, 296, 298, 299, 300], "Their": 52, "Then": [4, 25, 39, 141, 235], "There": [0, 36, 45, 46, 68, 76, 80, 186, 221], "These": [2, 15, 17, 40, 50, 51, 60, 66, 68, 73, 170, 228, 274, 282, 283, 285, 287], "To": [2, 4, 11, 15, 24, 35, 39, 44, 49, 53, 54, 61, 65, 77, 80, 86, 98, 99, 102, 122, 125, 127, 148, 170, 249, 259, 281, 301], "With": [8, 13, 36], "_": [0, 2, 13, 20, 21, 22, 25, 28, 35, 36, 39, 42, 49, 50, 51, 53, 54, 59, 64, 66, 80, 92, 95, 96, 112, 113, 114, 115, 116, 141, 151, 152, 159, 163, 164, 168, 169, 170, 171, 172, 173, 175, 183, 184, 185, 189, 190, 191, 192, 194, 195, 196, 204, 257, 265, 266], "_0": 36, "_1": [20, 50, 159, 162, 164, 184], "_2": [0, 2, 5, 20, 21, 22, 36, 42, 45, 46, 50, 51, 53, 64, 89, 92, 99, 105, 106, 107, 108, 151, 152, 159, 162, 163, 174, 177, 183, 184, 185, 228, 269, 270], "_4": 17, "__add__": [213, 218, 260, 281, 290], "__class__": 40, "__init__": [0, 5, 8, 14, 28, 30, 33, 52, 109, 111, 112, 113, 114, 115, 116, 268], "__iter__": 8, "__mul__": [212, 213, 218, 281, 290], "__name__": 40, "__neg__": 290, "__sub__": 290, "__truediv__": 290, "_c": [7, 15, 37, 105, 260], "_f": [69, 165, 287], "_future_warn": 39, "_g": [64, 69, 165, 287], "_get_param": 281, "_i": 125, "_k": 2, "_m": 102, "_n": [156, 157], "_p": 119, "_t": [35, 36, 265, 266], "_transform": 281, "_vf": 17, "_x": [182, 213, 218], "_z": 2, "a_": [42, 95, 96, 202, 213, 217, 218], "a_1": [12, 43, 44, 95, 97, 102, 212, 213, 218], "a_2": [12, 43, 44, 95, 97, 102, 212, 213, 218], "a_a_adjoint": [204, 213], "a_adjoint": [0, 7, 10, 14, 15, 21, 22, 28, 29, 31, 33, 34, 37, 39, 49, 50, 51, 53, 54, 66, 73, 159, 162, 200, 201, 202, 204, 207, 208, 213, 216, 221, 223, 226, 228, 231, 271, 273], "a_adjoint_a": [204, 213], "a_dagg": [0, 9, 12, 13, 14, 15, 25, 44, 52, 66, 73, 105, 202, 204, 208, 211, 213, 217, 218, 224, 228, 271], "a_forward": [159, 162], "a_g": 96, "a_t": [36, 265], "a_vjp": [182, 213, 217, 218], "aa": [204, 213], "ab": [4, 11, 34, 35, 37, 46, 88, 89, 92, 96, 105, 106, 138, 141, 145, 146, 202, 207, 225, 264, 265, 266, 269, 270, 275, 284], "aberr": [4, 11], "abl": [8, 35, 36, 274], "about": [0, 13, 45, 58, 60], "about_mapstyle_vs_iter": 8, "abov": [0, 2, 40, 64, 66, 103, 141, 159, 190, 208, 215, 223, 301], "abs_angl": [13, 158], "absenc": 187, "absolut": [120, 150, 158, 198, 199, 213, 218], "abstract": [105, 106, 107, 119, 211, 224], "abus": 165, "ac": [39, 78], "acar": [102, 256], "acceler": [15, 33, 39, 41, 66, 132, 159, 162, 208, 215, 223, 240, 243, 250, 254, 255, 262, 269, 274, 286], "accept": [68, 158, 281], "access": [8, 40, 77, 80, 83, 84], "accord": [99, 131, 205, 225, 250, 251, 254, 255, 256, 257, 262], "accordingli": [73, 139, 161], "account": [33, 56, 60, 135], "accur": 4, "achiev": [44, 99, 159, 274], "acknowledg": 56, "acquir": 13, "acquisit": [41, 66, 159, 213, 218, 225, 268, 269, 270, 287], "across": [10, 39, 50, 51, 53, 54, 73, 85, 154, 159, 225, 227, 250, 254, 255, 262, 286, 287, 298], "act": [7, 45, 64, 66, 153, 159, 214, 281], "act_mod": [135, 142], "action": [141, 282, 283, 284, 285], "activ": [4, 11, 103, 135, 138, 142, 147, 252, 253], "actual": [36, 39, 98, 165], "ad": [12, 19, 35, 63, 70, 99, 210, 213, 214, 219, 220, 229, 230, 260], "ad_": 136, "adam": [2, 7, 16, 25, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 136, 273], "adapt": [6, 39, 44, 60, 65, 70, 86, 87, 93, 97, 98, 99, 101, 102, 105, 106, 107, 131, 137, 147, 148, 150, 151, 152, 153, 154, 159, 160, 228, 237, 256], "adapt_model": [39, 44, 86, 87, 93, 98, 99, 101, 102], "add": [0, 5, 6, 20, 21, 27, 30, 49, 66, 73, 99, 148, 150, 209, 210, 213, 214, 218, 219, 220, 227, 229, 230, 255, 290], "add_safe_glob": [25, 39, 41, 53], "addit": [2, 13, 36, 60, 64, 73, 89, 99, 135, 142, 148, 159, 185, 188, 202, 213, 216, 228, 273, 288, 289], "addition": [36, 273, 278], "address": 56, "adj_project": 0, "adjnufftobj": 0, "adjoint": [0, 14, 21, 22, 31, 52, 53, 63, 66, 151, 152, 159, 161, 173, 200, 201, 202, 204, 207, 208, 213, 216, 221, 223, 226, 228, 231, 238, 239, 240, 242, 243, 246, 247], "adjoint_funct": 213, "adjointness_test": [12, 14, 213], "adjust": [5, 204, 255], "adler": 52, "admit": 20, "admm": [5, 64, 71, 162, 188, 189, 287, 288, 289], "adv": [2, 112, 113, 114, 115, 116], "advanc": [1, 4, 11, 60, 72, 73, 131], "advantag": 33, "adversari": [3, 72, 73, 79, 84, 85, 93, 104, 109, 110, 111, 112, 113, 114, 115, 116, 131, 133, 134, 140, 147, 155, 200, 213, 218, 258, 260, 273, 292], "adversarial_loss": [109, 111], "adversarialoptim": [2, 273], "adversarialschedul": 2, "adversarialtrain": [2, 60], "advis": 36, "af_": 7, "aff": [40, 282], "affect": [66, 85, 183, 213, 218], "affin": [17, 40, 131, 274, 275], "after": [0, 2, 10, 20, 25, 33, 44, 56, 103, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 148, 150, 162, 221, 268, 273, 281, 300, 301], "afterward": [52, 129, 132, 134, 143, 144, 145, 146, 149, 154, 236, 237], "again": [74, 75, 76, 78, 79, 81, 83, 84], "aghabigl": 0, "agnost": [65, 153], "ahead": 273, "ai": [0, 73, 127], "aim": [0, 56, 69], "airi": [0, 4, 11], "al": [0, 2, 5, 7, 17, 21, 27, 30, 35, 36, 39, 40, 58, 65, 102, 112, 113, 114, 115, 116, 126, 130, 131, 133, 134, 136, 137, 140, 147, 151, 155, 255, 256, 274, 275, 284], "algebra": 33, "algorithm": [0, 10, 13, 14, 19, 32, 38, 53, 55, 64, 71, 72, 73, 74, 79, 83, 85, 93, 104, 131, 138, 144, 145, 146, 151, 152, 157, 159, 160, 162, 165, 168, 169, 170, 171, 172, 175, 183, 184, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 204, 207, 210, 213, 218, 220, 225, 227, 228, 234, 255, 265, 266, 267, 268, 269, 270, 271, 286, 287, 288, 289, 292, 294, 296, 297, 300], "alia": [76, 77, 80, 272], "alias": 235, "align": [20, 28, 35, 36, 53, 59, 69, 189, 190, 191, 192, 193, 194, 195, 196, 234, 265, 266, 287], "all": [0, 4, 5, 6, 7, 8, 13, 16, 17, 19, 20, 27, 28, 29, 30, 31, 36, 39, 40, 41, 42, 43, 45, 46, 49, 50, 51, 53, 54, 56, 57, 58, 60, 61, 62, 64, 66, 68, 72, 73, 74, 77, 78, 79, 80, 82, 83, 84, 85, 87, 93, 95, 102, 120, 121, 122, 129, 132, 134, 135, 136, 139, 141, 143, 144, 145, 146, 148, 149, 154, 156, 159, 161, 165, 167, 175, 188, 212, 228, 236, 237, 245, 249, 251, 256, 259, 276, 281, 287, 288, 289, 298, 301], "allclos": [13, 66, 213, 231], "allow": [25, 39, 41, 53, 68, 152, 201, 212, 225, 273, 274, 290], "allowlist": [25, 39, 41, 53], "almost": 251, "alon": [60, 88], "along": [0, 5, 21, 22, 28, 29, 31, 52, 146, 159, 162, 208, 234, 271, 275, 281, 282, 283, 284, 285, 290], "alongsid": 273, "alparon": 126, "alpha": [33, 35, 36, 37, 99, 117, 126, 137, 142, 265, 266, 268, 269, 270], "alpha_j": 36, "alpha_k": 192, "alpha_t": 36, "alphas_cumprod": 35, "alreadi": [31, 74, 75, 76, 78, 81, 83, 84, 154], "also": [2, 4, 11, 12, 13, 14, 15, 17, 31, 34, 36, 39, 44, 45, 46, 50, 51, 56, 57, 58, 59, 61, 64, 66, 67, 68, 69, 70, 71, 73, 79, 85, 86, 95, 98, 102, 105, 106, 122, 135, 137, 138, 142, 149, 150, 156, 170, 172, 201, 204, 208, 212, 213, 223, 227, 245, 273, 281], "altern": [2, 8, 27, 31, 35, 36, 65, 73, 90, 91, 165, 189, 208, 212, 223], "although": [102, 129, 132, 134, 143, 144, 145, 146, 149, 154, 170, 236, 237], "altogeth": 44, "alwai": [36, 64, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 225, 256, 281], "amazonaw": [44, 46, 50], "ambientgan": [115, 116, 131], "among": [4, 8, 21, 27, 49, 52, 62, 64, 76, 80, 175], "amount": [31, 35, 63, 270, 280, 281], "amplitud": [11, 181, 230, 253], "an": [0, 2, 4, 5, 6, 8, 10, 13, 14, 15, 16, 17, 18, 19, 24, 25, 28, 29, 30, 33, 34, 36, 37, 39, 40, 41, 42, 45, 46, 50, 51, 53, 56, 57, 60, 61, 64, 65, 66, 69, 71, 72, 73, 80, 86, 89, 98, 105, 106, 107, 122, 131, 132, 135, 136, 137, 138, 141, 142, 147, 149, 151, 152, 156, 157, 159, 165, 166, 169, 170, 175, 182, 185, 187, 188, 190, 192, 197, 202, 204, 208, 210, 212, 213, 217, 218, 222, 225, 234, 251, 253, 256, 265, 266, 268, 269, 270, 271, 273, 275, 278, 281, 284, 286, 287, 288, 289, 291, 292, 293, 294, 296, 299, 301], "analog": 273, "ancestr": 36, "anderson": [159, 162, 286], "anderson_acceler": [49, 159, 162], "anderson_acceleration_backward": [49, 286], "anderson_acceleration_step": 162, "andrew": 71, "andrewwango": 274, "angap": 11, "angl": [4, 11, 13, 15, 19, 24, 26, 31, 44, 52, 58, 72, 73, 82, 139, 161, 166, 167, 169, 170, 204, 206, 213, 214, 218, 228, 230, 234, 236, 237, 275, 277, 282, 283, 284, 285, 296], "angular": 11, "ani": [2, 6, 8, 13, 14, 17, 25, 39, 41, 53, 56, 58, 59, 65, 69, 71, 73, 86, 88, 94, 95, 96, 97, 98, 102, 104, 105, 110, 120, 121, 131, 141, 143, 166, 190, 208, 213, 215, 218, 223, 227, 228, 237, 255, 262, 271, 272, 281, 286, 287], "anim": [39, 301], "anim_kwarg": 301, "anim_writ": 301, "anisotrop": 234, "anneal": 101, "annoi": 227, "annot": 80, "anoth": [12, 86], "ansi": 4, "ansi_standard_indic": 4, "anti": 235, "antiproportion": 214, "anyth": 39, "ap": 150, "apertur": [11, 253], "appear": [0, 66], "append": [13, 36, 290], "appli": [0, 2, 4, 7, 20, 21, 22, 25, 28, 33, 34, 35, 36, 37, 44, 50, 54, 59, 64, 65, 76, 79, 87, 98, 102, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 130, 137, 141, 143, 151, 152, 155, 156, 158, 159, 172, 173, 175, 200, 201, 204, 207, 208, 212, 213, 215, 216, 217, 221, 223, 224, 225, 226, 227, 236, 240, 243, 251, 256, 275, 282, 283, 284, 285], "applic": [0, 66, 151, 152], "apply_nois": [88, 96], "approach": [0, 17, 42, 52, 62, 128, 131], "appropri": [35, 86, 98, 102, 118, 123, 156, 185], "approx": [33, 36, 37, 63, 92, 101, 228], "approxim": [0, 11, 15, 25, 31, 33, 37, 51, 58, 67, 99, 101, 105, 106, 107, 141, 156, 161, 172, 175, 228, 248, 251, 256, 265, 269], "ar": [0, 2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 39, 40, 41, 42, 43, 45, 46, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 73, 76, 77, 80, 85, 86, 87, 94, 95, 96, 98, 99, 101, 102, 103, 106, 110, 131, 136, 138, 141, 145, 146, 148, 152, 155, 156, 157, 158, 159, 162, 165, 175, 187, 189, 190, 191, 194, 200, 202, 203, 204, 207, 208, 211, 212, 213, 215, 216, 218, 222, 223, 226, 228, 234, 236, 237, 241, 245, 248, 249, 251, 252, 254, 255, 256, 259, 260, 261, 265, 268, 269, 270, 271, 273, 275, 277, 281, 282, 283, 285, 287, 293, 294, 296, 298, 299, 300, 301], "arang": [39, 86, 98, 236, 237], "arbitrari": [13, 25, 35, 36, 39, 41, 53, 57, 156, 281], "architectur": [2, 7, 10, 16, 35, 39, 41, 43, 44, 45, 46, 49, 53, 54, 58, 59, 69, 71, 128, 129, 132, 135, 138, 142, 148, 149, 150, 155, 289, 291], "aren": [118, 123, 281], "arg": [0, 5, 20, 25, 30, 51, 52, 53, 59, 64, 95, 109, 111, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 131, 134, 139, 141, 151, 152, 156, 157, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 179, 180, 182, 183, 184, 185, 189, 190, 191, 192, 193, 196, 197, 213, 218, 250, 251, 254, 255, 256, 262, 272, 274, 276, 277, 278, 279, 280, 281, 286, 287, 301], "argentina": [7, 33, 34, 37], "argmin": [2, 35, 137, 169, 183, 184, 185, 266], "args_model": 89, "argument": [8, 17, 57, 61, 81, 89, 104, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 139, 148, 159, 161, 162, 186, 188, 227, 244, 272, 273, 281, 287, 288, 289], "aris": 25, "arithmet": [17, 281], "around": [9, 70, 234], "arrai": [0, 15, 35, 80, 137, 264, 266], "arridg": 52, "arrow": 74, "art": [0, 71], "artefact": 58, "artifact": [39, 42, 73, 86, 128, 150, 228, 237, 271, 272], "artifact2artifact": [19, 47, 72, 73, 86, 93, 98, 102, 204, 208, 213, 215, 218, 223, 227, 249, 250, 251, 255, 260, 262, 291, 292, 296, 301], "artifact2artifactloss": [39, 102, 249], "artifact_remov": 53, "artifactremov": [16, 42, 43, 44, 45, 46, 62, 202, 213, 216, 228], "arxiv": [34, 46, 88, 89, 92, 96, 105, 106, 128, 138, 141, 145, 146, 202, 207, 258, 264, 265, 266, 269, 270, 275, 284], "asarrai": 35, "ascent": [105, 106], "ask": 56, "assert": [0, 13, 66], "assess": 126, "assign": [39, 85, 216], "associ": [0, 9, 15, 35, 50, 57, 58, 73, 85, 86, 88, 93, 94, 95, 96, 97, 99, 101, 102, 105, 106, 107, 109, 111, 151, 152, 159, 162, 169, 173, 185, 245, 268], "assum": [35, 36, 39, 73, 88, 95, 113, 114, 116, 137, 154, 201, 227, 228, 236, 237, 269, 270, 281], "assumpt": [190, 265], "astigmat": 4, "at_next": 36, "atan": 31, "aten": [9, 17], "atmospher": [66, 211], "attempt": 281, "attent": [31, 137, 148, 150], "attn_drop_r": 150, "attr": 17, "attribut": [6, 35, 62, 122, 131, 189, 190, 191, 210, 214, 219, 220, 229, 230, 300], "atu": 146, "au": [183, 184, 185], "augment": [18, 19, 68, 72, 82, 85, 88, 93, 96, 141, 144, 210, 227, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 294, 296, 301], "author": [35, 36, 52, 58, 99, 137, 150], "authorship": 56, "auto_exampl": [1, 3, 18, 23, 26, 32, 38, 47, 48, 55], "auto_examples_jupyt": 19, "auto_examples_python": 19, "autocalibr": 256, "autoencod": [86, 98], "autograd": [36, 66], "automat": [5, 11, 13, 31, 36, 56, 58, 66, 169, 170, 171, 213, 218, 281], "aux": 159, "aux_x": 36, "auxiliari": [151, 159, 162], "avail": [0, 4, 8, 16, 20, 41, 53, 57, 58, 59, 66, 69, 135, 137, 138, 141, 142, 149, 150, 156, 157, 175, 183, 184, 213, 248], "averag": [14, 17, 20, 34, 37, 39, 44, 58, 61, 66, 68, 76, 98, 99, 102, 135, 141, 142, 154, 186, 200, 201, 213, 214, 227, 271, 281], "avg": [25, 73], "avg16": 76, "avg2": 76, "avg4": 76, "avg8": 76, "avgpool": [135, 142], "avoid": [7, 8, 33, 136, 167, 268, 273], "awgn": 36, "ax": [0, 5, 21, 22, 24, 25, 37, 50, 51, 53, 66, 67, 159, 161, 162, 184, 185, 190, 198, 202, 204, 213, 228, 234, 276, 296], "ax_": 33, "ax_cur": 145, "ax_k": [50, 51], "axi": [20, 35, 163, 228, 237, 275, 276, 282], "axial": 11, "b": [2, 7, 9, 10, 11, 13, 24, 25, 28, 30, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 50, 51, 53, 61, 65, 66, 68, 86, 98, 105, 106, 107, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 144, 150, 153, 154, 181, 183, 196, 198, 200, 208, 215, 217, 222, 223, 224, 226, 227, 231, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 254, 259, 261, 262, 268, 269, 270, 281, 296, 299, 301], "b1hw": 126, "b4": [7, 33, 34, 37], "b_": [9, 222, 224], "b_dagger": 217, "b_i": [105, 181], "b_t": [36, 265], "back": [0, 50, 51, 73, 177, 228, 288, 289], "backbon": [7, 16, 50, 61, 62, 69, 101, 131], "backbone_gener": 131, "backbone_net": [42, 128, 153, 154], "backend": 0, "background": [9, 187, 224], "backproject": [0, 15, 25, 49, 50, 51, 52, 54, 146], "backpropag": [36, 89, 92, 130, 166], "backtrack": [5, 22, 30, 159], "backtrak": 5, "backward": [5, 25, 69, 71, 73, 113, 114, 116, 183, 184, 228, 273, 286], "ball": [53, 183, 184], "band": [50, 175], "bar": [16, 36, 41, 42, 43, 45, 46, 49, 50, 51, 52, 53, 54, 73, 85, 131, 266, 271], "barbara": [4, 28], "base": [2, 7, 24, 33, 36, 39, 52, 57, 59, 60, 61, 64, 66, 67, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 290, 291], "base_dir": [5, 6, 10, 13, 16, 20, 21, 22, 27, 28, 29, 30, 31, 41, 42, 43, 45, 46, 49, 50, 51, 52, 53, 54], "baseclass": 122, "basedeq": [69, 288], "baselin": [2, 44], "baselossschedul": [90, 91, 100, 103, 273], "basemaskgener": [254, 255, 262], "baseoptim": [27, 30, 31, 64, 160, 188, 287, 289], "baseunfold": [69, 286, 288, 289], "basi": [10, 20, 50, 53], "basic": [15, 18, 66, 71, 72, 200, 201, 213, 273, 275], "basplib": 0, "batch": [6, 8, 21, 25, 27, 30, 41, 42, 49, 50, 51, 61, 65, 73, 80, 82, 85, 86, 93, 98, 101, 109, 111, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 130, 135, 136, 137, 138, 139, 147, 153, 155, 159, 161, 166, 197, 208, 212, 215, 223, 224, 227, 231, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 262, 263, 271, 275, 278, 281, 282, 283, 284, 285, 296, 298, 299], "batch_dimens": 197, "batch_norm": [2, 16, 40, 147, 155], "batch_siz": [2, 4, 5, 6, 8, 11, 16, 24, 25, 27, 30, 36, 39, 41, 42, 43, 45, 46, 49, 50, 51, 52, 53, 54, 57, 66, 80, 85, 105, 106, 107, 108, 135, 139, 145, 146, 161, 212, 227, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263], "batch_step": [249, 251, 256, 259], "batchnorm": 155, "batchnorm2d": [131, 155], "batchwis": 281, "bay": 36, "bayer": [15, 205], "bayer_filt": 205, "bayesian": 37, "bch": 126, "beam": [228, 237], "becaus": [10, 53], "beck": 152, "been": [0, 2, 5, 6, 7, 16, 27, 29, 30, 31, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 53, 54, 73, 74, 75, 78, 81, 83, 84, 97, 162], "befor": [2, 35, 36, 53, 86, 87, 92, 93, 98, 99, 102, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 136, 150, 154, 162, 188, 207, 212, 220, 223, 281, 287, 288, 289, 300], "begin": [0, 12, 20, 21, 22, 25, 28, 35, 36, 50, 53, 59, 64, 69, 73, 159, 175, 183, 189, 190, 191, 192, 193, 194, 195, 196, 213, 218, 232, 233, 234, 235, 265, 266, 286, 287], "beginn": [133, 134], "behav": 151, "behaviour": [120, 121, 281], "being": [13, 35, 73], "below": [0, 4, 11, 56, 60, 63, 86, 98, 122, 212], "benchmark": [74, 214], "benefit": [122, 274], "bergman": 29, "berkelei": 74, "bernoulli": [45, 106, 107, 212, 251], "bernoullisplittingmaskgener": [39, 44, 102, 212, 256, 259], "besid": 13, "bessel": 221, "best": [13, 35, 36, 43, 44, 45, 46, 99, 102, 131], "beta": [24, 35, 36, 52, 54, 64, 126, 139, 161, 162, 165, 187, 189, 190, 191, 211, 235, 265, 266], "beta_": 36, "beta_anderson_acc": [159, 162], "beta_anderson_acc_backward": 286, "beta_end": [35, 36, 137, 266], "beta_start": [35, 36, 137, 266], "beta_t": 36, "better": [13, 16, 20, 41, 42, 43, 45, 46, 49, 50, 51, 52, 53, 54, 61, 70, 99, 102, 122, 126, 127], "between": [0, 2, 5, 7, 12, 25, 27, 30, 31, 35, 36, 59, 63, 64, 73, 75, 76, 77, 81, 88, 89, 90, 91, 100, 102, 112, 113, 115, 116, 117, 118, 129, 152, 155, 159, 165, 169, 182, 213, 217, 218, 221, 228, 237, 253, 261, 266, 268, 270, 277, 296, 299], "beyond": [17, 40, 41], "bfbatchnorm2d": 155, "bia": [16, 41, 42, 43, 45, 49, 50, 51, 52, 53, 54, 131, 138, 145, 146, 147, 148, 150, 155], "bias": [73, 138, 155], "biasfre": [148, 155], "bicub": [30, 66, 207, 216, 232, 278], "bigcup_t": 223, "bigger": [102, 202, 225, 296, 299], "bilinear": [66, 207, 216, 233, 275, 282, 283, 284, 285], "bin": [9, 224, 244, 245], "binari": [15, 42, 204, 208, 212, 215, 223, 225, 251, 256], "biolog": 76, "bkg": 187, "bkg_level": 9, "black": [56, 66, 200, 201, 207, 213], "blank": [208, 215, 223, 249, 259], "blind": [2, 66, 112, 113, 147, 149, 155], "bling": 148, "blob": [25, 39, 41, 53, 140, 256], "block": [58, 62, 110, 135, 142, 145, 146, 148, 150, 166, 256, 296], "blue": 9, "blur": [2, 11, 18, 19, 22, 29, 30, 33, 35, 49, 54, 71, 72, 201, 204, 207, 213, 216, 218, 226, 232, 233, 234, 235, 238, 241, 248, 252, 257, 258, 260, 261, 294, 296], "blur_col": 11, "blur_confoc": 11, "blur_gener": 2, "blurfft": [4, 5, 21, 27, 29, 33, 35, 49], "bmatrix": [12, 213, 218], "bool": [0, 73, 74, 75, 76, 77, 78, 79, 81, 83, 84, 85, 86, 88, 89, 92, 96, 98, 102, 105, 106, 110, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 131, 135, 136, 137, 138, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 155, 159, 162, 165, 167, 175, 187, 188, 197, 202, 212, 213, 220, 221, 222, 223, 225, 228, 236, 237, 238, 239, 240, 241, 242, 243, 245, 249, 251, 256, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 277, 281, 286, 287, 288, 289, 293, 294, 296, 297, 298, 299, 300, 301], "boolean": [77, 144, 166, 268], "bora": [2, 112, 113, 115, 116, 131], "borrow": 245, "both": [2, 11, 25, 31, 44, 50, 51, 52, 66, 73, 77, 225, 228, 256, 258, 273], "bottom": [77, 298], "bound": [244, 245], "boundari": [0, 4, 167, 261], "box": [33, 268, 269, 270], "brain": [20, 76, 77], "brainweb": 20, "brainweb_t1_icbm_1mm_subject_0": [11, 20], "breath": [86, 98, 249, 259], "bredi": 151, "bregman": [29, 169, 177, 178, 179, 180, 188, 288, 289], "bregman_potenti": [29, 169, 188, 288, 289], "bregman_prox": 169, "briefli": 58, "briggs_weight": 0, "bright": 0, "broad": 148, "broadcast": [212, 238, 239, 241, 242, 246, 247], "bsd68": 74, "bsds500": [24, 58, 139, 161], "buffer_s": 8, "build": [0, 6, 17, 19, 28, 37, 38, 58, 62, 69, 71, 72, 82, 110, 144, 167, 169, 170, 172, 188, 201, 204, 210, 213, 218, 268, 270, 288, 289, 292, 294, 296], "builder": 69, "built": [143, 166], "burg": [29, 179], "burgentropi": 29, "burn": [268, 269, 270], "burnin": [33, 267], "burnin_ratio": [33, 267, 268, 269, 270], "butterfli": [29, 35, 36], "bx": [66, 217], "byaman14": 256, "bytesio": 25, "bz": 199, "c": [0, 11, 15, 20, 39, 51, 53, 61, 65, 66, 68, 82, 86, 98, 106, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 136, 137, 148, 150, 153, 154, 200, 201, 202, 204, 205, 208, 212, 215, 221, 222, 223, 225, 226, 227, 231, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 254, 255, 256, 259, 261, 262, 281, 296, 299, 301], "c2": 36, "c_": 175, "cach": [2, 10, 13, 24, 25, 27, 28, 30, 36, 37, 39, 40, 41, 42, 43, 44, 45, 77], "cal": 213, "calcul": [33, 61, 99, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 163, 164, 169, 171, 174, 177, 179, 180, 182, 223, 227, 281, 296, 301], "call": [4, 11, 13, 17, 36, 58, 59, 66, 67, 69, 70, 73, 87, 91, 93, 100, 104, 109, 111, 129, 132, 134, 141, 143, 144, 145, 146, 149, 152, 154, 162, 165, 212, 213, 231, 236, 237, 249, 271, 281, 296, 301], "callabl": [74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 105, 120, 121, 122, 141, 167, 168, 169, 170, 171, 176, 182, 188, 198, 199, 204, 213, 218, 227, 231, 260, 267, 281, 288, 289], "camera": [28, 40, 58, 68, 225, 282, 283, 284, 285], "cameraman": 59, "can": [0, 2, 4, 5, 6, 8, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 27, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 68, 69, 70, 71, 73, 77, 85, 86, 88, 94, 95, 96, 97, 98, 99, 102, 104, 105, 106, 107, 110, 122, 128, 129, 131, 135, 136, 137, 138, 141, 142, 143, 149, 150, 153, 154, 155, 156, 157, 158, 159, 162, 163, 166, 172, 175, 185, 188, 202, 207, 208, 212, 213, 215, 216, 217, 218, 221, 222, 223, 225, 226, 228, 231, 237, 238, 239, 240, 241, 242, 243, 246, 247, 250, 251, 254, 256, 260, 262, 264, 265, 268, 271, 272, 286, 287, 288, 289, 298, 300, 301], "cancer": 80, "cancerimagingarch": 80, "capabl": 227, "capac": 8, "capitol": [29, 179], "captur": [63, 66, 213, 218], "care": [33, 129, 132, 134, 143, 144, 145, 146, 149, 154, 236, 237, 266], "carefulli": 35, "carlo": [17, 33, 37, 58, 86, 99, 102, 105, 106, 107, 141, 267, 268, 269, 270, 281], "cartesian": [15, 66, 208, 215, 223, 254, 255, 262], "cascad": 255, "case": [0, 4, 6, 8, 9, 11, 20, 21, 25, 28, 36, 39, 41, 44, 50, 53, 57, 58, 59, 62, 64, 73, 85, 86, 98, 101, 125, 127, 137, 165, 181, 183, 184, 202, 213, 218, 225, 228, 232, 233, 235, 265, 282, 283, 284, 285], "cast": 79, "cat": [9, 14, 15, 36, 155], "caus": 155, "caveat": [36, 73], "cbar": [0, 296], "cbsb68": 74, "cbsbd68": 74, "cbsd500": [49, 54], "cbsd68": [5, 15, 16, 53], "cbsd_0010": [4, 15, 24], "cc": 101, "cdot": [2, 20, 35, 36, 64, 67, 69, 156, 157, 159, 172, 175, 183, 196, 233, 235, 265, 266, 281], "celeba": [57, 85], "celeba_exampl": [17, 40, 118, 123], "cell": 76, "center": [53, 183, 184, 200, 201, 207, 213, 238, 240, 250, 254, 255, 256, 262], "center_block": 256, "center_fract": [250, 254, 255, 262], "centercrop": [2, 5, 6, 16, 21, 22, 27, 30, 40, 49, 53, 54], "centr": 39, "certain": [7, 8, 57, 136, 281], "cfloat": [202, 222], "cg": 198, "ch": 81, "chain": [17, 68, 182, 267, 268, 269, 270, 281], "challeng": [0, 39, 75, 77], "chambol": [10, 19, 52, 55, 72, 73, 79, 85, 93, 104, 151, 152, 156, 168, 169, 170, 188, 190, 192, 204, 212, 213, 218, 271, 287, 288, 289, 292], "chang": [4, 56, 73, 159, 162, 200, 281], "channel": [4, 6, 7, 9, 12, 14, 15, 20, 21, 24, 27, 30, 39, 49, 52, 58, 82, 102, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 132, 133, 134, 135, 137, 138, 139, 142, 143, 145, 146, 147, 148, 149, 150, 155, 161, 166, 202, 203, 205, 208, 212, 215, 222, 223, 224, 225, 227, 238, 239, 240, 241, 242, 243, 250, 251, 252, 253, 254, 255, 256, 258, 262, 296, 299], "channelwis": [15, 202, 222], "character": [66, 213, 218], "characteris": 2, "cheap": 156, "chebyshev": 269, "check": [0, 51, 53, 54, 56, 73, 74, 75, 76, 78, 81, 83, 84, 148, 159, 162, 213, 251, 273, 281], "check_clip_grad": [73, 273], "check_clip_grad_d": 273, "check_conv_fn": [159, 162], "check_dataset_exist": [74, 78, 83, 84], "check_grad": [73, 273], "check_input_rang": [118, 123], "check_iteration_fn": [159, 162], "check_mask": [208, 215], "check_pixelwis": 251, "checkpoint": [2, 5, 10, 13, 24, 25, 28, 30, 36, 37, 39, 40, 41, 42, 43, 44, 45, 73, 150], "checksum": 75, "chen": [17, 40, 71], "child": [64, 170, 250, 254, 262, 286, 287], "choic": [24, 25, 31, 58, 59, 63, 64, 105, 106, 107, 139, 160, 161], "choos": [5, 10, 15, 16, 25, 28, 35, 36, 41, 42, 43, 45, 46, 49, 50, 51, 52, 53, 54, 69, 86, 90, 91, 97, 100, 134, 137, 159, 162, 175, 205, 238, 240, 241, 243], "choosen": 25, "chose": [21, 27, 49], "chosen": [24, 29, 31, 35, 49, 54, 73, 85, 99, 141, 150, 159, 213, 214, 271], "chung": 36, "chunk": [39, 86, 249], "chw": 125, "circ": [64, 119, 212, 213, 218], "circl": [31, 52, 228, 236, 237], "circular": [2, 4, 11, 66, 155, 200, 201, 207, 213, 216, 226, 228, 237, 238, 239, 240, 241, 242, 243, 248, 261, 279], "circular_pad": [2, 40, 155], "ckp_": 73, "ckp_10_demo_sur": 45, "ckp_50_demo_n2n": 43, "ckp_interv": [41, 42, 73, 273], "ckpt": [2, 10, 16, 29, 30, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54], "ckpt_dir": [10, 16, 29, 41, 42, 43, 45, 46, 49, 50, 51, 52, 53, 54], "ckpt_path": 128, "ckpt_pretrain": [73, 273], "ckpt_state_dict": 10, "claim": 159, "clamp": [0, 22, 175], "clamp_max": 175, "clamp_min": [0, 175], "class": [0, 4, 5, 6, 8, 11, 13, 14, 15, 16, 20, 21, 22, 25, 27, 28, 31, 34, 35, 36, 37, 46, 49, 50, 51, 52, 53, 54, 57, 58, 59, 60, 61, 64, 66, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290], "classif": 273, "classifi": [109, 111, 147, 197], "clean": [52, 54, 76, 99, 202, 208, 212, 216, 218, 228], "click": 80, "clip": [13, 24, 25, 33, 36, 59, 73, 220, 267, 268, 269, 270, 271, 273, 277, 296, 299], "clip_posit": 220, "clone": [15, 20, 25, 29, 35, 36], "close": [14, 20, 33, 34, 66, 99, 156, 157, 183, 184, 186, 202, 207, 213, 218, 228], "closer": [13, 213, 264, 266], "cm": [228, 237], "cmap": [0, 20, 296, 298, 299], "cnn": [7, 27, 160], "co": [2, 8, 10, 11, 13, 20, 24, 25, 28, 30, 36, 37, 39, 40, 41, 42, 43, 44, 45, 59, 74, 78, 84, 234], "code": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 56, 58, 59, 62, 66, 73, 97, 125, 127, 137, 150, 151, 152, 162, 254], "coeff": [4, 11, 156, 252, 253], "coeff_col": 11, "coeffic": 156, "coeffici": [4, 11, 15, 156, 157, 175, 252, 253], "coil": [39, 41, 66, 77, 208, 215, 223], "coincid": 11, "colab": 19, "coll": 11, "collabor": 130, "collat": 281, "collate_batch": 281, "collect": [11, 39, 64, 66, 69, 71, 80, 141, 281], "colon": 63, "color": [4, 5, 6, 12, 13, 14, 15, 16, 21, 22, 27, 28, 29, 30, 31, 49, 52, 53, 54, 58, 74, 139, 161, 205, 216], "colorjitt": 17, "colormap": [0, 296, 299], "colour": [4, 14, 17, 203], "column": [50, 51, 212, 255, 262, 296, 299], "com": [19, 25, 39, 41, 44, 46, 50, 53, 71, 83, 97, 137, 140, 150, 254, 256, 274], "combett": 20, "combin": [17, 35, 62, 66, 117, 260, 261, 266], "come": [64, 169, 170, 176, 213, 288, 289], "command": 56, "comment": [2, 39], "commerci": 76, "common": [0, 7, 33, 34, 37, 49, 50, 54, 64, 175], "commonli": [83, 84, 162], "commun": 56, "commut": 141, "compar": [2, 33, 34, 37, 73, 75, 86, 110, 131, 249, 286], "compare_no_learn": [73, 273], "comparison": [73, 110, 271], "compat": [62, 156], "compens": 0, "complet": 273, "complex": [0, 10, 13, 15, 20, 57, 61, 79, 85, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 158, 175, 202, 208, 215, 221, 225, 296, 299], "complex64": [0, 79, 222], "complex_ab": [117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127], "complex_denois": 58, "complex_dtyp": 79, "compliant": 56, "complic": 2, "compon": [25, 36, 139, 161, 197], "component_log_likelihood": 197, "compos": [2, 5, 6, 8, 16, 17, 21, 22, 27, 30, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 53, 54, 57, 77, 80, 110, 138, 157, 184, 213, 281], "composit": [66, 151, 152], "compound": [68, 281], "comprehens": 56, "compress": [2, 19, 55, 57, 72, 73, 79, 85, 93, 104, 112, 113, 131, 150, 169, 170, 175, 195, 202, 213, 218, 287, 289, 292, 296, 300], "compressedsens": [15, 50, 51, 57, 66], "comput": [0, 4, 5, 6, 7, 12, 13, 14, 16, 19, 20, 21, 22, 24, 27, 28, 29, 30, 33, 34, 35, 36, 37, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 58, 64, 66, 67, 73, 80, 82, 86, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 118, 123, 125, 127, 129, 132, 134, 138, 139, 143, 144, 145, 146, 149, 151, 152, 154, 156, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 188, 201, 202, 204, 206, 207, 208, 210, 212, 213, 214, 216, 217, 218, 221, 223, 225, 228, 230, 231, 235, 236, 237, 240, 243, 244, 245, 258, 265, 266, 267, 268, 269, 270, 271, 273, 286, 287, 289, 290, 292, 294, 296, 297], "compute_alpha": 36, "compute_alpha_beta": 265, "compute_loss": [25, 73, 273], "compute_metr": [0, 13, 21, 22, 28, 29, 31, 73, 126, 159, 162, 286, 287], "compute_norm": [0, 12, 14, 64, 213, 270], "concanten": [212, 218], "concaten": [18, 19, 70, 72, 145, 146, 150, 203, 204, 207, 212, 213, 216, 218, 275, 281, 282, 283, 284, 285, 290, 292, 296], "conclus": 13, "condat": [19, 32, 59, 72, 138, 151, 152, 159, 165, 168, 169, 170, 188, 204, 210, 213, 218, 225, 292, 294, 296, 297], "condatvu": 28, "condit": [4, 35, 42, 66, 112, 113, 137, 147, 240, 243, 261, 266], "confer": [27, 30, 160], "config": [9, 35, 149], "config_matplotlib": [9, 35], "confoc": 76, "confocal_bpae_b": 76, "confocal_bpae_g": 76, "confocal_bpae_r": 76, "confocal_fish": 76, "confocal_mic": 76, "confocalblurgenerator3d": 11, "conj": [196, 213, 290], "conj_model": 178, "conjug": [28, 64, 169, 176, 177, 178, 179, 180, 190, 198, 202, 207, 213, 228, 290], "conjugate_gradi": [202, 213, 228], "conjugate_gradient_method": 198, "conjunct": [73, 271], "connect": [129, 150, 155], "consecut": [5, 30, 169], "consequ": 214, "consid": [15, 24, 25, 36, 52, 77, 139, 161, 166, 239, 242, 249, 251, 252, 253, 256, 259, 277], "consider": 254, "consist": [0, 10, 15, 28, 35, 36, 39, 41, 42, 53, 63, 69, 76, 80, 83, 85, 86, 94, 96, 97, 98, 102, 104, 112, 113, 114, 115, 116, 131, 159, 216], "consol": [73, 85, 197, 271], "consortium": 80, "const": 25, "constant": [24, 36, 49, 60, 105, 106, 107, 148, 151, 152, 186, 199, 203, 211, 213, 214, 238, 265, 268, 269, 270, 281], "constant_shap": [277, 281], "constrain": [10, 17, 19, 55, 68, 72, 73, 79, 85, 93, 104, 152, 156, 168, 169, 170, 204, 212, 213, 218, 271, 287, 289, 292], "constraint": [58, 268, 269, 270], "construct": [2, 11, 15, 25, 35, 39, 41, 44, 53, 66, 85, 86, 98, 112, 113, 115, 116], "constructor": [257, 272], "consumpt": [139, 161], "contain": [4, 6, 9, 10, 11, 28, 39, 50, 58, 60, 61, 64, 66, 67, 68, 69, 73, 74, 76, 77, 78, 79, 80, 83, 84, 85, 95, 96, 156, 157, 159, 162, 165, 188, 189, 190, 191, 192, 193, 196, 197, 200, 201, 219, 221, 224, 228, 237, 261, 268, 269, 270, 287, 288, 289, 293, 294, 300], "content": [25, 75], "context": [2, 8, 287], "continu": [40, 274], "contrarili": 238, "contrast": 25, "contribut": 245, "contributor": 56, "control": [25, 31, 33, 35, 37, 39, 41, 44, 53, 60, 63, 77, 102, 105, 141, 155, 160, 209, 265, 270], "conv": [147, 148, 149, 150], "conv1d": 9, "conv2d": [66, 200, 239, 241], "conv2d_fft": 242, "conv3d": 200, "conv3d_fft": [200, 243], "conv_transpose2d": 66, "conv_transpose3d_fft": 240, "conv_transposed2d": 238, "conv_transposed2d_fft": 239, "convdecod": [7, 136], "conveni": [20, 21, 22, 33, 61], "convent": [20, 156, 203, 252], "converg": [0, 5, 12, 14, 20, 21, 22, 27, 28, 29, 30, 31, 33, 34, 52, 64, 73, 89, 92, 151, 152, 159, 162, 165, 169, 173, 183, 184, 194, 213, 267, 268, 269, 270], "convers": 71, "convert": [12, 13, 14, 34, 39, 58, 67, 137, 158, 203, 204, 208, 293, 294], "convert_to_fp16": 137, "convert_to_fp32": 137, "convex": [29, 53, 64, 143, 151, 152, 169, 176, 177, 178, 179, 180], "convolut": [0, 5, 7, 9, 21, 37, 59, 65, 66, 67, 132, 133, 134, 135, 136, 138, 142, 143, 145, 146, 148, 150, 155, 172, 200, 201, 221, 226, 238, 239, 240, 241, 242, 243, 248, 255], "convolv": [4, 67, 172, 238, 239, 240, 241, 242, 243], "convtranspos": [135, 142], "convtranspose2d": 131, "coordin": [0, 234, 258, 298], "copi": [9, 11, 15, 20, 35, 49, 50, 51, 53, 54], "core": 8, "corner": 298, "correct": [0, 31, 131, 221], "correct_global_phas": 13, "correctli": [53, 74, 75, 78, 81, 83, 84], "correl": [43, 238, 239, 241], "correspond": [0, 4, 11, 15, 25, 28, 30, 35, 36, 50, 51, 54, 58, 64, 76, 98, 131, 148, 159, 165, 177, 179, 180, 186, 190, 196, 208, 209, 213, 214, 215, 217, 218, 223, 238, 239, 240, 241, 242, 243, 260, 273, 282, 283, 284, 285, 298], "corrupt": [29, 43, 45, 46, 101], "cosin": 13, "cosine_similar": 13, "cosineannealinglr": 52, "cost": [5, 21, 22, 28, 30, 64, 106, 159, 162, 165, 188, 189, 190, 191, 192, 193, 213, 288, 289], "cost_tv": 21, "cost_tv_prox": 21, "cost_wv": 22, "cost_wv_prox": 22, "could": [7, 25, 39, 41, 53], "count": 245, "coupl": 25, "cours": 39, "cov": 197, "cov_regular": 197, "covari": [196, 197, 258], "coverag": 0, "cp": [10, 53, 64, 188, 287, 288, 289], "cpab": 274, "cpabdiffeomorph": 17, "cpiter": [52, 53], "cpp": [9, 17], "cpu": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 20, 21, 22, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 59, 73, 85, 86, 98, 109, 110, 111, 112, 113, 114, 115, 116, 118, 123, 128, 135, 138, 139, 142, 143, 148, 149, 153, 154, 156, 157, 161, 166, 175, 197, 200, 201, 202, 203, 205, 207, 208, 212, 215, 216, 221, 222, 223, 224, 225, 226, 228, 231, 236, 237, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 262, 263, 264, 265, 266, 271, 273, 274, 275, 282, 283, 284, 285, 287, 289, 293, 294], "creat": [5, 12, 13, 17, 18, 19, 27, 28, 65, 66, 69, 70, 72, 77, 79, 85, 86, 92, 96, 98, 102, 110, 122, 139, 141, 159, 161, 162, 202, 204, 206, 208, 210, 212, 213, 215, 218, 222, 223, 227, 249, 250, 251, 255, 256, 259, 260, 262, 264, 268, 272, 281, 289, 292, 296], "creation": 14, "crit": [5, 22, 33, 34, 151, 152], "crit_conv": [5, 30, 159, 183, 184, 268, 270], "criteria": [5, 27, 30, 131, 268], "criterion": [20, 151, 152, 159, 162, 173, 183, 184, 213], "critic": [109, 111, 273], "crop": [156, 277, 281, 293, 294], "crop_output": 156, "cross": [238, 241], "crucial": [31, 59], "csgm": 131, "csgm_model": 2, "csgmgener": 2, "csv": 80, "ct": [19, 24, 25, 32, 55, 71, 72, 73, 80, 93, 102, 104, 138, 139, 145, 146, 159, 161, 165, 166, 168, 169, 170, 188, 190, 210, 213, 214, 218, 228, 287, 289, 292, 294, 296, 297], "ct_small": 25, "ct_toi": 25, "cubic": [20, 175], "cuda": [0, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 15, 16, 20, 21, 22, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 62, 73, 92, 139, 160, 161, 200, 201, 226, 260, 264, 266], "cumprod": [35, 36], "cup_": [7, 33, 34, 37], "cur_data_fidel": [28, 52, 162, 165, 189, 190, 191, 192, 193], "cur_param": [28, 162, 165, 189, 190, 191, 192, 193, 196], "cur_prior": [28, 52, 162, 165, 189, 190, 191, 192, 193, 196], "curr_sigma": 35, "current": [5, 22, 25, 28, 33, 34, 35, 36, 39, 41, 52, 53, 73, 87, 90, 91, 100, 103, 124, 145, 146, 159, 162, 165, 189, 190, 191, 192, 193, 196, 197, 200, 201, 204, 207, 208, 209, 210, 214, 219, 220, 223, 226, 230, 260, 273], "current_log": 25, "curv": [0, 5, 13, 16, 21, 22, 28, 29, 31, 41, 42, 43, 45, 49, 50, 51, 52, 53, 54], "custom": [6, 10, 13, 18, 19, 31, 32, 38, 44, 53, 55, 59, 70, 71, 72, 73, 79, 85, 93, 104, 138, 144, 159, 165, 168, 169, 170, 172, 188, 195, 201, 202, 204, 207, 210, 213, 216, 218, 225, 234, 268, 270, 271, 272, 281, 287, 288, 289, 292, 294, 296, 297, 300], "custom_init": [0, 10, 31, 52, 53, 159], "custom_init_cp": [10, 53], "custom_metr": 159, "custom_output": [30, 52], "customis": 17, "customtrain": 73, "cutoff": [4, 11, 252, 253], "cv": 78, "cviter": 28, "cyclegan": 2, "d": [0, 2, 9, 11, 20, 28, 33, 37, 53, 64, 67, 89, 108, 109, 111, 112, 113, 114, 115, 116, 119, 126, 137, 141, 151, 152, 161, 168, 171, 172, 173, 177, 179, 180, 182, 200, 202, 211, 221, 222, 224, 240, 243, 245, 273, 288, 299], "d_": [9, 29, 53, 59, 126, 136, 169, 176, 224, 265, 266], "d_lambda": 126, "dagger": [105, 128, 204, 208], "damp": 269, "daniil": [151, 152], "data": [0, 2, 7, 13, 25, 40, 57, 59, 60, 62, 63, 66, 68, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 94, 96, 97, 98, 102, 104, 105, 106, 107, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 139, 143, 149, 153, 154, 159, 160, 161, 162, 165, 175, 181, 182, 183, 184, 185, 188, 189, 190, 191, 192, 193, 196, 197, 221, 227, 236, 237, 249, 256, 259, 260, 263, 265, 266, 271, 272, 273, 287, 288, 289], "data_dir": [5, 6, 10, 16, 20, 21, 22, 27, 29, 30, 41, 42, 43, 45, 46, 49, 50, 51, 52, 53, 54], "data_fidel": [0, 5, 10, 13, 21, 22, 25, 27, 28, 29, 30, 31, 33, 35, 36, 37, 49, 50, 51, 52, 53, 54, 59, 64, 69, 159, 162, 165, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 265, 266, 268, 269, 270, 287, 288, 289], "data_init": 197, "data_test": 57, "data_train": 57, "databas": 80, "datafid": [25, 59, 63, 64, 69, 159, 182, 185, 186, 187], "datafidel": [28, 52, 67, 159, 162, 165, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 265, 266, 268, 269, 270, 287, 288, 289], "datafidnam": [59, 64, 159, 182, 185], "dataload": [2, 5, 16, 25, 27, 28, 29, 30, 31, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 57, 73, 80, 197, 271, 272, 273], "dataparallel": 62, "datapoint": 85, "dataset": [10, 11, 13, 15, 18, 19, 20, 24, 25, 29, 31, 36, 40, 44, 58, 59, 60, 61, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 102, 139, 161, 204, 206, 210, 213, 214, 218, 271, 273, 292, 296], "dataset_cach": 77, "dataset_filenam": [16, 41, 42, 43, 45, 46, 49, 50, 51, 53, 54, 85], "dataset_info": 74, "dataset_nam": [5, 6, 21, 22, 27, 28, 30], "dataset_path": [2, 5, 30], "dataweight": [0, 221], "daubechi": 0, "davob": 130, "db": [0, 7, 13, 20, 21, 22, 28, 29, 31, 33, 34, 37], "db1": [0, 20, 175], "db2": [0, 20, 156, 175], "db3": [0, 20], "db4": [0, 20, 157, 175], "db5": 0, "db6": 0, "db7": 0, "db8": [0, 10, 20, 22, 50, 53, 156, 157, 175], "dcgan": [2, 131, 133, 134], "dcgan_faces_tutori": [133, 134], "dcgandiscrimin": [2, 113, 114, 116], "dcgangener": [2, 131], "dcm": 80, "dd_hh": 73, "ddim": [36, 265], "ddpm": 36, "ddrm": [14, 34], "deal": 227, "deblock": 81, "deblur": [2, 18, 19, 23, 29, 32, 35, 40, 55, 66, 71, 72, 73, 79, 81, 85, 93, 104, 112, 113, 135, 138, 147, 148, 152, 159, 160, 168, 169, 170, 173, 188, 201, 204, 210, 213, 218, 234, 271, 278, 286, 288, 292, 296, 297], "deblurgan": [2, 112, 113, 147], "deblurgan_model": 2, "debug": 129, "dec": 156, "decid": 56, "decod": [7, 59, 132, 135, 136, 148], "decolor": [12, 14, 66], "decolorizesvd": 14, "decompos": [0, 221], "decomposablephys": [4, 14, 33, 34, 66, 73, 201, 203, 206, 208, 212, 215, 223, 225, 264], "decomposit": [4, 11, 14, 33, 34, 66, 156, 157, 175, 201, 204, 208, 212, 215, 223, 225, 252, 253, 264], "deconvolut": 69, "decor": 281, "decreas": [35, 36, 159, 197, 264, 265, 266], "dedic": 76, "deep": [6, 13, 18, 19, 27, 39, 41, 55, 56, 65, 72, 73, 79, 85, 86, 93, 98, 104, 118, 128, 132, 133, 134, 135, 136, 138, 159, 160, 168, 169, 170, 178, 188, 201, 204, 210, 212, 213, 218, 234, 249, 255, 259, 271, 286, 287, 288, 291, 292, 294, 296], "deepimageprior": [7, 132], "deepinv": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304], "deepinv_dataset_path": 5, "deepinv_datasets_path": [16, 41, 42, 43, 44, 45, 46, 53], "deepinvers": [1, 15, 19, 56, 64, 72, 79, 159, 169, 170, 175, 188, 213, 218, 221, 296, 297, 298], "def": [0, 2, 5, 8, 10, 14, 25, 28, 30, 33, 35, 36, 51, 52, 53, 73, 268], "def_crit": 173, "default": [0, 4, 13, 24, 25, 39, 41, 53, 58, 61, 62, 66, 73, 74, 75, 76, 77, 78, 81, 82, 83, 84, 86, 87, 88, 89, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 131, 133, 134, 135, 137, 138, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 156, 157, 159, 160, 162, 163, 165, 166, 169, 171, 173, 175, 182, 183, 187, 188, 189, 190, 191, 200, 202, 212, 213, 216, 218, 221, 222, 225, 227, 228, 236, 237, 238, 240, 241, 243, 249, 250, 251, 252, 253, 256, 258, 259, 260, 261, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 296, 298, 299, 300, 301], "defin": [0, 4, 8, 9, 11, 12, 13, 14, 17, 20, 24, 25, 31, 35, 40, 41, 42, 43, 45, 46, 57, 59, 64, 68, 69, 73, 77, 87, 88, 90, 91, 94, 95, 96, 99, 100, 101, 103, 104, 114, 119, 129, 131, 132, 134, 139, 143, 144, 145, 146, 149, 154, 156, 157, 159, 161, 162, 163, 165, 166, 172, 181, 184, 185, 189, 190, 191, 192, 193, 196, 200, 201, 202, 203, 206, 207, 208, 211, 212, 213, 215, 216, 217, 218, 221, 222, 223, 225, 228, 232, 233, 234, 236, 237, 258, 264, 265, 266, 268, 273, 281, 301], "definit": [4, 28, 36, 66], "defocu": 148, "defocus_deblur": 148, "deg2rad": 11, "deg_dir": [5, 10, 20, 21, 22, 27, 30, 49], "degrad": [10, 13, 20, 29, 31, 58], "degre": [11, 15, 17, 25, 41, 141, 228, 234, 275, 277, 281, 282, 283, 284, 285], "delet": 39, "delta": [0, 4, 101, 226, 235], "demo": [0, 2, 4, 5, 6, 10, 11, 13, 15, 16, 17, 20, 21, 22, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 45, 49, 53, 54, 58, 118, 123, 223, 291], "demo_3d_wavelet": [20, 23, 72], "demo_artifact2artifact": [39, 47, 72], "demo_artifact2artifact_mri": 39, "demo_blur_tour": [4, 18, 72], "demo_custom_kernel": [33, 38, 72], "demo_custom_prior": [5, 18, 72], "demo_custom_prior_unfold": [51, 55, 72], "demo_dataset": [6, 18, 72], "demo_ddrm": [34, 38, 72], "demo_deq": [49, 55, 72], "demo_diffpir": [35, 38, 72], "demo_dip": [7, 18, 72], "demo_dp": [36, 38, 72], "demo_ei_transform": [40, 47, 72], "demo_epl": [24, 26, 72], "demo_equivariant_imag": [41, 47, 72], "demo_gan_imag": [2, 3, 72], "demo_hf_dataset": [8, 18, 72], "demo_learned_primal_du": [52, 55, 72], "demo_licp": 51, "demo_lidar": [9, 18, 72], "demo_lista": [50, 55, 72], "demo_load": [10, 18, 72], "demo_measplit_mnist_tomographi": 44, "demo_microscopy_3d": [11, 18, 72], "demo_moi_ckp_10": 42, "demo_mri_model": [39, 41], "demo_multioperator_imag": [42, 47, 72], "demo_n2n": 43, "demo_n2n_denois": [43, 47, 72], "demo_pansharpen": [12, 18, 72], "demo_patch_priors_ct": [25, 26, 72], "demo_phase_retriev": [13, 18, 72], "demo_phys": [14, 18, 72], "demo_physics_tour": [15, 18, 72], "demo_pnp_custom_optim": [28, 32, 72], "demo_pnp_dpir_deblur": [27, 32, 72], "demo_pnp_mirror_desc": [29, 32, 72], "demo_red_gspnp_sr": [30, 32, 72], "demo_ri_bas": [0, 1, 72], "demo_sampl": [37, 38, 72], "demo_splitting_loss": [44, 47, 72], "demo_sur": [45, 46], "demo_sure_denois": [45, 47, 72], "demo_train_inpaint": [16, 18, 72], "demo_training_inpaint": [16, 53], "demo_transform": [17, 18, 72], "demo_tv_minimis": [21, 23, 72], "demo_unfolded_constrained_lista": [53, 55, 72], "demo_unfolded_cp": 10, "demo_unfolded_cp_ptwt": 10, "demo_unfolded_sr": 54, "demo_unsur": [46, 47, 72], "demo_vanilla_pnp": [31, 32, 72], "demo_vanilla_unfold": [54, 55, 72], "demo_wavelet_prior": [22, 23, 72], "demonstr": [2, 17, 39, 40, 44, 68], "demosaick": 81, "den": 35, "denois": [6, 7, 10, 19, 23, 25, 26, 27, 28, 29, 31, 32, 33, 37, 39, 41, 44, 47, 49, 50, 53, 54, 59, 60, 63, 64, 66, 67, 68, 69, 71, 72, 73, 76, 79, 81, 85, 93, 97, 99, 101, 105, 106, 107, 128, 130, 135, 137, 138, 139, 141, 142, 148, 149, 150, 151, 152, 155, 156, 157, 158, 159, 160, 161, 168, 169, 170, 171, 172, 173, 175, 188, 204, 207, 210, 212, 213, 214, 218, 219, 220, 229, 230, 264, 265, 266, 268, 269, 270, 271, 287, 288, 289, 291, 292, 294, 296], "denoised_imag": 58, "denoiser_arg": 141, "denoiser_complex": 13, "denoiser_kwarg": 141, "denoiser_nam": 30, "denoisernam": 141, "denoising_color": 148, "denoising_grai": 148, "denoising_r": 148, "denorm": 187, "denot": [11, 89, 119, 194, 200, 201, 211], "dens": 166, "densiti": [25, 187, 255, 262], "depend": [0, 25, 33, 63, 64, 69, 77, 101, 109, 110, 111, 137, 159, 228, 260, 266, 268], "deprec": [39, 102, 272], "depth": [11, 18, 19, 20, 29, 49, 54, 66, 72, 101, 138, 145, 146, 149, 150, 211, 218, 224, 253, 292, 299], "deq": [19, 55, 69, 71, 72, 73, 79, 85, 93, 104, 138, 168, 169, 170, 201, 204, 210, 213, 218, 286, 288, 292, 296], "deq_build": [49, 69], "derain": 148, "deriv": [68, 106], "descent": [5, 19, 21, 22, 31, 32, 46, 51, 59, 64, 71, 72, 138, 143, 159, 169, 170, 171, 176, 179, 188, 193, 195, 199, 201, 204, 213, 218, 220, 234, 287, 288, 289, 292, 294, 296, 297], "describ": [10, 27, 37, 42, 65, 66, 160, 166, 212, 213, 214, 218, 264, 265, 266], "descript": [39, 56, 151, 152, 175, 254, 255, 262], "design": [13, 58, 60, 99, 101, 105, 106, 107], "desir": [2, 56, 73, 85, 134, 227, 254, 296], "detach": [9, 15, 25, 35, 36], "detail": [25, 35, 36, 39, 41, 44, 53, 58, 59, 61, 66, 69, 73, 86, 89, 92, 95, 97, 98, 106, 107, 122, 135, 137, 138, 139, 142, 149, 150, 151, 152, 157, 159, 160, 161, 175, 188, 198, 209, 214, 248, 252, 253, 258, 261, 271, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 296, 299], "detector": [11, 228, 237], "detector_radiu": [228, 237], "detector_spac": [228, 237], "determin": [166, 197, 250], "determinist": [63, 66, 68, 73, 213, 218, 281], "dev": [34, 37], "develop": 56, "deviat": [5, 9, 13, 15, 20, 21, 22, 24, 27, 28, 30, 31, 34, 35, 36, 58, 63, 64, 99, 105, 106, 159, 160, 185, 188, 206, 210, 216, 219, 224, 229, 234, 258, 271, 287, 288, 289], "devic": [0, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 15, 16, 20, 21, 22, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 57, 59, 62, 73, 85, 86, 98, 109, 110, 111, 112, 113, 114, 115, 116, 118, 123, 128, 131, 135, 138, 139, 142, 143, 148, 149, 153, 154, 156, 157, 160, 161, 166, 175, 197, 200, 201, 202, 203, 205, 207, 208, 212, 215, 216, 221, 222, 223, 224, 225, 226, 228, 231, 236, 237, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 262, 263, 264, 265, 266, 271, 273, 274, 275, 282, 283, 284, 285, 287, 289, 291, 292, 293, 294], "device_count": 62, "device_id": 62, "df": 92, "df73285e": 27, "dhariw": 58, "diag": [4, 92, 196, 202, 204, 212, 217], "diagnost": 80, "diagon": [33, 66, 92, 102, 212, 246, 247], "dicom": 80, "dict": [28, 73, 79, 127, 159, 162, 165, 188, 189, 190, 191, 192, 193, 196, 218, 228, 237, 249, 250, 251, 252, 253, 256, 259, 263, 273, 281, 286, 287, 288, 289, 296, 297, 300, 301], "dict_kei": [4, 11, 252, 253, 257, 258, 260, 261, 263], "dict_param": 66, "dictionari": [4, 11, 20, 28, 29, 49, 50, 51, 54, 64, 66, 73, 159, 162, 165, 188, 189, 190, 191, 192, 193, 196, 218, 250, 251, 252, 253, 257, 258, 260, 261, 263, 271, 287, 288, 289, 297, 300], "dictionnari": 0, "diff": [34, 258], "diffeomorph": [17, 68, 274], "differ": [2, 4, 5, 7, 11, 13, 24, 30, 36, 42, 43, 50, 51, 54, 66, 68, 70, 73, 76, 77, 95, 96, 97, 101, 108, 136, 150, 151, 152, 173, 216, 249, 258, 264, 265, 277, 290], "differenti": [36, 64, 88, 169, 170, 171, 190, 213, 218, 265, 269, 270], "diffpir": [19, 36, 38, 71, 72, 137, 169, 201, 204, 210, 213, 218, 292, 294, 296], "diffract": [18, 19, 72, 200, 213, 218, 252, 253, 260, 292, 296, 299], "diffraction_gener": [4, 11], "diffractionblur": 4, "diffractionblurgener": [4, 226, 253, 257, 261], "diffractionblurgenerator3d": 11, "diffunet": [35, 36, 58], "diffus": [19, 35, 38, 71, 72, 135, 137, 204, 210, 212, 213, 218, 264, 265, 266, 267, 268, 292, 294, 296], "diffusion_ffhq_10m": 36, "diffusion_step": 35, "diffusionsampl": [34, 67], "digit": 15, "dih": 17, "dihedr": 17, "dilat": [9, 278], "dim": [5, 9, 14, 15, 17, 34, 36, 37, 66, 120, 121, 122, 141, 148, 149, 150, 154, 213, 227, 231, 256, 276, 280, 281, 290], "dim_hid": 129, "dim_input": 129, "dim_mid": 129, "dimens": [0, 6, 21, 27, 30, 39, 49, 50, 61, 65, 68, 86, 98, 102, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 131, 134, 137, 139, 143, 146, 150, 153, 154, 156, 161, 173, 175, 183, 184, 196, 197, 204, 208, 212, 221, 223, 227, 231, 245, 249, 250, 251, 254, 255, 256, 259, 262, 275, 280, 281, 282, 283, 284, 285, 290, 298, 301], "dimension": [228, 255, 262], "dinv": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 57, 58, 59, 60, 61, 62, 64, 66, 69, 99, 101, 102, 159, 162, 169, 185, 264, 266, 289], "dinv_dataset": 85, "dinv_dataset0": [27, 30], "dinv_dataset_path": [6, 27, 30], "dir": [27, 30, 57], "dirac": 0, "dirac_comb": [4, 226], "dirac_lik": 0, "direct": [11, 39, 189, 253, 281], "directli": [0, 4, 11, 13, 52, 61, 71, 122, 137, 150, 188, 208, 215, 223, 287, 288, 289], "directori": [56, 57, 73, 74, 75, 76, 78, 80, 81, 83, 84, 271, 300], "disabl": [16, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 102], "discard": [131, 268, 269, 270], "discord": [56, 71], "discrep": [59, 63, 64, 159], "discret": [0, 25, 202, 208, 215, 221, 223], "discrimin": [2, 58, 60, 109, 110, 111, 112, 113, 114, 115, 116, 133, 140, 147, 273], "discriminatorloss": [112, 115], "disk": [8, 74, 75, 76, 83, 84], "displai": [6, 8, 39, 40, 73, 131, 200, 201, 207, 301], "display_losses_ev": [73, 273], "distanc": [29, 60, 61, 63, 64, 117, 159, 169, 177, 179, 182, 228, 237], "distancenam": [64, 190], "distinct": [10, 50, 51, 52, 53, 54, 64, 159, 188, 287, 288, 289], "distort": 126, "distribut": [11, 25, 33, 34, 37, 45, 46, 63, 67, 101, 139, 161, 172, 206, 209, 212, 251, 255, 256, 264, 265, 266, 267, 268, 269, 270], "distributeddataparallel": 62, "div": [176, 177], "div2k_train_hr": 75, "div2k_valid_hr": 75, "diverg": [64, 105, 106, 107, 169, 176, 177, 179, 180], "divers": 2, "divid": [86, 249, 290], "divis": [137, 148], "dncnn": [28, 29, 31, 37, 39, 41, 49, 54, 58, 60, 69, 101, 289, 291], "dncnn_sigma2_lipschitz_color": 37, "dncnn_sigma2_lipschitz_grai": 28, "do": [2, 8, 17, 27, 30, 31, 39, 58, 61, 86, 98, 156, 159, 170, 281], "doc": [8, 17, 40, 41, 56, 66, 73, 101, 122, 127, 141, 274], "document": [53, 56, 62, 63, 99, 105, 106, 107, 119, 190, 211, 224], "doe": [2, 20, 66, 88, 89, 92, 101, 120, 121, 122, 126, 130, 138, 183, 194, 209, 213, 218, 256, 274, 287, 289], "doesn": [6, 60, 172, 227], "doi": [11, 138, 228, 237], "domain": [0, 25, 50, 51, 65, 66, 102, 130, 221], "don": [25, 39, 41, 53, 74, 126, 227, 298], "done": [4, 13, 16, 21, 22, 34, 35, 36, 44, 46, 49, 50, 51, 52, 53, 54, 56, 57, 66, 70, 73, 102, 156, 216], "dongdong": 71, "dose": 214, "dossal": 192, "dot": [42, 95, 96, 157], "doubl": [80, 213], "dougla": [54, 188, 191, 287, 288, 289], "down": [30, 281], "download": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 57, 58, 59, 74, 75, 76, 77, 78, 80, 81, 83, 84, 135, 137, 138, 139, 142, 148, 149, 150, 161, 264, 266], "download_and_extract_arch": [2, 40], "download_lipschitz": [28, 37, 138], "downsampl": [12, 15, 25, 30, 49, 54, 135, 142, 155, 213, 216, 232, 233, 235], "downsample_mod": [135, 142], "downscal": 40, "dp": [19, 38, 72, 137, 169, 204, 212, 213, 218, 292, 294, 296], "dpi": [296, 298, 301], "dpir": [19, 32, 58, 71, 72, 79, 85, 135, 159, 168, 169, 170, 188, 201, 204, 210, 213, 218, 271, 292], "dr": [0, 22, 54, 64, 188, 191, 287, 288, 289], "drawback": 62, "drive": 25, "driven": [56, 143], "drop": 149, "drop_last": 25, "drop_path_r": [149, 150], "drop_rat": 150, "dropout": 150, "drunet": [13, 27, 34, 49, 54, 58, 62, 142, 160, 264, 266], "drunet_dataset": 8, "drunet_deepinv_gray_finetune_26k": 13, "dst": 202, "dtype": [4, 11, 15, 25, 35, 36, 51, 79, 85, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 159, 162, 202, 213, 222, 225, 228, 231, 236, 237, 251, 252, 253, 258, 260, 263, 293, 294], "du": [89, 92], "dual": [19, 32, 53, 55, 59, 64, 72, 73, 93, 104, 138, 145, 146, 148, 151, 152, 159, 165, 168, 169, 170, 183, 184, 188, 190, 204, 210, 213, 218, 225, 228, 287, 289, 292, 294, 296, 297], "dual_pixel_task": 148, "due": [29, 39, 202, 228], "dummi": 66, "dure": [4, 25, 35, 36, 39, 40, 41, 50, 52, 53, 60, 73, 79, 85, 95, 96, 99, 101, 102, 148, 155, 159, 212], "dwt": 156, "dx": [21, 51, 151, 152, 173], "dynam": [0, 4, 15, 65, 66, 86, 98, 102, 153, 208, 227, 249, 255, 256, 259], "dynamic_model": [39, 86, 98], "dynamicmri": [86, 98, 223], "e": [0, 2, 6, 9, 11, 13, 14, 17, 19, 20, 25, 28, 33, 34, 35, 39, 40, 41, 42, 43, 45, 46, 57, 58, 60, 61, 64, 65, 67, 68, 69, 73, 74, 75, 76, 77, 78, 79, 81, 83, 84, 85, 86, 88, 89, 92, 94, 95, 96, 97, 98, 99, 102, 104, 110, 112, 113, 114, 115, 116, 117, 122, 125, 131, 135, 138, 139, 141, 142, 151, 152, 154, 156, 157, 159, 161, 162, 172, 175, 183, 184, 185, 188, 200, 201, 202, 203, 205, 206, 208, 212, 213, 215, 217, 220, 221, 223, 227, 228, 231, 239, 242, 249, 251, 256, 259, 260, 261, 264, 268, 269, 270, 273, 275, 276, 277, 280, 281, 283, 286, 287, 288, 289, 296, 301], "each": [0, 4, 10, 24, 33, 35, 39, 42, 43, 45, 50, 51, 52, 53, 54, 61, 64, 66, 73, 76, 77, 80, 85, 86, 87, 90, 91, 97, 98, 100, 106, 107, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 130, 136, 141, 145, 146, 147, 148, 149, 150, 156, 157, 159, 160, 161, 162, 165, 188, 197, 213, 218, 221, 238, 239, 240, 241, 242, 243, 245, 249, 257, 261, 271, 276, 278, 281, 287, 288, 289, 290, 296, 298, 299], "earli": [7, 30, 136, 160], "early_stop": [0, 5, 13, 21, 22, 27, 28, 29, 30, 31, 159, 162], "easi": [33, 71], "easili": [2, 16, 17, 35, 36, 44, 53, 56, 57, 59, 68, 70, 85], "ect": 64, "edg": 245, "edongdongchen": 140, "edsr": 78, "edu": 77, "ee": 81, "effect": [4, 35, 40, 44, 76, 102, 139, 161, 167, 212, 275, 278, 281, 284], "effic": 5, "effici": [33, 58, 66, 99, 102, 148, 202, 204, 208, 213, 218, 225, 228, 281], "effort": 7, "eg": 209, "egg": [19, 71], "ei": [17, 40, 41, 68, 88, 95, 140], "eigen": 261, "eigenvalu": 92, "eigenvector": 196, "eiloss": [17, 40, 41, 68, 95], "either": [24, 58, 61, 62, 64, 69, 73, 77, 85, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 137, 148, 150, 154, 156, 157, 158, 159, 175, 188, 208, 215, 223, 238, 239, 240, 241, 242, 243, 245, 246, 247, 250, 251, 256, 287, 288, 289, 296, 298, 299, 301], "elaps": [14, 33, 34, 37], "element": [13, 20, 50, 54, 63, 119, 129, 156, 202, 211, 216, 222, 257, 276, 290], "elementwis": [45, 46, 106, 107, 212], "ell": [20, 101, 209], "ell_": 163, "ell_0": [156, 157], "ell_1": [64, 88, 94, 95, 96, 97, 104, 151, 156, 157, 164, 184], "ell_2": [36, 53, 64, 108, 160, 161, 163, 183, 184, 185, 213], "ell_p": 119, "els": [0, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 20, 21, 22, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 73, 159, 183, 264, 266, 286, 287], "elu": [135, 142], "em": 197, "email": 56, "embed": [137, 150], "embed_dim": 150, "emiss": [0, 11], "emission_wavelength": [252, 253], "emit": 11, "empti": [212, 223, 250, 254, 262], "en": [4, 11, 127, 198, 205, 209, 252], "enabl": [5, 8, 36, 66, 148, 286, 287], "enable_grad": 36, "encapsul": 273, "encod": [0, 135, 148, 221], "encompass": [287, 289], "encount": 155, "end": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 59, 64, 69, 73, 139, 147, 159, 161, 175, 183, 189, 190, 191, 192, 193, 194, 195, 196, 213, 218, 232, 233, 234, 235, 265, 266, 286, 287], "enforc": [59, 63, 64, 94, 144, 159], "enhanc": 140, "enough": 64, "ensur": [4, 5, 6, 7, 11, 13, 15, 16, 20, 21, 22, 27, 28, 29, 30, 31, 37, 39, 41, 42, 43, 45, 46, 49, 50, 51, 52, 53, 54, 58, 197, 255], "entir": [58, 281], "entri": [33, 64, 105, 106, 107, 181, 197, 202, 212, 213, 218, 225, 270], "entropi": [29, 179, 180], "enumer": 73, "envelop": [67, 172, 194], "environ": 296, "ep": [35, 131, 198], "epll": [19, 26, 58, 72, 197, 204, 206, 210, 212, 213, 218, 294, 296], "epll_batch_s": 25, "epll_dataload": 25, "epll_max_it": 25, "epll_num_compon": 25, "epll_prior": 25, "epoch": [2, 16, 25, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 73, 87, 90, 91, 100, 101, 103, 272, 273], "epoch_thresh": 103, "eprint": [29, 179], "eps_anderson_acc": [159, 162], "eps_anderson_acc_backward": 286, "epsilon": [0, 21, 22, 24, 33, 36, 101, 106, 151, 210, 219, 229, 230], "epsilon_adjoint": 151, "epub": 138, "eq": [11, 25, 59, 64, 141, 159], "equal": [17, 44, 86, 98, 99, 110, 156, 172, 211, 212, 216, 225, 228, 231, 254, 255, 298], "equat": [0, 20, 21, 22, 25, 35, 36, 50, 53, 59, 64, 69, 159, 175, 189, 190, 191, 192, 193, 194, 195, 196, 232, 233, 234, 235, 265, 266, 286], "equilibrium": [19, 55, 71, 72, 73, 79, 85, 93, 104, 138, 168, 169, 170, 201, 204, 210, 213, 218, 286, 288, 292, 296], "equispac": [25, 254], "equispacedmaskgener": 15, "equival": [12, 36, 99, 120, 121], "equivari": [18, 19, 47, 68, 72, 73, 79, 84, 85, 88, 93, 94, 95, 141, 144, 155, 204, 210, 212, 213, 215, 218, 227, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 287, 291, 292, 294, 296], "equivariantdenois": [17, 58, 68], "error": [16, 34, 35, 37, 44, 46, 50, 53, 73, 86, 88, 94, 95, 96, 97, 98, 102, 104, 118, 119, 120, 121, 123, 124, 170, 228, 272, 281], "escand": 248, "especi": 60, "esrgan": 140, "est": [0, 10, 28, 30, 31, 52, 53, 159, 162, 165, 189, 190, 191, 192, 193], "est_sigma": 46, "estim": [2, 13, 24, 25, 28, 35, 36, 45, 46, 58, 59, 64, 85, 101, 105, 106, 107, 122, 123, 128, 137, 139, 153, 161, 165, 187, 189, 190, 191, 192, 193, 197, 204, 211, 213, 266, 268, 270, 271], "estimt": 24, "et": [0, 2, 5, 7, 17, 21, 27, 30, 35, 36, 39, 40, 58, 65, 102, 112, 113, 114, 115, 116, 126, 130, 131, 133, 134, 136, 137, 140, 147, 151, 155, 255, 256, 274, 275, 284], "eta": [33, 36, 37, 148, 159, 213, 218, 264, 265, 269, 270], "eta_0": 33, "eta_backtrack": 159, "etab": [34, 264], "etc": [2, 12, 14, 33, 64, 66, 67, 68, 69, 70, 71, 85, 88, 110, 162, 271, 277, 290], "ethz": 81, "euclidean": [17, 40, 68, 177, 188, 275, 288, 289], "eugenesiow": 84, "eval": [2, 16, 27, 30, 31, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 73, 102], "eval_dataload": [2, 16, 40, 42, 43, 45, 49, 50, 51, 52, 54, 73, 272, 273], "eval_interv": [73, 273], "eval_metr": 73, "eval_mod": [89, 92], "eval_n_sampl": [44, 99, 102], "eval_psnr": 273, "eval_split_input": [44, 102], "eval_split_output": [44, 102], "evalu": [2, 14, 25, 34, 36, 44, 49, 50, 51, 61, 66, 69, 73, 84, 85, 92, 98, 101, 102, 123, 125, 127, 152, 162, 166, 167, 197, 213, 218, 255, 262, 271, 272, 273, 281], "even": [9, 29, 36, 98, 148, 238, 259], "evenli": 85, "eventu": [2, 35], "everi": [13, 36, 68, 73, 129, 132, 134, 136, 143, 144, 145, 146, 149, 154, 236, 237, 273], "evid": 33, "evlauaton": 162, "exact": [2, 8, 58, 202, 213, 216, 228, 277, 281], "exactli": [86, 197, 249, 251], "exampl": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 64, 66, 68, 69, 71, 72, 74, 75, 76, 77, 78, 80, 81, 83, 90, 91, 92, 99, 100, 101, 103, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 139, 153, 154, 162, 163, 229, 231, 263, 280], "except": [120, 121, 122, 245], "excit": 11, "exclus": [249, 259], "exdb": [44, 46, 50], "execut": [1, 3, 18, 23, 25, 26, 32, 38, 39, 41, 47, 48, 53, 55, 72], "exist": [12, 39, 61, 65, 66, 68, 69, 74, 75, 78, 79, 81, 83, 84, 86, 98, 122, 202, 208, 212, 213, 217, 218, 222, 225, 228], "exp": [13, 186, 211, 214, 234, 258], "expand": [4, 11, 281], "expans": [37, 248], "expect": [19, 25, 26, 39, 72, 75, 81, 139, 148, 161, 197, 204, 206, 210, 212, 213, 218, 255, 294, 296], "experi": [0, 7, 40, 136], "experiment": [25, 39, 41, 53], "explain": [7, 71, 301], "explan": 61, "explicit": [15, 18, 19, 30, 51, 66, 71, 72, 79, 85, 159, 169, 170, 188, 201, 204, 210, 213, 218, 234, 269, 271, 292], "explicit_prior": [5, 30, 170], "explicitli": [25, 39, 41, 53], "exploit": [13, 14, 33, 43, 45], "explor": [4, 11], "expon": 126, "export": 25, "express": [11, 204], "ext": 57, "extend": [0, 2, 20, 24, 39, 52, 62, 95], "extens": 301, "extra": [39, 66, 99, 213, 281], "extract": [2, 13, 24, 25, 40, 44, 46, 50, 139, 161, 298], "extract_loc": [0, 298], "extract_s": [0, 298], "ey": 215, "f": [0, 4, 7, 9, 11, 12, 13, 14, 17, 21, 22, 25, 28, 29, 31, 33, 34, 35, 37, 46, 57, 59, 61, 64, 68, 69, 73, 89, 92, 106, 144, 151, 159, 162, 165, 169, 176, 181, 184, 185, 188, 189, 190, 191, 192, 193, 194, 195, 196, 199, 204, 208, 213, 215, 221, 223, 227, 235, 266, 268, 281, 287, 288, 289], "f_": [7, 16, 17, 68, 281], "f_0": 159, "f_fn": [28, 159, 165, 188, 288, 289], "f_k": 162, "f_matern": 258, "f_step": [27, 28, 30, 31, 52], "f_x": 258, "f_y": 258, "face": [8, 36], "facebookresearch": 254, "factor": [0, 12, 15, 24, 30, 39, 50, 51, 54, 99, 150, 183, 185, 207, 213, 216, 232, 233, 235, 250, 267, 275, 278, 282, 285], "factori": 273, "factory_kwarg": 253, "fail": [44, 46, 50, 155], "faint": 0, "faintest": 0, "fake": [109, 110, 111, 147], "fake_label": 110, "fall": 177, "fals": [0, 2, 4, 5, 6, 10, 15, 16, 20, 22, 24, 25, 27, 28, 30, 31, 35, 36, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 57, 64, 73, 74, 75, 76, 77, 78, 79, 81, 83, 84, 85, 86, 88, 89, 92, 98, 102, 105, 106, 110, 118, 119, 120, 121, 122, 123, 125, 127, 128, 131, 136, 137, 141, 147, 148, 149, 150, 151, 152, 155, 159, 162, 165, 166, 167, 175, 188, 189, 190, 191, 197, 202, 220, 221, 222, 223, 225, 228, 236, 237, 238, 241, 245, 249, 264, 265, 266, 267, 268, 269, 270, 271, 273, 277, 281, 286, 287, 288, 289, 290, 293, 294, 296, 298, 299, 301], "famili": 4, "familiar": 56, "fan": [228, 237], "fan_beam": [228, 237], "fan_paramet": [228, 237], "fashion": [53, 69, 70, 202, 212, 217, 222, 225, 251, 256, 290], "fast": [15, 50, 51, 129, 152, 192, 201, 202, 208, 212, 215, 223, 225, 274, 279], "fasten": [5, 6, 16, 27, 28, 30, 31, 41, 43, 45, 46, 49, 50, 51, 53, 54], "faster": [0, 4, 21, 22, 41, 56, 77, 228, 236, 237], "fastmri": [39, 41, 77, 125, 127, 254], "fastmri_knee_singlecoil": [39, 41], "fbp": 25, "fbpconvnet": 128, "fc": [4, 11, 252, 253, 261], "featur": [25, 39, 41, 53, 129, 145, 146], "feed": 131, "feedforward": 148, "fenchel": [28, 190], "fetch": [5, 6, 21, 22, 27, 28, 31], "few": [8, 16, 25, 39, 53, 213], "ffhq": [36, 58, 137], "ffn_expansion_factor": 148, "fft": [0, 4, 11, 66, 200, 201, 221, 239, 240, 242, 243], "fidel": [0, 5, 10, 13, 21, 22, 27, 28, 29, 30, 31, 49, 50, 51, 53, 54, 59, 63, 69, 85, 139, 159, 160, 161, 162, 165, 181, 182, 183, 184, 185, 188, 190, 265, 266, 287, 288, 289], "field": [76, 77, 80, 151, 152, 261, 274], "fifa": [7, 33, 34, 37], "fig": 296, "figsiz": [11, 20, 35, 296, 298, 299, 301], "figur": [9, 35, 148, 296, 298, 299, 301], "file": [1, 3, 8, 18, 23, 25, 26, 32, 38, 39, 41, 47, 48, 53, 55, 56, 57, 64, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 101, 139, 148, 161, 166, 202, 212, 217, 222, 225, 293, 294, 301], "file1000005": 77, "file_nam": [10, 39, 41, 42, 43, 44, 45], "file_typ": 0, "filenam": [76, 80, 85, 298, 301], "fill": [12, 39, 295, 302, 303, 304], "filter": [4, 5, 7, 11, 12, 15, 17, 21, 25, 27, 29, 30, 33, 35, 49, 52, 54, 59, 66, 130, 144, 200, 201, 207, 213, 216, 224, 226, 228, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 252, 253, 257, 258, 260, 261], "filter_0": [4, 11], "filter_90": 4, "filter_rgb": 4, "filter_torch": 5, "final": [4, 11, 13, 25, 61, 65, 135, 137, 138, 142, 149, 150], "find": [2, 52, 131, 137, 196, 218, 224, 266, 286], "find_nearest": [35, 137, 266], "find_spec": 10, "fine": [2, 25, 39], "finish": [30, 33, 34, 37, 165], "finit": [51, 151, 152, 173], "firm": [58, 89], "firmli": 37, "first": [0, 2, 4, 9, 11, 12, 13, 15, 17, 20, 21, 22, 35, 36, 39, 51, 52, 64, 65, 108, 139, 148, 159, 161, 165, 197, 208, 215, 216, 223, 224, 225, 227, 231, 271, 281, 296, 299], "firstli": 35, "fista": [0, 192], "fit": [25, 70, 131, 197], "fix": [8, 10, 27, 49, 50, 51, 53, 54, 64, 69, 159, 162, 165, 208, 213, 215, 218, 223, 250, 254, 255, 262, 275, 281, 286, 287], "fixed_point": [27, 30, 31], "fixedpoint": [27, 30, 31, 64, 69, 159, 165, 286], "flat": 251, "flatten": [20, 34, 37, 39, 64, 65, 153, 156, 157, 166, 175, 208, 223, 227, 281, 290], "flatten_c": 227, "flatten_coeff": 156, "flatten_video_input": 281, "flavour": [60, 110], "fledg": 34, "flexibl": [58, 73, 296], "flickr2k": 78, "flip": [25, 39, 41, 53, 141, 202, 276], "float": [0, 15, 51, 64, 73, 77, 88, 89, 92, 96, 97, 99, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 125, 126, 127, 130, 131, 135, 136, 138, 139, 142, 143, 148, 149, 150, 151, 152, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 168, 169, 172, 173, 174, 175, 176, 183, 184, 185, 186, 187, 188, 197, 198, 199, 201, 202, 204, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 221, 223, 224, 229, 230, 234, 235, 236, 237, 244, 245, 250, 251, 252, 253, 254, 255, 256, 257, 258, 262, 263, 264, 265, 266, 267, 268, 269, 270, 273, 275, 277, 279, 282, 283, 284, 285, 286, 287, 288, 289, 298], "float16": 137, "float32": [4, 11, 25, 35, 36, 79, 137, 202, 225, 228, 231, 236, 237, 251, 252, 253, 258, 260, 263, 293, 294], "float64": [2, 5, 16, 27, 30, 39, 41, 42, 43, 44, 45, 46, 52, 53, 159, 162], "flow": [25, 166], "fluoresc": [11, 76], "fly": [4, 52, 66, 73, 125, 127, 208, 212, 215, 223], "fn": [5, 163, 164, 166, 167, 169, 173, 174, 175, 177, 178, 179, 180, 182], "fname": [76, 77], "fne": 89, "fnejacobianspectralnorm": 37, "focu": 11, "focuss": 77, "folder": [27, 30, 49, 50, 51, 57, 74, 75, 76, 78, 79, 83, 84, 85], "foldernam": [76, 80], "follow": [0, 2, 4, 5, 11, 20, 21, 22, 25, 27, 28, 31, 33, 35, 36, 37, 50, 52, 53, 56, 58, 59, 63, 64, 66, 68, 69, 71, 73, 74, 75, 77, 78, 81, 83, 84, 93, 105, 106, 107, 110, 114, 156, 159, 175, 203, 209, 235, 248, 252, 265, 266, 270, 287], "font": 35, "fontsiz": [20, 296, 299], "forbidden": [44, 46, 50], "forc": [59, 143], "forget": 170, "fork": 56, "form": [14, 16, 20, 34, 40, 51, 56, 59, 64, 66, 69, 156, 157, 159, 162, 165, 183, 184, 186, 201, 202, 213, 218, 228, 287], "formal": 20, "format": [0, 8, 20, 24, 25, 57, 73, 85, 156], "former": [36, 62, 129, 132, 134, 143, 144, 145, 146, 149, 154, 236, 237], "formul": 68, "formula": [36, 37, 67, 101, 109, 111, 169, 172, 202, 207, 213, 218, 228], "forw": [2, 59, 63, 66, 88, 94, 96, 102, 114, 182, 183, 184, 185, 217, 218], "forw_model": 178, "forward": [2, 4, 5, 6, 18, 19, 29, 30, 36, 41, 44, 50, 51, 52, 57, 58, 60, 62, 64, 67, 68, 69, 71, 72, 73, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 122, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 161, 162, 165, 166, 169, 182, 183, 184, 189, 190, 191, 192, 193, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 234, 236, 237, 248, 250, 254, 255, 260, 262, 264, 265, 266, 268, 270, 271, 272, 273, 281, 286, 287, 289, 290, 292, 294, 296], "forward_denois": 137, "forward_diffus": 137, "forward_restorm": 148, "found": [15, 34, 39, 66, 157], "four": 13, "fourier": [0, 5, 15, 66, 208, 215, 221, 223], "fov": 76, "fr": [29, 179], "frac": [0, 5, 20, 21, 22, 33, 35, 36, 37, 44, 45, 46, 50, 51, 59, 67, 69, 89, 92, 99, 101, 102, 105, 106, 107, 125, 141, 151, 152, 159, 163, 169, 172, 174, 177, 182, 183, 184, 185, 202, 204, 213, 214, 218, 219, 220, 222, 228, 234, 258, 265, 266, 269, 270, 286], "fraction": [77, 250, 279, 298], "frame": [39, 98, 153, 223, 227, 301], "framework": [13, 40, 60, 71, 176, 273, 275, 282, 283, 284, 285], "fraunhoff": [252, 253], "free": [40, 44, 86, 98, 148, 155, 249, 259, 292], "freeli": 36, "freia": 166, "freifeld": 274, "freq": [250, 254], "freq_plot": [73, 273], "frequenc": [0, 4, 11, 28, 73, 250, 252, 253, 254, 255, 262], "fresnel": [4, 11, 252, 253], "frobeniu": 151, "from": [0, 1, 2, 3, 4, 5, 6, 9, 10, 11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 161, 162, 163, 165, 166, 170, 182, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 225, 226, 227, 228, 229, 230, 231, 236, 237, 245, 249, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 270, 273, 274, 275, 276, 277, 281, 282, 283, 284, 285, 286, 291, 292, 293, 294, 296, 298, 299, 301], "from_numpi": [0, 11, 20, 35, 36], "front": [169, 183], "fstep": [52, 64], "fstepcv": 28, "fstephq": 27, "fsteppdnet": 52, "fsteppgd": [30, 31], "full": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 58, 61, 71, 78, 86, 88, 96, 98, 101, 102, 275, 282, 283, 285], "fulli": [34, 41, 42, 43, 45, 46, 102, 129, 143, 155], "funcanim": 301, "function": [0, 2, 4, 5, 6, 7, 8, 9, 11, 13, 14, 15, 16, 17, 21, 22, 25, 27, 28, 30, 35, 36, 39, 40, 41, 42, 46, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 63, 64, 68, 69, 70, 73, 74, 75, 76, 77, 78, 80, 81, 83, 84, 85, 86, 87, 88, 89, 92, 93, 95, 96, 97, 99, 102, 105, 109, 110, 111, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 131, 132, 134, 136, 137, 138, 141, 143, 144, 145, 146, 149, 152, 154, 159, 161, 162, 163, 165, 166, 167, 169, 170, 175, 176, 182, 183, 185, 187, 188, 189, 190, 191, 196, 197, 198, 199, 200, 202, 204, 213, 218, 224, 227, 228, 231, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 252, 253, 255, 258, 260, 262, 267, 268, 269, 270, 271, 272, 273, 281, 286, 288, 289, 301], "function_handl": [268, 269, 270], "functool": 122, "further": [2, 13, 68, 274, 276, 277, 279, 280], "furthermor": [44, 130], "fusion": 126, "futur": [25, 39, 41, 53, 56, 272], "futurewarn": [25, 39, 41, 53], "fx_t": 208, "g": [0, 2, 6, 9, 11, 17, 19, 20, 21, 22, 25, 28, 30, 33, 36, 39, 42, 50, 51, 57, 58, 59, 60, 61, 64, 68, 69, 73, 74, 75, 76, 77, 78, 79, 81, 83, 84, 85, 86, 88, 94, 95, 96, 97, 98, 102, 104, 110, 122, 125, 131, 139, 141, 151, 152, 154, 159, 161, 162, 163, 164, 165, 167, 170, 171, 173, 174, 175, 188, 189, 190, 191, 192, 193, 194, 195, 196, 200, 201, 205, 206, 208, 209, 212, 215, 220, 221, 223, 227, 228, 231, 234, 251, 256, 260, 261, 265, 267, 273, 276, 281, 287, 288, 289, 301], "g1": 257, "g2": 257, "g_": [20, 50], "g_first": [5, 10, 30, 51, 53, 64, 165, 188, 189, 190, 191, 287, 288, 289], "g_i": [42, 96, 281], "g_param": [10, 13, 27, 28, 29, 30, 31, 33, 49, 51, 53, 54, 59, 64, 69, 162, 188, 287, 289], "g_statist": [267, 268, 269, 270], "g_step": [27, 28, 30, 31, 52], "gain": [15, 29, 45, 106, 107, 187, 219, 220], "galleri": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 72, 296, 299], "game": [2, 60], "gamma": [2, 21, 22, 28, 35, 43, 45, 50, 51, 59, 64, 97, 101, 105, 106, 107, 152, 156, 159, 163, 164, 168, 169, 173, 174, 175, 176, 183, 184, 185, 189, 191, 192, 193, 194, 195, 196, 204, 207, 209, 213, 219, 220, 287], "gamma_backtrack": 159, "gamma_distribut": 209, "gammanois": 101, "gan": [60, 109, 110, 111, 112, 113, 273], "gaussian": [0, 5, 6, 7, 9, 12, 13, 15, 17, 20, 21, 22, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 45, 46, 49, 50, 51, 54, 63, 66, 67, 76, 99, 101, 105, 106, 139, 161, 172, 185, 197, 202, 206, 207, 210, 213, 216, 219, 222, 224, 229, 234, 255, 256, 258, 263, 266, 270, 303], "gaussian_blur": [4, 5, 15, 29, 66], "gaussian_filt": [200, 201], "gaussianmaskgener": [15, 39], "gaussianmixturemodel": [139, 161], "gaussiannois": [5, 6, 7, 13, 14, 15, 17, 20, 21, 22, 24, 27, 28, 30, 31, 33, 34, 35, 37, 44, 46, 49, 52, 54, 57, 59, 66, 99, 101, 206, 216, 264, 266], "gaussiansplittingmaskgener": 44, "gb": 137, "gd": [13, 49, 188, 193, 286, 287, 288, 289], "gdfn": 148, "gen": [212, 251, 256], "gener": [0, 8, 10, 15, 17, 19, 20, 24, 25, 28, 29, 30, 31, 36, 39, 40, 44, 52, 56, 57, 58, 60, 61, 69, 73, 79, 85, 86, 87, 88, 90, 95, 96, 98, 100, 101, 102, 105, 106, 107, 110, 111, 112, 113, 114, 115, 116, 126, 131, 133, 134, 136, 139, 140, 151, 161, 165, 166, 183, 184, 190, 202, 208, 209, 210, 212, 213, 214, 215, 218, 219, 220, 222, 223, 224, 225, 226, 229, 230, 231, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285], "generalis": 151, "generate_coeff": 252, "generate_dataset": [2, 5, 6, 16, 27, 30, 41, 42, 43, 44, 45, 46, 49, 50, 51, 53, 54, 57, 73, 79], "generated_dataset_path": 57, "generated_datasets_path": [49, 50, 51, 54], "generator2d": 253, "generator_col": 11, "generatorloss": [113, 114, 116], "generatormixtur": [4, 66, 260], "geometr": [40, 68, 141, 275, 282, 283, 285], "geometri": [40, 228, 237], "geq": [0, 99, 102, 105, 137, 187, 268, 269, 270], "get": [2, 9, 35, 36, 41, 42, 43, 44, 45, 46, 49, 50, 51, 54, 56, 73, 137, 159, 197, 265, 266, 281], "get_alpha": 35, "get_alpha_beta": 266, "get_alpha_prod": [137, 266], "get_beta": 36, "get_chain": 268, "get_cov": 197, "get_cov_inv_reg": 197, "get_degradation_url": 0, "get_dpir_param": 27, "get_freer_gpu": [2, 5, 6, 7, 9, 10, 11, 12, 13, 15, 16, 20, 21, 22, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 264, 266], "get_gspnp_param": 30, "get_image_dataset_url": 0, "get_image_url": [4, 13, 15, 17, 24, 28, 29, 31, 35, 36, 40, 118, 123], "get_model": 2, "get_noise_schedul": 266, "get_output": [30, 52, 159], "get_param": 281, "get_pdf": [255, 262], "get_sampl": 73, "get_samples_offlin": 73, "get_samples_onlin": 73, "get_weight": 197, "get_weights_url": [2, 10, 39, 40, 41, 42, 43, 44, 45], "gfp": 11, "gfz": [0, 221], "gif": 301, "git": [19, 71, 274], "github": [19, 25, 39, 41, 52, 53, 56, 58, 71, 83, 97, 137, 140, 150, 151, 152, 254, 256, 274], "give": [34, 80, 83, 84, 253, 275], "given": [2, 5, 11, 13, 20, 24, 25, 35, 67, 73, 77, 89, 92, 102, 159, 162, 167, 172, 190, 191, 192, 193, 194, 195, 196, 208, 209, 212, 213, 223, 224, 228, 237, 250, 251, 252, 253, 254, 256, 257, 262, 281, 290], "global": [4, 5, 6, 7, 11, 13, 15, 16, 20, 21, 22, 27, 28, 29, 30, 31, 37, 41, 42, 43, 45, 46, 49, 50, 51, 52, 53, 54, 274], "gmm": [24, 25, 139, 161, 197], "gmm_bsds_color2": 24, "gmm_lodopab_smal": [139, 161], "gmm_lodopab_small2": 25, "go": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 77], "goal": [21, 22], "good": [7, 13, 16, 53, 148, 228], "goodfellowliu": 78, "googl": [19, 25], "gp": 258, "gpu": [5, 6, 16, 27, 28, 30, 31, 41, 42, 43, 45, 46, 49, 50, 51, 53, 54, 85, 128, 135, 138, 142, 148, 149, 153, 154, 156, 157, 197, 205, 208, 212, 215, 223, 224, 228, 236, 237, 264, 271, 274, 292, 293, 294], "gpu_numb": 62, "grad": [0, 13, 33, 36, 64, 169, 170, 171, 172, 174, 176, 177, 179, 180, 182, 185], "grad_clip": [73, 273], "grad_conj": [169, 177, 179, 180], "grad_d": 182, "grad_f": 199, "grad_fn": [126, 203], "grad_ll": 36, "gradient": [5, 21, 22, 25, 28, 30, 31, 36, 37, 43, 46, 52, 54, 58, 59, 64, 69, 73, 88, 97, 105, 106, 131, 142, 151, 152, 162, 169, 170, 171, 174, 176, 177, 179, 180, 182, 185, 188, 193, 195, 198, 199, 202, 207, 213, 218, 228, 265, 273, 286, 287, 288, 289], "gradientstep": 30, "grai": [5, 6, 13, 15, 16, 21, 22, 27, 28, 29, 30, 31, 49, 52, 53, 54, 139, 161, 264, 266, 296, 298, 299], "grayscal": [4, 11, 12, 13, 14, 15, 24, 28, 31, 58, 59, 66, 203, 216, 293, 294], "great": 2, "greater": [102, 253], "green": 205, "grid": [0, 24, 25, 66, 221, 224, 261, 278, 296, 299], "grid_siz": 0, "ground": [2, 7, 16, 21, 22, 24, 25, 28, 29, 31, 33, 34, 35, 36, 37, 39, 40, 44, 49, 50, 51, 53, 54, 60, 73, 76, 77, 79, 86, 87, 98, 104, 112, 113, 124, 159, 162, 249, 259, 271, 273, 286, 287], "groundtruth": [20, 36, 39], "group": [17, 40, 41, 58, 68, 88, 95, 141, 276, 281], "grow": 20, "gsdrunet": [30, 58], "gsdrunet_torch": 30, "gspnp": 30, "gstep": [52, 64], "gstepcv": 28, "gstephq": 27, "gsteppdnet": 52, "gsteppgd": [30, 31], "gt": [0, 21, 22, 28, 29, 31, 50, 51, 76], "gu": [11, 27, 160], "guess": [0, 13, 46, 64, 131, 218, 265, 266], "guid": 102, "gz": [44, 46, 50, 81, 84], "h": [0, 9, 11, 15, 20, 25, 39, 51, 61, 64, 65, 68, 86, 98, 117, 119, 120, 121, 122, 124, 125, 126, 127, 136, 148, 150, 153, 154, 162, 167, 169, 176, 177, 179, 200, 201, 202, 205, 207, 208, 212, 215, 221, 222, 223, 224, 225, 226, 227, 231, 238, 239, 240, 241, 242, 243, 248, 249, 250, 251, 252, 254, 255, 256, 259, 261, 262, 281, 296, 299, 301], "h5": [27, 30, 57, 77], "h5py": [57, 77, 79, 85], "h_": [11, 169], "h_k": [226, 248], "ha": [0, 2, 5, 6, 7, 9, 12, 14, 16, 27, 29, 30, 34, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 81, 83, 84, 97, 102, 135, 156, 159, 162, 169, 198, 200, 201, 202, 207, 208, 212, 215, 216, 223, 225, 226, 228, 232, 233, 238, 240, 241, 242, 243, 248, 251, 264, 265, 296, 298, 299], "haar": 20, "hadamard": [15, 28, 225, 226, 248], "hal": 190, "half": [24, 25, 27, 39, 41, 49, 139, 160, 161, 188, 194, 245, 266, 287, 288, 289, 291], "handl": [137, 221, 256, 264, 265, 281], "hard": [156, 157], "hard_threshold_topk": 156, "has_cost": [28, 159, 165], "hat": [2, 36, 42, 88, 95, 96, 99, 102, 108, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127], "hauptmann": 52, "have": [0, 5, 7, 8, 9, 13, 19, 24, 25, 31, 34, 35, 36, 39, 40, 41, 42, 44, 53, 58, 66, 68, 71, 73, 74, 75, 76, 78, 80, 81, 83, 84, 92, 102, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 131, 137, 141, 148, 204, 208, 213, 215, 218, 221, 223, 224, 225, 231, 264, 273, 287, 301], "haze": 66, "hazi": 211, "hd5": 85, "hd5dataset": 85, "hdf5": [27, 30, 49, 50, 51, 57, 77, 79], "hdf5dataset": [2, 5, 6, 16, 27, 30, 41, 42, 43, 44, 45, 46, 49, 50, 51, 53, 54, 57], "head": [148, 150], "head_dim": 150, "height": [20, 77, 82, 137, 145, 146, 161, 208, 215, 223, 228, 253, 279, 296, 299], "help": [0, 37, 56], "helper": [49, 54, 188, 204, 213, 238, 239, 240, 241, 242, 243, 288, 289], "henc": 276, "hendriksen": 102, "here": [0, 2, 4, 5, 6, 7, 8, 10, 11, 12, 14, 15, 19, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 41, 42, 44, 49, 50, 53, 54, 57, 64, 80, 126, 157, 177, 214, 217, 239], "hereaft": 36, "hessian": 151, "hf": 74, "hf_dataset": 8, "hf_train_dataset": 8, "hfdataset": 8, "hh": 238, "hidden": [25, 58, 133, 134, 137, 143, 147, 150, 166], "high": [0, 2, 12, 15, 58, 83, 84, 126, 148, 216, 250, 254, 255, 262], "higher": [0, 13, 61, 122, 126, 127, 209, 252, 253], "highest": 0, "highli": [50, 51, 200], "histogram": [224, 245], "histogramdd": 244, "histori": [73, 159, 162, 286], "history_s": [49, 159, 162], "history_size_backward": [49, 286], "ho": [35, 58, 137], "hold": 159, "home": [0, 2, 9, 10, 13, 15, 24, 25, 27, 28, 30, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 53], "homographi": [40, 68, 282, 283, 284, 285], "hood": [11, 17], "hook": [129, 132, 134, 143, 144, 145, 146, 149, 154, 236, 237], "horizont": [39, 75, 108, 141, 298], "host": [58, 81], "hostedtoolcach": [17, 39, 273], "how": [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 20, 21, 22, 24, 27, 28, 29, 31, 33, 34, 35, 36, 37, 39, 41, 42, 43, 44, 45, 46, 49, 50, 51, 54, 66, 102, 131, 133, 134, 140, 147, 159, 160, 162, 226, 301], "howev": [7, 20, 39, 41, 52, 58, 61, 62, 66, 86, 88, 94, 95, 96, 97, 98, 102, 104, 136, 216, 281], "hp": 162, "hq": [27, 49, 64, 160, 188, 194, 266, 286, 287, 288, 289], "hqsiter": 27, "hr": [78, 81], "hrm": 126, "hspace": 162, "html": [56, 127, 133, 134, 151, 152, 296, 299, 301], "http": [2, 4, 7, 8, 10, 11, 13, 19, 20, 24, 25, 28, 29, 30, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 50, 52, 53, 59, 71, 73, 74, 77, 78, 80, 81, 83, 84, 88, 89, 92, 96, 97, 99, 101, 105, 106, 107, 119, 127, 128, 133, 134, 137, 138, 140, 141, 145, 146, 150, 151, 152, 179, 190, 198, 202, 205, 207, 209, 211, 224, 228, 237, 252, 254, 256, 258, 264, 265, 266, 269, 270, 274, 275, 284, 296, 299, 301], "hub": [2, 10, 13, 24, 25, 27, 28, 30, 36, 37, 39, 40, 41, 42, 43, 44, 45, 148], "hue": 17, "hug": 8, "hugginfacehub": 58, "huggingfac": [2, 10, 11, 13, 18, 19, 20, 24, 25, 28, 30, 36, 37, 39, 40, 41, 42, 43, 44, 45, 58, 59, 72, 74, 78, 84, 148, 296], "human": 36, "hurault": [30, 71], "hv110_p0500510000": 76, "hv110_p0500510049": 76, "hyperparamet": [24, 33, 36, 37, 50, 51, 63, 64, 105, 156, 157, 160, 204, 213, 264, 265, 266], "i": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 20, 21, 22, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 135, 136, 137, 138, 139, 141, 143, 144, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 275, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 293, 294, 296, 298, 299, 301], "ib": [6, 16, 21, 27, 39, 41, 53, 54], "iccv": 161, "icnn": 178, "id": [20, 25, 29, 89, 179], "idea": [56, 65], "ideal": 110, "ident": [15, 24, 28, 89, 105, 159, 162, 196, 204, 206, 213, 218, 268, 269, 270, 281], "identif": 66, "identifi": [76, 77, 80], "idri": 80, "idx": 35, "idx1": [44, 46, 50], "idx3": [44, 46, 50], "ie": [66, 257], "ieee": [27, 52, 99, 105, 106, 107, 119, 130, 152, 160, 211, 224], "ieeexplor": [99, 105, 106, 107, 119, 211, 224], "ignor": [0, 6, 17, 58, 85, 96, 102, 129, 132, 134, 141, 143, 144, 145, 146, 149, 154, 208, 215, 223, 236, 237, 250, 251, 254, 255, 262, 281], "ii": 0, "iid": [202, 225], "ill": 11, "illumin": 11, "illustr": [4, 64], "ilvr_adm": 137, "im": [0, 36], "im_siz": 0, "im_width": 228, "imag": [1, 3, 4, 8, 11, 18, 19, 23, 29, 32, 35, 36, 38, 39, 44, 47, 52, 55, 58, 60, 61, 63, 65, 67, 68, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 93, 94, 95, 96, 97, 98, 99, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 166, 167, 168, 169, 170, 173, 175, 188, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 227, 228, 231, 234, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 252, 253, 255, 256, 258, 259, 260, 261, 264, 266, 267, 268, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 296, 297, 298, 299, 301], "image_gdth": 0, "image_srf_2": 83, "image_srf_3": 83, "image_srf_4": 83, "imagefold": [2, 6, 40, 57], "imageio": 11, "imagenet128": [58, 137], "images_contours_and_field": [296, 299], "imaginari": [15, 158, 208, 215, 223], "imbalanc": 273, "img": [0, 13, 21, 22, 25, 28, 29, 31, 33, 34, 35, 36, 37, 76, 82, 140, 296, 299, 301], "img1": 296, "img2": 296, "img3": 296, "img_001": 84, "img_001_srf_2_bicub": 83, "img_014_srf_2_srcnn": 83, "img_100": 84, "img_list": [296, 298, 299], "img_rang": 150, "img_shap": [7, 13, 15, 28, 50, 51, 57, 66, 132, 202, 222, 225], "img_siz": [0, 4, 5, 6, 7, 10, 12, 13, 15, 16, 21, 22, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 41, 49, 50, 51, 52, 53, 54, 59, 118, 123, 150, 201, 205, 207, 208, 213, 215, 216, 221, 223, 226, 250, 254, 255, 261, 262, 293, 294], "img_transform": 8, "img_typ": 76, "img_width": [15, 25, 31, 44, 52, 228], "immers": [11, 253], "implement": [0, 2, 4, 11, 14, 15, 17, 19, 20, 28, 38, 39, 40, 44, 50, 51, 52, 60, 61, 64, 66, 68, 71, 72, 73, 86, 98, 102, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 133, 134, 137, 138, 140, 141, 143, 147, 150, 152, 154, 160, 162, 165, 169, 170, 185, 190, 197, 200, 201, 204, 210, 212, 213, 218, 221, 226, 227, 244, 245, 246, 247, 250, 254, 262, 264, 265, 266, 274, 281, 292, 294, 296], "implicit": [7, 64, 69, 170, 286], "implicitli": [25, 31, 39, 41, 53, 59, 64, 151, 152], "import": [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 57, 58, 59, 60, 61, 62, 64, 66, 68, 69, 74, 75, 76, 77, 78, 80, 81, 83, 84, 86, 90, 91, 92, 98, 99, 100, 101, 102, 103, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 153, 154, 159, 162, 163, 185, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 212, 213, 214, 215, 216, 219, 220, 223, 225, 226, 228, 229, 230, 231, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 266, 273, 275, 281, 282, 283, 284, 285, 289, 296, 299, 301], "importlib": 10, "impos": 40, "improv": [2, 7, 13, 44, 52, 98, 105, 128, 259], "impuls": [4, 9, 224, 226], "in_chan": 150, "in_channel": [2, 13, 16, 28, 31, 40, 42, 43, 44, 45, 46, 135, 137, 138, 142, 143, 145, 146, 148, 155, 289], "in_nc": 149, "in_siz": [7, 132, 228, 236, 237], "includ": [24, 40, 57, 59, 61, 66, 67, 73, 77, 79, 85, 86, 98, 99, 102, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 138, 197, 217, 240, 243, 245, 249, 251, 259, 271, 275, 281, 282, 283, 285], "incom": [69, 286], "incomplet": [7, 19, 34, 37, 47, 72, 73, 79, 85, 88, 93, 94, 95, 96, 128, 155, 202, 204, 212, 213, 218, 228, 292], "incorpor": [0, 13, 208, 212, 213, 218, 221], "increas": [0, 2, 4, 20, 39, 102, 139, 155, 161], "inde": [31, 213], "independ": [65, 77, 153, 202, 222, 225, 258, 278], "index": [11, 17, 21, 27, 30, 49, 73, 126, 127, 197, 253, 281, 301], "index_select": 36, "indic": [15, 53, 59, 77, 85, 156, 162, 175, 183, 252, 268], "indicatorl2": [10, 53], "individu": [73, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 296, 301], "induc": [0, 22], "inexact": 106, "inf_lr": 131, "inf_max_it": 131, "inf_progress_bar": 131, "inf_tol": [2, 131], "inf_z": [67, 172], "infer": [2, 73, 101, 131, 236, 237, 245], "inferno": 0, "infinit": [69, 286], "info": 27, "inform": [0, 13, 16, 41, 42, 43, 45, 46, 53, 58, 60, 73, 77, 85, 127, 159, 197, 213, 271], "infti": [53, 175, 183], "inherit": [4, 5, 14, 30, 33, 52, 60, 61, 62, 64, 66, 68, 122, 208, 215, 223], "init": [10, 46, 96, 301], "init_anderson_acceler": 162, "init_iterate_fn": [159, 162], "init_metrics_fn": [159, 162], "init_param": [50, 51, 54, 300], "initi": [10, 20, 25, 30, 31, 35, 36, 39, 41, 42, 43, 45, 46, 50, 51, 53, 54, 64, 73, 105, 106, 131, 135, 136, 137, 138, 142, 149, 150, 159, 161, 162, 166, 197, 217, 218, 260, 265, 266, 300], "initialis": [102, 162, 208, 213, 215, 223], "inner": [173, 269], "inner_it": 269, "inpaint": [7, 10, 16, 17, 19, 23, 26, 34, 36, 37, 39, 40, 42, 55, 59, 64, 66, 69, 71, 72, 73, 79, 85, 93, 102, 104, 156, 159, 161, 168, 169, 170, 175, 185, 188, 204, 205, 206, 210, 213, 218, 251, 256, 264, 266, 271, 287, 289, 292, 294, 296, 297], "inplac": 131, "inpu": 73, "input": [2, 5, 7, 9, 15, 20, 21, 22, 27, 28, 29, 30, 31, 35, 36, 44, 52, 54, 58, 59, 64, 66, 68, 73, 77, 86, 87, 89, 92, 93, 98, 99, 102, 105, 106, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 158, 162, 165, 166, 172, 179, 180, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 204, 205, 207, 208, 211, 212, 216, 217, 220, 221, 222, 223, 224, 226, 227, 228, 231, 236, 237, 249, 251, 256, 259, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289], "input_mask": [39, 249, 251, 256, 259], "input_nc": 147, "input_resolut": 149, "input_s": [7, 136, 231], "input_shap": 140, "inscrib": 228, "inset": 298, "inset_loc": [0, 298], "inset_s": [0, 298], "insid": [11, 46, 61, 148, 228, 268], "inspir": [128, 162, 266], "instal": [0, 19, 39, 56, 68, 80, 274, 301], "instanc": [4, 5, 11, 28, 35, 51, 52, 62, 64, 73, 129, 132, 134, 143, 144, 145, 146, 149, 154, 159, 162, 165, 170, 188, 189, 190, 191, 192, 193, 196, 236, 237, 272, 287, 288, 289], "instanci": [74, 75, 77, 80, 83], "instanti": [0, 4, 5, 11, 13, 21, 22, 27, 28, 30, 31, 66, 76, 78, 81, 84, 159, 226, 257], "instead": [0, 2, 20, 36, 39, 52, 62, 89, 102, 128, 129, 132, 134, 143, 144, 145, 146, 149, 152, 154, 194, 200, 236, 237, 244, 245, 249, 259, 272, 274], "instruct": 148, "int": [0, 13, 15, 16, 33, 35, 37, 41, 42, 43, 45, 49, 52, 53, 54, 73, 76, 77, 82, 85, 86, 87, 89, 90, 91, 92, 98, 99, 100, 101, 102, 103, 119, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 159, 161, 162, 163, 166, 167, 169, 173, 175, 183, 184, 188, 197, 198, 199, 202, 207, 210, 213, 214, 216, 218, 219, 220, 221, 222, 224, 225, 227, 228, 229, 230, 232, 233, 235, 236, 237, 244, 245, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 293, 294, 296, 298, 299, 301], "integ": [40, 268, 269, 270, 277, 279], "integr": [46, 66, 68, 75, 81, 228, 248], "intend": 39, "intens": [9, 11, 211, 224], "interact": 301, "interest": [0, 28, 35, 159, 281], "interfac": [33, 64], "interferometr": [1, 19, 72, 159, 169, 170, 175, 188, 213, 218, 221, 296, 297, 298], "interferometri": [0, 221], "intermedi": [30, 129, 155], "intern": [9, 17, 30, 169, 197], "internet": [74, 75, 76, 78, 81, 83, 84], "interp_point": [0, 221], "interpol": [0, 4, 11, 15, 30, 36, 66, 89, 221, 228, 261, 275, 277, 278, 281, 282, 283, 284, 285, 296, 299], "interpolation_method": [296, 299], "interpolation_mod": 277, "interpolationmod": 277, "interpret": [59, 148, 155, 156, 214], "interv": [175, 263, 270], "intial": 13, "intiliaz": 190, "intract": 36, "introduc": [0, 36, 39, 46, 65, 105, 106, 130, 132, 138, 149, 150, 249, 269], "inv": 25, "invari": [40, 88, 95, 183], "invers": [0, 3, 4, 6, 7, 12, 14, 15, 16, 17, 19, 24, 25, 30, 32, 33, 34, 37, 41, 42, 44, 45, 46, 56, 59, 60, 61, 63, 65, 66, 68, 69, 70, 71, 72, 73, 79, 84, 85, 88, 93, 94, 95, 96, 101, 104, 105, 106, 107, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 131, 133, 134, 138, 140, 147, 155, 159, 166, 169, 170, 171, 188, 197, 200, 201, 204, 208, 211, 212, 213, 215, 217, 218, 220, 223, 228, 234, 236, 258, 260, 264, 273, 274, 281, 292, 294, 296, 297, 301], "inversef": [44, 73, 102], "invert": [17, 25, 122, 126, 127, 166, 189, 190, 191, 281], "invert_metr": [122, 126, 127], "invert_param": 281, "investig": 0, "involv": [40, 50, 151, 152], "io": [11, 52, 151, 152], "iota_": [53, 175, 183], "ip": [5, 13, 27, 28, 30, 31], "ipynb": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54], "ipython": [39, 301], "irf": 9, "irf_sigma": 9, "is_avail": [0, 2, 5, 6, 7, 9, 10, 11, 12, 13, 15, 16, 20, 21, 22, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 264, 266], "is_standard_deblurring_network": 148, "is_standard_denoising_network": 148, "is_standard_deraining_network": 148, "is_valid_fil": 57, "isn": 81, "isola": 147, "isomorph": 284, "isotrop": [152, 234, 278], "issu": [25, 33, 39, 41, 53, 56, 71, 281], "itakura": 179, "item": [0, 7, 11, 13, 20, 21, 22, 24, 25, 28, 29, 31, 33, 34, 37, 46, 64, 73, 86, 98, 99, 101, 102, 225], "iter": [0, 5, 6, 7, 8, 10, 12, 13, 14, 19, 21, 22, 27, 28, 29, 30, 31, 34, 35, 36, 37, 39, 40, 44, 49, 53, 54, 55, 57, 69, 72, 73, 79, 80, 85, 86, 89, 92, 93, 104, 131, 136, 151, 152, 157, 159, 160, 162, 165, 169, 170, 173, 175, 183, 184, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 202, 213, 218, 265, 266, 267, 268, 269, 270, 271, 273, 286, 287, 288, 289, 292, 296, 300], "iterable_dataset": 8, "iterabledataset": 8, "iteratbl": 8, "iterator_param": 268, "ith": [139, 161], "its": [10, 13, 14, 21, 22, 28, 35, 44, 50, 51, 52, 53, 60, 64, 66, 68, 73, 75, 76, 102, 143, 151, 152, 159, 166, 169, 176, 197, 204, 245, 251, 258, 260, 281, 301], "itself": 0, "iwt": 156, "j": [9, 36, 50, 52, 102, 151, 152, 159, 175, 202, 222, 224], "jac_inv": 25, "jacobian": [89, 92, 151, 166, 182, 213, 217, 218], "jacobianspectralnorm": 89, "jbhuang0604": 83, "jin": 65, "jingyunliang": 150, "jitter": 17, "jmo": 11, "join": [68, 71], "jointli": [54, 60, 273], "jona": 52, "journal": 248, "jpeg": [4, 28, 81], "jpg": [7, 17, 33, 34, 37, 40, 118, 123], "json": 74, "julian": 71, "jupyt": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54], "just": [0, 4, 25, 206, 213], "jychoi118": 137, "k": [0, 10, 15, 27, 28, 29, 33, 37, 39, 50, 51, 52, 53, 59, 64, 66, 69, 73, 77, 86, 98, 151, 156, 157, 159, 160, 162, 165, 189, 190, 191, 192, 193, 194, 195, 196, 221, 223, 226, 227, 248, 250, 254, 255, 258, 262, 269, 270, 287], "k_adjoint": [10, 52, 53], "k_oversampl": [0, 221], "kaiser": [221, 235], "kargs_model": 89, "kb": [11, 253], "kbnufft": 0, "kbnufftadjoint": 0, "keep": [16, 36, 49, 53, 156, 202, 212, 213, 218, 225, 268, 269, 270, 281], "keep_time_dim": [39, 223], "keepdim": 290, "kei": [4, 8, 11, 28, 36, 64, 66, 73, 150, 159, 228, 237, 250, 251, 252, 253, 257, 258, 260, 261, 263, 271, 287, 289], "kept": [152, 156, 157, 251, 256], "kernel": [4, 5, 9, 11, 15, 21, 27, 30, 33, 35, 49, 66, 67, 143, 144, 172, 200, 221, 238, 239, 240, 241, 242, 243, 252, 253, 268], "kernel_dim": 143, "kernel_index": [21, 27, 30, 49], "kernel_s": [131, 144, 258], "kernel_torch": [21, 27, 30, 49], "kernels_12": 30, "keyword": [89, 159, 162, 244, 272, 281, 287, 301], "kindli": 0, "kl": 25, "knee": [39, 77], "knee_singlecoil": 77, "knowledg": [45, 59, 85, 126], "known": [34, 186, 281], "kornia": [68, 275, 282, 283, 284, 285], "kr": 78, "kspace": 77, "kullback": [25, 180], "kunisch": 151, "kupyn": [2, 112, 113, 147], "kutta": 269, "kwarg": [0, 5, 14, 17, 28, 30, 51, 52, 73, 86, 87, 88, 92, 93, 94, 95, 96, 97, 99, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 131, 134, 141, 150, 153, 154, 157, 159, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 179, 180, 182, 183, 184, 185, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 244, 250, 251, 254, 255, 256, 257, 260, 261, 262, 263, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 286, 287, 288, 289, 301], "kwargs_model": 89, "kx": 190, "l": [2, 4, 20, 25, 27, 42, 60, 61, 73, 86, 90, 91, 98, 99, 100, 101, 102, 103, 112, 113, 114, 115, 116, 135, 142, 144, 151, 152, 160, 209, 235, 258, 269, 270], "l1": [117, 148, 164], "l1loss": [51, 61, 120], "l1prior": 162, "l2": [0, 5, 13, 21, 22, 27, 28, 30, 31, 33, 35, 36, 37, 49, 50, 51, 54, 59, 64, 69, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 139, 148, 159, 162, 163, 169, 177, 266, 288, 289], "l2_axi": 163, "l2_loss": 36, "l2_prior": 5, "l2distanc": 288, "l2prior": 5, "l3": [119, 148], "l4": 148, "l_1": 117, "l_2": 117, "l_p": 119, "label": [2, 6, 25, 44, 46, 50, 57, 59, 64, 109, 110, 111, 137, 159, 298], "label_loc": 298, "lam": 25, "lam_epl": 25, "lam_patchnr": 25, "lamb": [0, 10, 21, 22, 30, 50, 51, 169, 196], "lambd": 64, "lambda": [0, 2, 5, 10, 11, 17, 20, 21, 22, 25, 28, 30, 31, 39, 41, 42, 43, 44, 45, 50, 51, 54, 59, 63, 64, 68, 77, 105, 156, 157, 159, 162, 165, 169, 188, 189, 190, 191, 192, 193, 194, 195, 196, 204, 213, 218, 231, 260, 266, 267, 268, 269, 270, 281, 287, 288, 289], "lambda_": [11, 20, 35, 50, 266], "lambda_1": 151, "lambda_2": 151, "lambda_col": 11, "lambda_i": 20, "lambda_il": 11, "langevin": [33, 37, 71, 269, 270], "langl": [169, 176, 177], "larg": [0, 2, 13, 14, 66, 71, 81, 105, 136, 137, 139, 151, 161, 175, 200, 202], "large_model": [35, 36, 137], "larger": [40, 49, 54, 85, 137, 202, 213, 214, 228, 260, 269, 270], "largest": [92, 156, 159], "last": [4, 35, 73, 106, 162, 212, 245], "last_batch": 73, "latent": [2, 25, 129, 131, 134], "later": [13, 35, 36], "latest": 71, "latter": [36, 85, 129, 132, 134, 143, 144, 145, 146, 149, 154, 236, 237], "laurent": [151, 152], "law": 202, "layer": [7, 52, 54, 58, 69, 129, 132, 133, 134, 135, 137, 138, 143, 145, 146, 147, 148, 149, 150, 155], "layernorm": [148, 150], "layernorm_typ": 148, "layout": [296, 299], "lcondat": [151, 152], "ldot": [20, 223, 232, 233], "lead": [228, 237, 284], "leakyrelu": [135, 142, 220], "learn": [2, 3, 5, 7, 16, 17, 24, 25, 27, 30, 39, 40, 43, 45, 47, 49, 53, 54, 55, 56, 58, 68, 72, 73, 79, 85, 86, 88, 93, 94, 96, 98, 101, 102, 104, 105, 106, 118, 128, 131, 133, 134, 136, 145, 146, 155, 160, 161, 165, 169, 170, 175, 190, 195, 202, 204, 210, 212, 213, 215, 218, 227, 228, 249, 251, 256, 259, 271, 273, 277, 278, 281, 287, 289, 291, 292, 296, 300], "learnabl": [50, 51, 53, 69, 150, 155, 287], "learning_r": [7, 16, 41, 42, 43, 45, 46, 49, 50, 51, 52, 53, 54, 136], "learning_std": [2, 5, 16, 27, 30, 39, 41, 42, 43, 44, 45, 46, 52, 53], "learnt": 85, "least": [16, 39, 53, 64, 73, 110], "leclair": 30, "lecun": [44, 46, 50], "left": [2, 11, 33, 35, 37, 42, 45, 46, 50, 64, 67, 69, 105, 106, 107, 112, 113, 114, 115, 116, 172, 175, 176, 182, 183, 202, 213, 218, 222, 234, 258, 266, 270, 286, 298], "leftarrow": 159, "legendr": [28, 190], "leibler": [25, 180], "len": [0, 4, 11, 20, 35, 74, 75, 76, 78, 81, 83, 84, 252, 253, 276, 281], "lenght": 54, "length": [4, 9, 10, 50, 51, 52, 53, 54, 86, 131, 159, 235, 249, 258, 296, 298, 299, 301], "leq": [35, 183, 190, 192, 195, 196, 232, 233, 235], "lesion": 80, "less": [256, 281], "let": [4, 8, 11, 17, 20, 35, 36, 39, 141, 223, 227, 277], "level": [0, 7, 9, 10, 15, 20, 22, 24, 28, 29, 31, 33, 34, 35, 36, 37, 49, 50, 53, 54, 58, 64, 67, 76, 101, 105, 106, 130, 135, 137, 138, 141, 148, 150, 155, 156, 157, 160, 168, 172, 175, 185, 187, 209, 210, 214, 218, 220, 224, 230, 260, 263, 264, 265, 266, 269, 270], "leverag": [67, 69, 92, 204, 208, 286], "levin": [5, 21, 27, 30], "levin09": [21, 27, 49], "lhood": 33, "lib": [17, 39, 273], "libcpab": 274, "librari": [2, 11, 35, 49, 51, 52, 56, 58, 65, 73, 130, 166, 271, 272], "licenc": 80, "lidar": [18, 19, 72, 218, 224, 292], "lidc": 80, "light": [11, 66, 211, 253], "lightn": 127, "like": [0, 2, 39, 61, 135, 151, 197, 256, 281], "likelihood": [19, 25, 26, 29, 33, 36, 63, 67, 72, 139, 161, 166, 167, 179, 185, 186, 187, 197, 204, 206, 210, 212, 213, 218, 268, 269, 270, 294, 296], "limit": [8, 19, 20, 24, 26, 39, 40, 41, 53, 58, 72, 73, 82, 139, 148, 161, 166, 167, 169, 170, 204, 206, 213, 214, 218, 228, 230, 252, 253, 277, 296], "linalg": 20, "line": [12, 19, 39, 59, 66, 212, 223, 228, 250, 254, 255, 262], "linear": [0, 7, 12, 15, 16, 17, 21, 22, 25, 28, 29, 31, 33, 34, 35, 36, 37, 49, 50, 51, 53, 54, 73, 105, 108, 128, 139, 151, 152, 161, 162, 173, 181, 196, 198, 202, 204, 206, 208, 211, 212, 213, 215, 216, 217, 218, 225, 228, 231, 261], "linearli": [296, 299], "linearphys": [0, 12, 14, 66, 105, 139, 159, 161, 162, 200, 202, 204, 207, 212, 216, 217, 221, 226, 228, 265, 266, 273], "linefmt": 9, "linewidth": 0, "link": [7, 19, 35, 63, 137, 268, 269, 270], "linspac": [25, 34, 35, 36, 228, 264], "lionel": [7, 33, 34, 37], "lip": [192, 195, 196], "lipschitz": [28, 58, 60, 151, 152, 187, 213, 269, 270], "lipschitzian": [151, 152], "list": [10, 12, 15, 17, 35, 36, 40, 41, 42, 50, 51, 53, 54, 62, 64, 70, 71, 73, 76, 85, 87, 90, 91, 95, 96, 100, 103, 135, 136, 139, 141, 142, 148, 149, 156, 157, 159, 161, 175, 188, 202, 211, 216, 217, 218, 228, 245, 252, 253, 257, 264, 271, 272, 273, 276, 278, 287, 288, 289, 290, 296, 298, 299, 301], "list_imag": 20, "list_param": [4, 11, 252, 253], "list_prox": 20, "list_wv": [20, 157], "lista": [19, 51, 53, 55, 72, 73, 79, 85, 93, 104, 169, 170, 175, 195, 202, 213, 218, 287, 289, 292, 296, 300], "listtensor": 211, "liu": 39, "live": [31, 228, 301], "liver": [98, 259], "ll": [0, 20, 36], "load": [0, 2, 4, 11, 17, 18, 19, 35, 44, 57, 59, 66, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 148, 156, 168, 169, 170, 202, 204, 212, 213, 217, 218, 222, 225, 287, 289, 292, 293, 294], "load_dataset": [5, 6, 8, 16, 21, 22, 27, 30, 39, 41, 49, 53, 54], "load_degrad": [21, 22, 27, 30, 41, 49], "load_metadata_from_cach": 77, "load_np_url": [0, 11, 20], "load_physics_generator_param": [57, 79], "load_state_dict": [2, 10, 39, 40, 41, 42, 43, 44, 45, 53, 197, 202, 212, 217, 222, 225], "load_state_dict_from_url": [2, 10, 39, 40, 41, 42, 43, 44, 45], "load_torch_url": 25, "load_url_imag": [4, 7, 13, 15, 17, 24, 28, 29, 31, 33, 34, 35, 36, 37, 40, 59, 118, 123], "loader": [50, 51, 57, 73, 271, 272], "loc": [10, 39, 41, 42, 43, 44, 45, 298], "local": [7, 43, 56, 57, 148], "locat": [0, 9, 208, 215, 221, 223, 240, 296, 298], "lodopab": [25, 214], "log": [0, 5, 13, 19, 21, 22, 25, 26, 29, 31, 33, 36, 37, 49, 50, 51, 52, 54, 58, 67, 72, 73, 101, 139, 161, 166, 167, 172, 179, 180, 185, 186, 187, 197, 202, 204, 206, 210, 212, 213, 214, 218, 225, 265, 268, 269, 270, 273, 294, 296], "log10": 0, "log_": 125, "log_metrics_wandb": 73, "logan": 13, "logarithm": 0, "logpoisson": 214, "logpoissonlikelihood": 25, "logpoissonnois": [25, 186], "logs_total_loss_ev": [25, 73], "logs_total_loss_train": [25, 73], "logscal": 0, "long": [6, 36, 73], "longer": [2, 25, 39, 41, 53], "look": 69, "loop": [62, 73, 162], "loop_physics_gener": [73, 273], "loss": [2, 7, 13, 16, 17, 19, 24, 25, 37, 40, 41, 42, 47, 49, 50, 51, 52, 53, 54, 58, 61, 66, 68, 71, 72, 73, 79, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 136, 155, 181, 185, 204, 206, 210, 213, 218, 220, 249, 251, 256, 259, 271, 272, 273, 292], "loss_d": 2, "loss_g": 2, "loss_hist": 13, "loss_tot": [25, 73], "losses_d": [2, 273], "lossi": [2, 115, 116, 131], "low": [0, 12, 15, 28, 67, 126, 172, 207, 214, 216, 244, 245, 250, 254, 255, 262], "lower": [39, 122, 214, 231, 244, 245], "lower_bett": 122, "lp": 119, "lpip": 27, "lpips_std": 27, "lpips_v0": 27, "lprior": 33, "lr": [2, 7, 16, 25, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 78, 148], "lr_d": 2, "lr_g": 2, "lr_schedul": [2, 16, 41, 42, 43, 45, 49, 52, 53, 54, 73, 273], "lr_variational_problem": 25, "lrm": 126, "lsdir": 81, "lsgan": [60, 110], "lung": 80, "lvert": [2, 114], "m": [0, 11, 13, 15, 28, 39, 44, 45, 46, 50, 51, 56, 57, 61, 63, 66, 102, 105, 106, 107, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 152, 181, 196, 202, 204, 212, 213, 218, 221, 222, 225, 251, 256, 269], "m1": 39, "m2": 39, "m_": 102, "m_1": 102, "m_2": [44, 102], "m_i": 102, "machin": 56, "made": [57, 68, 77], "mae": [61, 117], "magnet": [98, 208, 215, 223, 259], "magnitud": [117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 296, 299], "mai": [2, 7, 9, 13, 64, 102, 136, 155, 159, 165, 220, 274, 281], "main": [2, 10, 11, 13, 14, 20, 24, 25, 28, 30, 36, 37, 39, 40, 41, 42, 43, 44, 45, 53, 56, 59, 78, 84, 140, 256], "maintain": 197, "make": [13, 17, 37, 56, 58, 68, 73, 156, 200], "malici": [25, 39, 41, 53], "manag": 287, "mandatori": 101, "mani": [7, 44, 59, 66, 69, 71, 141, 207, 273], "manifest": 80, "manner": [73, 204, 208, 271], "manual": [7, 31], "manual_se": [0, 4, 5, 6, 7, 11, 13, 15, 16, 20, 21, 22, 27, 28, 29, 30, 31, 37, 39, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 66, 92, 163, 202, 204, 206, 208, 212, 215, 222, 225, 228, 257, 260, 264], "map": [13, 43, 52, 63, 65, 66, 67, 97, 105, 131, 137, 151, 152, 172, 206, 213, 218, 265, 266], "map_loc": [2, 10, 39, 40, 41, 42, 43, 44, 45], "mapsto": [59, 63, 64, 66, 159, 213, 218, 221], "marcenko": 202, "mark": 80, "markerfmt": 9, "markov": [33, 268, 269, 270], "mask": [7, 10, 14, 15, 16, 17, 22, 24, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 53, 59, 64, 66, 73, 77, 86, 97, 98, 102, 154, 185, 201, 204, 208, 212, 215, 223, 225, 227, 249, 250, 251, 252, 253, 254, 255, 256, 259, 262, 264, 266], "mask_ful": 39, "mask_gaussian": 15, "mask_gener": [44, 66, 102], "mask_random": 15, "mask_svd": 204, "mask_uniform": 15, "mat": [21, 27, 49], "match": [50, 56, 212, 224, 281, 290], "matern_kernel": 258, "math": [28, 30, 35, 51, 52, 104, 169, 172, 189, 191, 192, 194, 240], "mathbb": [0, 2, 20, 25, 40, 59, 64, 89, 92, 102, 112, 113, 114, 115, 116, 159, 169, 202, 204, 212, 221], "mathbf": [2, 35, 36, 59, 265, 266], "mathcal": [2, 9, 24, 25, 35, 36, 37, 42, 46, 53, 60, 67, 99, 105, 106, 107, 112, 113, 114, 115, 116, 141, 172, 183, 202, 209, 210, 214, 219, 220, 222, 224, 229, 230, 258, 265, 266, 270], "mathemat": [12, 248], "mathrm": [25, 202, 222], "matlab": [151, 152], "matplotlib": [9, 11, 13, 20, 35, 39, 296, 299, 301], "matric": [33, 102, 197, 202, 246, 247], "matrix": [0, 15, 33, 50, 51, 92, 196, 202, 212, 213, 216, 221, 222, 225, 228], "matter": 227, "matthieu": 71, "mat\u00e9rn": 258, "max": [0, 11, 13, 15, 20, 34, 36, 37, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 135, 142, 163, 164, 175, 229, 244, 245, 296, 299], "max_": 46, "max_img": [296, 299], "max_it": [0, 5, 10, 13, 20, 21, 22, 25, 27, 28, 29, 30, 31, 33, 34, 37, 49, 50, 51, 52, 53, 54, 64, 89, 92, 157, 159, 162, 183, 184, 188, 197, 198, 199, 213, 218, 265, 266, 267, 268, 269, 270, 287, 289], "max_iter_backward": [49, 286], "max_iter_int": 169, "max_pixel": [125, 127], "max_zernike_amplitud": [252, 253], "maxim": [5, 16, 25, 27, 30, 49, 50, 51, 53, 54, 58, 169, 173, 197], "maximis": [112, 115], "maximum": [5, 25, 34, 35, 67, 89, 92, 101, 125, 127, 131, 141, 151, 152, 159, 162, 172, 175, 183, 184, 188, 197, 198, 199, 213, 218, 229, 253, 263, 267, 275, 279, 282, 283, 284, 285, 286, 296, 299], "maxpool": [135, 142], "mb": [1, 3, 18, 23, 26, 32, 38, 47, 48, 55, 72, 137], "mc": [41, 42, 44, 102, 141], "mcloss": [40, 41, 42, 61], "mcmc": 67, "md": [25, 29, 39, 41, 53], "md5": 75, "md_step": 176, "mea": 14, "mean": [16, 20, 25, 33, 34, 35, 36, 37, 39, 50, 53, 61, 63, 64, 67, 73, 86, 94, 96, 97, 98, 102, 104, 105, 106, 107, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 131, 209, 267, 268, 269, 270, 272, 281], "mean_has_converg": 268, "meaning": 35, "meaningless": [2, 131], "measplit": [39, 44], "measur": [2, 4, 5, 6, 10, 11, 12, 14, 15, 16, 19, 20, 21, 22, 25, 27, 28, 29, 30, 31, 35, 36, 39, 40, 41, 43, 45, 46, 47, 49, 52, 53, 54, 59, 60, 63, 65, 66, 67, 70, 72, 73, 74, 79, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 101, 102, 105, 106, 107, 109, 111, 114, 115, 116, 126, 128, 131, 136, 145, 153, 154, 155, 159, 160, 162, 181, 183, 184, 187, 196, 202, 203, 204, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 228, 229, 230, 251, 256, 264, 265, 266, 268, 271, 272, 273, 287, 292], "measurement_dir": [5, 6, 16, 27, 30, 41, 42, 43, 45, 46, 49, 50, 51, 53, 54], "mechan": [86, 98, 99, 102], "med": 77, "median": [17, 33, 59, 144], "medianfilt": [17, 33, 59, 99, 102], "medic": 52, "medium": [11, 211, 253], "meet": [6, 37], "mem": [1, 3, 18, 23, 26, 32, 38, 47, 48, 55, 72], "memori": [8, 139, 150, 152, 161, 228, 236, 237, 281, 292], "mention": 175, "merg": 39, "meshgrid": 17, "messi": [7, 33, 34, 37], "meta": 77, "metadata": [77, 80], "metadata_cache_fil": 77, "meth": [53, 60], "method": [2, 4, 5, 7, 11, 14, 17, 18, 19, 21, 22, 28, 30, 31, 32, 33, 34, 37, 44, 52, 53, 58, 59, 64, 66, 67, 68, 71, 72, 73, 75, 79, 85, 86, 89, 92, 93, 98, 99, 101, 102, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 135, 136, 138, 139, 151, 152, 154, 159, 160, 161, 166, 168, 169, 170, 176, 182, 183, 188, 189, 196, 197, 200, 201, 202, 204, 210, 212, 213, 217, 218, 222, 224, 227, 228, 264, 267, 269, 271, 281, 292, 294, 296], "metric": [0, 2, 5, 7, 13, 16, 20, 21, 22, 24, 25, 27, 28, 29, 30, 31, 33, 34, 37, 39, 49, 50, 51, 52, 53, 54, 73, 86, 88, 90, 91, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 110, 114, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 159, 162, 213, 264, 266, 271, 272, 273, 286, 287, 297], "metric_nam": 159, "microscop": 76, "microscopi": [11, 76], "middl": [66, 200, 201, 207, 213, 228, 237], "might": [14, 93, 109, 111, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 139, 161, 266, 301], "min": [0, 13, 15, 21, 22, 25, 36, 53, 59, 64, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 139, 151, 152, 156, 157, 159, 161, 175, 190, 213, 218, 229, 244, 245, 275, 282, 296, 299], "min_": [5, 7, 20, 46, 136], "min_max": [117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 296, 299, 301], "min_prob": [25, 59, 64, 159], "min_x": [50, 51, 159, 162], "mind": 36, "minim": [7, 21, 22, 25, 42, 50, 53, 59, 64, 136, 139, 151, 159, 161, 165, 176, 192, 194, 195, 199, 265], "minimax": [2, 60], "minimis": [51, 113, 114, 116, 159, 189, 190, 191, 193, 194], "minimiza": 136, "minimize_variational_problem": 25, "minimum": [101, 175, 229, 263, 275, 282, 285], "minu": [126, 127], "minut": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54], "mio": [24, 58], "mirror": [19, 32, 64, 71, 72, 138, 143, 159, 167, 169, 170, 171, 176, 179, 188, 201, 204, 213, 218, 220, 234, 288, 289, 292, 294, 296, 297], "miss": [10, 22], "mix": [15, 45, 46, 66, 257, 260], "mixin": 66, "mixtur": [24, 25, 139, 161, 197, 257], "mlp": 150, "mlp_ratio": 150, "mm": 73, "mmse": 172, "mn": [202, 225], "mnist": [42, 43, 44, 45, 46, 50, 51, 57, 85], "mnist_train": [50, 51], "mo": 95, "mode": [8, 13, 25, 27, 30, 31, 39, 41, 53, 73, 75, 81, 135, 138, 142, 148, 149, 158, 225, 275, 278, 282, 283, 284, 285, 296, 299, 301], "model": [0, 5, 13, 17, 18, 19, 20, 35, 38, 40, 41, 42, 43, 45, 46, 49, 50, 51, 54, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 84, 86, 87, 88, 89, 93, 95, 96, 97, 98, 99, 101, 102, 105, 106, 107, 109, 111, 112, 113, 114, 115, 116, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 168, 169, 170, 172, 182, 184, 185, 189, 190, 191, 192, 197, 202, 204, 209, 210, 211, 212, 213, 214, 216, 218, 224, 227, 228, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 282, 283, 285, 287, 289, 291, 292, 294, 296, 300], "model_epl": 25, "model_eq": 17, "model_infer": 73, "model_nam": [10, 39, 41, 42, 43, 44, 45], "model_new": [10, 53], "model_nontrain": 10, "model_patchnr": 25, "model_spec": 53, "modifi": [33, 62, 98, 99, 102, 271], "modl": [39, 41, 291], "modul": [0, 5, 8, 14, 17, 20, 21, 22, 25, 27, 31, 33, 34, 39, 41, 49, 50, 51, 52, 53, 54, 57, 58, 59, 60, 61, 62, 65, 66, 69, 73, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 122, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 165, 166, 169, 176, 177, 178, 179, 180, 197, 202, 206, 212, 213, 216, 217, 218, 222, 225, 236, 237, 260, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 281, 287, 289, 291, 300], "modulelist": 20, "modulu": 217, "mohan": 155, "moi": [42, 96], "moiloss": [42, 95], "momentum": [46, 105, 106, 131, 159, 162, 286], "monoton": 58, "mont": [17, 33, 37, 58, 86, 99, 102, 105, 106, 107, 141, 267, 268, 269, 270, 281], "montecarlo": [33, 267, 269, 270], "more": [0, 2, 4, 7, 10, 20, 25, 33, 39, 41, 46, 51, 53, 59, 60, 61, 64, 66, 69, 73, 86, 98, 102, 122, 127, 131, 135, 137, 138, 139, 141, 142, 149, 150, 157, 159, 160, 161, 163, 164, 188, 198, 202, 209, 213, 214, 218, 228, 236, 237, 252, 253, 258, 261, 269, 270, 271, 274, 278, 282, 283, 284, 285, 286, 287, 288, 289, 296, 299], "moreau": [28, 67, 169, 172, 194], "moreov": [13, 14, 25, 36, 159], "most": [39, 58, 197, 281, 292], "mostli": 214, "mother": [156, 157], "motion": [2, 5, 21, 27, 30, 49, 66, 98, 112, 113, 147, 258, 259], "motion_gener": 4, "motionblurgener": [2, 4, 66, 257, 260], "mous": 76, "move": 40, "mr": [77, 255], "mri": [17, 19, 20, 44, 47, 66, 68, 71, 72, 73, 77, 79, 85, 86, 88, 93, 94, 98, 102, 132, 154, 204, 208, 212, 213, 218, 223, 227, 249, 250, 251, 254, 255, 256, 259, 260, 262, 277, 281, 287, 291, 292, 296, 301], "mri_mask_128x128": 41, "mse": [2, 16, 49, 50, 51, 52, 53, 54, 61, 86, 88, 94, 95, 96, 97, 98, 99, 102, 104, 117, 124], "mse_loss": 51, "mseloss": [2, 61, 86, 88, 94, 96, 97, 98, 99, 102, 104, 110, 114, 121, 272, 273], "mu": [25, 186, 197, 214], "much": 39, "mul": [212, 218], "mulbackward0": [126, 203], "mult": [246, 247], "multi": [42, 52, 62, 77, 95, 96], "multicoil": [44, 77], "multidimension": 245, "multipl": [4, 17, 19, 27, 28, 34, 40, 44, 45, 46, 47, 66, 67, 68, 72, 73, 79, 85, 87, 90, 91, 93, 94, 95, 96, 99, 100, 102, 103, 106, 107, 119, 128, 141, 155, 182, 204, 211, 212, 213, 218, 257, 267, 273, 276, 277, 281, 292], "multipli": [12, 64, 66, 68, 70, 187, 189, 212, 213, 220, 226, 235, 247, 248, 261, 281, 290], "multiplier_adjoint": 246, "multiscal": 127, "multispectr": [40, 126, 275, 284], "must": [14, 15, 21, 22, 28, 29, 31, 44, 61, 65, 86, 92, 93, 95, 96, 98, 102, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 131, 135, 154, 179, 180, 203, 212, 249, 250, 253, 254, 262, 264, 266, 273, 281, 290, 298, 301], "my_dataset_nam": [16, 41, 42, 43, 49, 50, 51, 53, 54], "mykernel": 268, "mysampl": 268, "n": [0, 2, 10, 17, 20, 24, 25, 30, 35, 36, 37, 42, 46, 48, 58, 63, 66, 67, 89, 92, 99, 101, 102, 105, 106, 137, 172, 202, 204, 208, 210, 212, 213, 216, 217, 218, 219, 221, 222, 225, 229, 254, 255, 265, 266, 270, 281], "n0": [25, 186, 214], "n_0": [186, 214], "n_1": 137, "n_2": 137, "n_channel": [5, 6, 10, 13, 16, 21, 22, 27, 28, 29, 30, 31, 49, 50, 51, 52, 53, 54], "n_coeff": 156, "n_compon": [25, 139, 161, 197], "n_data": 52, "n_detector_pixel": [228, 237], "n_dual": 52, "n_eigen_psf": [4, 261], "n_eigenpsf": 4, "n_images_max": [5, 16, 27, 30, 41, 42, 43, 45, 46, 49, 50, 51, 53, 54], "n_it_max": [21, 151, 152, 173], "n_iter": [13, 196], "n_iter_train": 52, "n_layer": [2, 147], "n_level": [50, 156], "n_patch": 167, "n_primal": 52, "n_shard": 8, "n_step": 258, "n_tessel": 274, "n_tran": [17, 41, 141, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285], "n_wavelet_subband": 50, "n_zernik": [4, 11, 253], "na": [11, 252, 253], "nabla": [29, 33, 37, 51, 59, 64, 67, 101, 151, 152, 170, 171, 172, 173, 176, 177, 179, 180, 192, 193, 195, 196, 270], "nabla_": [36, 265], "nabla_adjoint": [151, 152, 173], "nabla_u": 182, "nabla_x": [169, 171, 177, 179, 180, 182], "name": [36, 53, 76, 157, 175, 188, 271, 287, 288, 289], "namedtupl": [76, 77, 80], "nan": 155, "nativ": [9, 17], "natur": [6, 13, 24, 25, 40, 43, 70, 123, 137, 161], "nb": [135, 142], "nbia": 80, "nc": [133, 134, 135, 142], "ndf": [2, 133, 147], "nearest": [11, 135, 137, 142, 150, 266, 277, 299], "necessari": [42, 50, 56, 73, 137, 265, 266, 273], "necessarili": [30, 165], "need": [4, 6, 10, 13, 20, 24, 33, 35, 53, 56, 62, 64, 66, 68, 70, 73, 80, 129, 132, 134, 143, 144, 145, 146, 148, 149, 154, 156, 190, 197, 220, 236, 237, 250, 254, 262], "neg": [25, 37, 67, 161, 166, 167, 179, 180, 186, 187, 197, 220, 268, 269, 270, 281], "negat": [281, 290], "negative_log_likelihood": [25, 161], "negative_patch_log_likelihood": 167, "neighbor": [0, 43, 97, 221], "neighbor2neighbor": [19, 47, 72, 73, 79, 85, 93, 128, 155, 204, 206, 213, 218, 220, 292], "neighbour": [135, 142], "net": [2, 16, 35, 42, 43, 44, 45, 46, 80, 101, 135, 155], "network": [3, 7, 18, 19, 25, 27, 35, 36, 37, 39, 59, 63, 66, 69, 72, 73, 79, 84, 85, 86, 89, 93, 97, 98, 99, 101, 102, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 118, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 140, 142, 143, 147, 148, 149, 150, 153, 154, 155, 166, 200, 202, 204, 212, 213, 216, 218, 228, 255, 258, 260, 265, 266, 271, 272, 273, 291, 292], "neural": [7, 16, 25, 36, 37, 52, 65, 89, 102, 118, 131, 132, 143, 148, 155, 166, 255], "neurip": 101, "neuro": 77, "neuron": [25, 166], "never": 40, "nevertheless": 36, "new": [4, 11, 12, 14, 33, 53, 73, 95, 96, 122, 196, 197, 200, 201, 208, 215, 223, 226, 227, 257, 260, 268, 281, 296], "new_demo_ei_ckp_150_v3": 41, "new_mask": 39, "new_x": 268, "next": [2, 4, 8, 11, 33, 35, 39, 40, 44, 46, 49, 50, 51, 54, 57, 58, 73, 80, 90, 91, 162], "next_phys": 96, "next_sigma": 35, "next_t": 36, "nf": [135, 138, 145, 146], "nfe": 36, "nftrainer": 25, "ngf": [2, 134], "ni": [11, 253], "nice": [9, 35], "nichol": 58, "nll": 167, "nn": [0, 2, 9, 15, 20, 33, 51, 58, 60, 61, 62, 66, 73, 86, 88, 89, 93, 94, 95, 96, 97, 98, 99, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 120, 121, 128, 131, 136, 150, 153, 154, 155, 158, 166, 200, 201, 202, 204, 206, 208, 212, 215, 216, 217, 220, 222, 223, 225, 238, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 291, 300], "no_grad": [24, 29, 35, 49, 50, 51, 54, 88, 110, 159, 204, 206, 287], "no_learning_infer": 73, "no_learning_inferec": 271, "no_learning_method": [44, 73, 271, 273], "nois": [0, 5, 6, 9, 13, 15, 17, 19, 20, 21, 22, 24, 27, 28, 30, 31, 32, 35, 36, 43, 44, 45, 49, 54, 58, 59, 63, 64, 67, 71, 72, 73, 76, 88, 96, 99, 101, 102, 105, 106, 107, 125, 130, 135, 136, 137, 138, 141, 148, 150, 155, 157, 159, 160, 168, 169, 170, 171, 172, 185, 188, 201, 202, 204, 206, 208, 209, 210, 212, 213, 214, 216, 217, 218, 219, 220, 224, 228, 229, 230, 234, 260, 263, 264, 265, 266, 268, 269, 270, 292, 294, 296, 297], "noise2invers": [44, 102], "noise2scor": 101, "noise_color": 216, "noise_dirnam": 76, "noise_grai": 216, "noise_level": [76, 137, 218], "noise_level_img": [5, 13, 20, 21, 22, 27, 28, 29, 30, 31, 49, 52, 54], "noise_model": [5, 7, 13, 14, 15, 21, 22, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 37, 44, 49, 52, 54, 57, 59, 66, 101, 206, 210, 213, 214, 218, 219, 220, 229, 230, 264, 266], "noise_std": 33, "noiseless": [105, 106, 107, 137], "noisemodel": [209, 210, 214, 219, 220, 229, 230], "noisi": [7, 20, 21, 22, 24, 25, 33, 34, 35, 36, 37, 40, 44, 58, 66, 76, 97, 99, 101, 105, 106, 107, 126, 130, 135, 137, 138, 139, 148, 150, 151, 152, 155, 156, 157, 208, 209, 210, 212, 214, 216, 217, 218, 219, 220, 229, 230], "noisy_imag": 58, "noisysampleidentifi": 76, "noll": [11, 252], "nomenclatur": [4, 11], "non": [0, 7, 17, 37, 39, 65, 66, 86, 98, 197, 202, 211, 213, 216, 217, 218, 221, 223, 227, 228, 254, 255, 281], "non_linear": [20, 156, 157], "none": [2, 4, 5, 6, 8, 11, 14, 25, 27, 28, 30, 39, 40, 42, 43, 44, 45, 46, 54, 62, 66, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 90, 95, 96, 98, 100, 101, 102, 105, 106, 107, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 135, 137, 138, 139, 141, 142, 144, 148, 149, 150, 151, 152, 153, 154, 155, 159, 161, 162, 165, 166, 169, 170, 175, 176, 178, 182, 183, 184, 188, 197, 200, 201, 202, 204, 207, 208, 209, 210, 212, 213, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 236, 237, 244, 245, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 293, 294, 296, 297, 298, 299, 300, 301], "nonetyp": [148, 207, 216], "nonexpans": [37, 58, 89], "noplot": 56, "norm": [0, 5, 12, 13, 14, 20, 21, 31, 33, 36, 53, 64, 73, 89, 92, 108, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 147, 151, 152, 155, 156, 157, 159, 163, 173, 175, 177, 184, 185, 202, 213, 228, 273], "norm_a2": 64, "norm_grad": 36, "norm_input": [117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127], "norm_lay": 150, "normal": [0, 13, 25, 35, 36, 50, 51, 108, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 138, 150, 151, 152, 166, 172, 185, 186, 213, 214, 220, 221, 228], "normalis": [61, 122, 124, 185], "normalizing_flow": [25, 166], "normliz": 228, "note": [0, 2, 4, 5, 17, 29, 33, 35, 36, 39, 40, 44, 49, 50, 51, 54, 57, 62, 66, 68, 73, 79, 85, 86, 126, 141, 190, 194, 217, 228, 237, 238, 239, 260, 271, 273, 278, 301], "notebook": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 296, 301], "noth": [122, 126, 281], "notic": [4, 11, 35, 183], "now": [0, 2, 4, 11, 16, 20, 24, 25, 34, 35, 36, 39, 40, 49, 50, 51, 53, 54, 66, 81, 286, 288], "np": [0, 2, 5, 11, 16, 20, 27, 30, 33, 34, 35, 36, 39, 41, 42, 43, 44, 45, 46, 52, 53, 202, 264], "npy": [0, 11, 20, 21, 27, 30, 41, 49], "nsgan": 110, "nufft": [0, 221], "nufftobj": 0, "null": [4, 11], "num_angl": 25, "num_block": 148, "num_channel": [252, 253, 257, 258, 260], "num_filt": 143, "num_head": 150, "num_it": 13, "num_lay": [143, 166], "num_refinement_block": 148, "num_step": 36, "num_train_timestep": [35, 36, 137, 266], "num_work": [5, 6, 8, 16, 27, 28, 30, 31, 41, 42, 43, 45, 46, 49, 50, 51, 52, 53, 54, 85], "number": [0, 2, 4, 5, 7, 8, 10, 11, 13, 14, 16, 20, 21, 22, 25, 27, 29, 30, 33, 34, 35, 36, 37, 39, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 57, 61, 62, 64, 71, 73, 76, 77, 79, 80, 85, 87, 90, 91, 96, 99, 100, 101, 102, 103, 105, 106, 107, 129, 132, 133, 134, 135, 136, 138, 139, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 159, 161, 162, 166, 167, 169, 173, 181, 183, 184, 186, 188, 197, 198, 199, 202, 209, 210, 212, 213, 214, 218, 219, 220, 221, 222, 224, 225, 228, 229, 230, 237, 244, 245, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 296, 299, 302, 303], "number_of_oper": 42, "numer": [11, 20, 33, 68, 89, 92, 198, 213, 228, 253, 268, 269, 270], "numpi": [0, 9, 11, 20, 33, 34, 35, 36, 238, 239, 241, 242, 244, 245, 246, 247, 264], "numpoint": 0, "nutshel": 50, "nwimag": 0, "nyquist": 252, "nyu": 77, "nz": [2, 131, 134], "o": [52, 202, 211, 225], "object": [5, 7, 12, 15, 20, 21, 22, 25, 33, 34, 37, 39, 41, 50, 53, 64, 66, 73, 77, 82, 110, 165, 193, 197, 213, 217, 218, 227, 253, 281, 286, 290, 296, 298, 299, 301], "observ": [24, 25, 29, 63, 95, 96, 102, 159, 161, 165, 182, 189, 191, 192, 213, 218], "obtain": [4, 7, 11, 12, 15, 33, 37, 65, 67, 69, 76, 99, 102, 141, 148, 217, 234, 264, 265, 266, 268, 269, 278], "odd": [9, 98, 238, 259], "odl": 52, "odlgroup": 52, "odot": [45, 46, 106, 107, 211, 226, 248], "off": [59, 66, 254, 281], "offer": [13, 14, 17, 59, 68], "offici": [81, 150], "offlin": [2, 73], "offset": [211, 254], "often": [63, 64, 66, 73], "oil": 11, "omega_": 20, "onc": [14, 16, 36, 53, 68, 139, 159, 161, 281], "one": [2, 8, 11, 12, 20, 36, 42, 56, 59, 62, 64, 66, 71, 76, 77, 79, 80, 86, 89, 91, 92, 96, 99, 100, 101, 102, 109, 111, 119, 126, 127, 129, 132, 134, 143, 144, 145, 146, 149, 154, 156, 158, 197, 200, 201, 202, 205, 207, 211, 213, 216, 228, 231, 236, 237, 249, 251, 255, 256, 259, 262, 268, 269, 270, 280, 281], "ones": [4, 9, 10, 14, 15, 31, 33, 35, 36, 50, 53, 58, 60, 61, 64, 66, 70, 99, 101, 102, 103, 117, 119, 120, 121, 122, 124, 125, 127, 185, 200, 201, 203, 205, 208, 213, 215, 223, 228, 251, 256, 264, 266, 295], "ones_lik": [9, 22, 185], "onesid": 119, "onli": [2, 4, 7, 8, 11, 14, 16, 21, 22, 25, 28, 33, 35, 36, 39, 40, 41, 42, 43, 44, 45, 46, 49, 52, 53, 64, 66, 73, 78, 85, 86, 95, 98, 99, 101, 102, 103, 122, 124, 135, 136, 137, 138, 142, 149, 150, 153, 154, 156, 157, 169, 175, 200, 212, 213, 228, 234, 237, 239, 242, 249, 251, 256, 259, 265, 268, 271, 277, 281, 286, 288, 296, 299], "onlin": [40, 73, 135, 137, 138, 142, 149, 150, 271], "online_measur": [25, 39, 40, 52, 73, 271, 273], "onto": 73, "open": [25, 39, 41, 53, 56, 71, 80, 245], "oper": [6, 11, 13, 18, 19, 24, 29, 35, 36, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 63, 64, 67, 68, 71, 72, 73, 79, 85, 86, 87, 88, 93, 94, 95, 96, 97, 99, 101, 102, 105, 106, 107, 108, 109, 111, 128, 139, 148, 151, 152, 153, 155, 159, 161, 162, 163, 164, 168, 169, 170, 173, 174, 175, 181, 182, 183, 184, 185, 186, 196, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 234, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 250, 252, 254, 255, 257, 258, 260, 261, 262, 264, 265, 266, 268, 270, 271, 272, 273, 281, 290, 292, 294, 296], "operatornam": [0, 2, 20, 21, 22, 28, 35, 51, 53, 64, 69, 89, 141, 159, 162, 163, 164, 165, 168, 169, 170, 171, 172, 183, 184, 185, 189, 190, 191, 192, 194, 195, 196, 266, 286, 287], "opnorm": 0, "opposit": 227, "opt": [17, 39, 273], "optic": [252, 253], "optician": 11, "optim": [0, 2, 7, 10, 13, 16, 23, 24, 25, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 59, 66, 67, 69, 72, 73, 131, 136, 138, 139, 151, 152, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 204, 210, 213, 217, 218, 225, 228, 265, 266, 268, 269, 270, 272, 273, 286, 287, 288, 289, 292, 294, 296, 297, 300], "optim_build": [0, 5, 13, 21, 22, 27, 28, 29, 30, 31, 59, 64, 159], "optim_iter": [28, 50, 51, 52, 53, 159, 162, 188, 189, 190, 191, 192, 193, 194, 195, 196], "optim_step": 25, "optimalgo": 159, "optimis": [2, 131], "optimiter": [28, 159, 188, 189, 190, 191, 192, 193, 194, 195, 196, 287, 288, 289], "optimize_z": 131, "optin": 73, "option": [4, 14, 36, 44, 46, 64, 66, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 87, 88, 90, 91, 100, 101, 103, 105, 106, 107, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 155, 159, 162, 187, 200, 202, 207, 210, 213, 214, 216, 218, 219, 220, 222, 224, 225, 226, 228, 229, 230, 238, 241, 248, 249, 250, 251, 256, 259, 260, 261, 271, 273, 286, 287, 293, 294], "order": [4, 8, 17, 33, 34, 35, 36, 88, 90, 91, 108, 119, 126, 151, 213, 225, 252, 253, 264], "org": [4, 7, 11, 33, 34, 37, 46, 88, 89, 92, 96, 99, 105, 106, 107, 119, 127, 128, 133, 134, 138, 141, 145, 146, 198, 202, 205, 207, 209, 211, 224, 228, 237, 252, 258, 264, 265, 266, 269, 270, 275, 284, 296, 299, 301], "orgin": 213, "orig": [17, 39, 40], "origin": [2, 13, 20, 21, 22, 25, 36, 39, 50, 52, 58, 102, 105, 109, 111, 113, 114, 133, 134, 136, 138, 140, 147, 234, 264, 266, 274, 278, 281], "original_data_dir": [5, 6, 10, 16, 20, 21, 22, 27, 29, 30, 41, 42, 43, 45, 46, 49, 50, 51, 52, 53, 54], "ortho": 0, "orthogon": [156, 202, 269, 299], "orthonorm": [156, 175, 204, 221], "osa": 4, "ossci": [44, 46, 50], "other": [0, 4, 6, 8, 12, 35, 52, 57, 62, 64, 68, 73, 76, 86, 88, 94, 95, 96, 97, 102, 104, 130, 148, 156, 205, 212, 213, 218, 260, 271, 272, 273, 281, 290], "otherwis": [5, 6, 16, 27, 28, 30, 31, 41, 42, 43, 45, 46, 49, 50, 51, 53, 54, 73, 88, 89, 92, 96, 103, 105, 119, 137, 141, 159, 162, 200, 202, 207, 208, 212, 213, 215, 216, 223, 225, 226, 228, 232, 233, 235, 238, 239, 240, 241, 242, 243, 248, 273], "otimes_": 11, "our": [0, 2, 17, 21, 22, 28, 33, 36, 39, 44, 50, 51, 53, 56, 58, 71, 120, 121, 122, 148, 190], "ourselv": 15, "out": [2, 8, 11, 25, 36, 39, 42, 57, 71, 92, 202, 245, 268, 269, 270, 281], "out_channel": [2, 13, 16, 28, 31, 40, 42, 43, 44, 45, 46, 135, 137, 138, 142, 145, 146, 148, 155, 289], "out_siz": 236, "outer": 269, "output": [20, 21, 22, 28, 29, 30, 31, 35, 36, 39, 44, 50, 51, 59, 66, 73, 85, 86, 87, 92, 98, 102, 110, 129, 131, 132, 134, 135, 137, 138, 139, 142, 145, 146, 148, 153, 154, 155, 156, 159, 161, 162, 166, 197, 200, 201, 204, 207, 208, 216, 220, 221, 223, 224, 226, 227, 228, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 271, 277, 278, 281, 286, 287], "output_s": [2, 134], "outsid": [11, 296], "over": [0, 6, 36, 39, 44, 58, 59, 61, 73, 99, 102, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 141, 144, 151, 152, 162, 163, 175, 228, 281], "overcomplet": [157, 202, 213, 228], "overfit": [7, 136], "overlaid": 298, "overlap": [39, 86, 98, 139, 161, 167, 223, 227], "overlin": [35, 36, 217, 265, 266], "overload": 8, "overrid": [60, 73, 98, 109, 111, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 131, 144, 150, 197, 273, 274, 281], "overridden": [129, 131, 132, 134, 143, 144, 145, 146, 149, 154, 236, 237], "overriden": 110, "overrifden": 122, "oversampl": [0, 13, 221], "oversampling_ratio": 13, "overwrit": [170, 209, 210, 214, 219, 220, 230, 271], "overwritten": [64, 170, 202, 213, 218, 228], "own": [2, 14, 18, 19, 28, 52, 68, 72, 76, 79, 85, 102, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 135, 137, 138, 142, 149, 150, 204, 206, 210, 213, 218, 251, 292, 296], "ozan": 52, "p": [0, 5, 9, 20, 22, 27, 30, 33, 36, 37, 63, 67, 77, 101, 106, 107, 119, 126, 139, 159, 161, 172, 175, 214, 219, 220, 224, 248, 265, 270, 281], "p_": [2, 25, 33, 37, 67, 112, 113, 114, 115, 116, 172], "p_i": [25, 139, 161, 167], "p_ix": [139, 161], "p_p": 20, "p_x": [2, 25, 112, 113], "p_y": [114, 115, 116], "p_z": 25, "packag": [17, 39, 60, 61, 64, 66, 67, 68, 69, 77, 130, 221, 273], "pad": [0, 2, 4, 9, 11, 66, 131, 144, 155, 156, 167, 200, 201, 207, 213, 216, 221, 226, 238, 239, 240, 241, 242, 243, 248, 261, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285], "pad_if_need": 77, "pad_input": 156, "padding_mod": 278, "page": [58, 77], "pair": [2, 6, 16, 42, 53, 57, 60, 73, 79, 85, 99, 102, 260, 271, 272], "pajot": [2, 114], "pan": [12, 40, 126, 275, 284], "pan_lr": 126, "panchromat": 126, "pansharpen": [12, 15, 40, 126, 275, 284], "pantiltrot": [17, 40], "papadaki": 30, "paper": [2, 5, 7, 9, 25, 27, 34, 37, 40, 52, 101, 113, 114, 135, 136, 138, 143, 148, 189, 214, 248, 266, 274, 278], "paper_fil": 101, "parallel": [5, 6, 8, 16, 27, 28, 30, 31, 41, 42, 43, 45, 46, 49, 50, 51, 53, 54, 62, 130, 228, 236, 237], "parallel_comput": [228, 236, 237], "param": [28, 30, 33, 52, 57, 66, 73, 79, 85, 95, 96, 148, 202, 204, 208, 212, 213, 215, 216, 228, 238, 254, 255, 261, 262, 268, 281, 301], "param_nam": [257, 260], "param_valu": [257, 260], "paramet": [0, 2, 5, 7, 10, 13, 14, 16, 20, 21, 22, 24, 27, 28, 29, 30, 33, 35, 36, 37, 39, 40, 44, 53, 58, 68, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 296, 297, 298, 299, 300, 301], "parameter": 209, "parameteris": 275, "parametris": [282, 283, 285], "params_algo": [0, 5, 10, 13, 21, 22, 27, 28, 29, 30, 31, 49, 50, 51, 52, 53, 54, 59, 64, 69, 159, 162, 188, 287, 288, 289, 300], "params_algo_new": [10, 53], "params_dict": [257, 260], "params_pc": [4, 226], "parent": [204, 213, 218, 287], "part": [15, 69, 74, 135, 158, 208, 215, 223], "partial": [40, 69, 78, 122, 182, 213, 218, 286], "particular": [0, 4, 11, 12, 29, 69, 73, 77, 152, 190, 221, 228], "pass": [2, 4, 17, 44, 56, 58, 62, 66, 68, 69, 73, 86, 87, 90, 91, 93, 95, 96, 98, 99, 100, 102, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 131, 132, 133, 134, 140, 141, 143, 144, 145, 146, 147, 149, 154, 188, 192, 200, 207, 212, 236, 237, 244, 249, 251, 256, 259, 272, 273, 281, 286, 287, 288, 289, 301], "pastur": 202, "patch": [26, 57, 58, 72, 73, 82, 118, 139, 147, 150, 161, 166, 167, 169, 170, 204, 206, 210, 212, 213, 214, 218, 228, 230, 294, 296], "patch_dimens": 161, "patch_norm": 150, "patch_siz": [24, 25, 82, 139, 150, 161, 166, 167], "patchdataset": 25, "patchgan": [2, 147], "patchgandiscrimin": [2, 273], "patchnr_batch_s": 25, "patchnr_dataload": 25, "patchnr_epoch": 25, "patchnr_learning_r": 25, "patchnr_lodopab_smal": [25, 166], "patchnr_lodopab_small2": 25, "patchnr_prior": 25, "patchnr_subnets": 25, "patchprior": 25, "path": [13, 39, 44, 56, 57, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 135, 137, 138, 139, 142, 149, 150, 161, 166, 273, 293, 296, 297, 299, 300], "pathlib": [5, 6, 10, 13, 16, 20, 21, 22, 27, 28, 29, 30, 31, 39, 41, 42, 43, 45, 46, 49, 50, 51, 52, 53, 54, 77, 273], "patient": 80, "patient_id": 80, "pattern": [4, 11, 15, 27, 56, 160, 205, 223, 225], "pc_gener": [4, 226, 261], "pd": [165, 190], "pdf": [29, 34, 88, 101, 128, 179, 255, 258, 262], "pditer": 52, "pdnet_dualblock": 52, "pdnet_primalblock": 52, "pdnetdatafid": 52, "pdnetiter": 52, "pdnetprior": 52, "peak": [0, 9, 13, 125, 224], "penal": [5, 64, 159], "per": [7, 9, 17, 34, 37, 41, 42, 50, 58, 67, 73, 79, 80, 86, 101, 135, 137, 138, 141, 149, 156, 161, 205, 213, 224, 225, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 301], "percentag": [268, 269, 270, 275, 282, 283, 285], "percept": 61, "perceptu": [2, 118], "pereyra": 269, "perform": [0, 5, 7, 16, 20, 21, 22, 27, 31, 35, 36, 39, 44, 52, 53, 58, 61, 64, 68, 69, 73, 74, 83, 84, 85, 86, 98, 99, 102, 105, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 132, 134, 136, 137, 143, 144, 145, 146, 148, 149, 154, 159, 162, 165, 170, 176, 179, 188, 197, 200, 201, 221, 226, 228, 236, 237, 238, 239, 240, 241, 242, 243, 248, 266, 273, 277, 278, 280, 281, 286, 287, 288, 289], "period": [268, 269, 270, 278], "permut": 0, "persist": 4, "persist_prev": 249, "perspect": [40, 275, 284], "perturb": 99, "pf": 252, "pgd": [10, 13, 21, 22, 30, 31, 49, 50, 51, 53, 59, 64, 69, 159, 162, 165, 188, 195, 286, 287, 288, 289], "pgditer": [30, 31, 50, 51, 159, 162], "pgl": 40, "phantom": 13, "phase": [4, 18, 19, 39, 58, 72, 86, 98, 135, 158, 159, 168, 169, 170, 181, 188, 196, 210, 217, 218, 222, 252, 253, 259, 292, 294, 296], "phase2phas": [39, 98, 259], "phase2phaseloss": [39, 86, 102, 259], "phase2phasesplittingmaskgener": 249, "phase_retriev": [13, 217], "phaseless": 13, "phaseretriev": [181, 196, 222], "phenomenon": 7, "phi": [29, 42, 64, 128, 169, 176, 177, 178, 179, 180], "phi_": [16, 42], "photon": [18, 19, 72, 76, 186, 214, 218, 224, 292], "phyic": 28, "physic": [0, 2, 4, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 57, 59, 60, 63, 64, 67, 69, 73, 79, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 101, 102, 105, 106, 107, 109, 111, 114, 126, 128, 131, 136, 139, 153, 154, 159, 161, 162, 165, 181, 182, 183, 184, 185, 189, 190, 191, 192, 193, 196, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 286, 287, 289], "physicist": 11, "physics1": [12, 213], "physics2": [12, 14, 213], "physics_concat": 12, "physics_gener": [2, 57, 73, 85, 95, 96, 271, 273], "physics_stack": 12, "physicsgener": [66, 73, 85, 95, 96, 102, 250, 251, 257, 261, 263, 271, 273], "pi": [0, 13, 31, 228, 234], "pi_": 270, "pick": [8, 71, 277], "pickl": [25, 39, 41, 53], "piecewis": 274, "pil": [8, 74, 75, 76, 78, 81, 83, 84, 275, 282, 283, 284, 285], "pinhol": [11, 68, 282, 283, 285], "pinv": [44, 128], "pip": [19, 71, 274], "pipelin": 77, "pixel": [0, 2, 9, 10, 13, 16, 17, 22, 28, 34, 36, 37, 40, 44, 45, 46, 50, 51, 53, 66, 75, 83, 98, 125, 127, 129, 135, 142, 148, 200, 201, 205, 207, 212, 213, 218, 224, 225, 228, 231, 237, 249, 251, 253, 256, 259, 277, 281], "pixel_s": [11, 252, 253], "pixel_spac": [228, 237], "pixelshuffl": 150, "pixelshuffledirect": 150, "pixelsize_xi": 11, "pixelsize_z": 11, "pixelsuffl": [135, 142], "pixelwis": [36, 39, 102, 212, 251, 256, 281], "pkl": 77, "placehold": 126, "placeholderdataset": 273, "plai": [13, 30, 32, 33, 37, 54, 58, 59, 69, 71, 72, 135, 138, 152, 159, 160, 168, 169, 170, 171, 188, 201, 204, 213, 218, 220, 234, 266, 269, 270, 271, 292, 294, 296, 297], "plain": [264, 266], "plane": [4, 11, 228, 253], "plausibl": 63, "pleas": [0, 25, 39, 41, 53, 56, 71, 77, 272, 281], "plot": [0, 2, 4, 5, 6, 8, 11, 12, 13, 14, 15, 16, 17, 20, 24, 30, 35, 36, 39, 40, 41, 42, 43, 45, 49, 52, 53, 56, 59, 73, 159, 226, 271, 273, 286, 287, 297, 298, 299, 300, 301], "plot_convergence_metr": [0, 5, 21, 22, 27, 30, 31, 52, 271, 273], "plot_curv": [0, 21, 22, 28, 29, 31], "plot_imag": [2, 5, 27, 30, 39, 41, 42, 43, 44, 45, 46, 52, 53, 73, 271, 273], "plot_inset": 0, "plot_kwarg": 301, "plot_measur": [73, 271, 273], "plot_ortho3d": 11, "plot_paramet": [50, 51, 54], "plot_video": 39, "plt": [9, 11, 13, 20, 35, 39, 296], "plu": 39, "plug": [13, 30, 32, 33, 36, 37, 54, 58, 59, 69, 71, 72, 135, 138, 152, 159, 160, 168, 169, 170, 171, 188, 201, 204, 213, 218, 220, 234, 266, 269, 270, 271, 292, 294, 296, 297], "pm": 277, "png": [4, 8, 13, 15, 24, 29, 31, 35, 36, 59, 75, 76, 78, 81, 83, 84, 296], "pnp": [10, 19, 32, 38, 41, 49, 53, 58, 64, 69, 71, 72, 73, 79, 85, 89, 135, 138, 159, 160, 165, 169, 170, 172, 188, 201, 204, 210, 212, 213, 218, 225, 228, 266, 268, 270, 271, 272, 289, 292, 294, 296, 297], "pock": [10, 19, 52, 55, 72, 73, 79, 85, 93, 104, 151, 152, 156, 168, 169, 170, 188, 190, 204, 212, 213, 218, 271, 287, 288, 289, 292], "poential": 170, "point": [0, 37, 49, 56, 62, 64, 69, 89, 159, 162, 165, 197, 213, 258, 286, 287], "poisson": [9, 15, 19, 25, 32, 43, 45, 46, 67, 71, 72, 76, 101, 106, 107, 138, 159, 169, 170, 171, 179, 186, 187, 188, 201, 204, 213, 214, 218, 219, 220, 224, 234, 292, 294, 296, 297], "poissongaussiannois": 15, "poissonlikelihood": [29, 35, 179], "poissonnois": [15, 29, 43, 45, 101, 224], "polynomi": [4, 11, 252], "pool": [135, 142, 144], "poor": 13, "popular": [60, 61, 66, 141], "pos_weight": 143, "posit": [17, 35, 45, 46, 59, 64, 106, 107, 141, 143, 150, 187, 220, 272, 277, 281], "possibl": [0, 4, 11, 12, 13, 25, 39, 41, 49, 53, 56, 59, 62, 64, 66, 125, 137, 138, 159, 200, 216, 286, 288], "possibli": [25, 33, 60, 95, 96, 106, 211, 268], "post": [16, 34, 37, 61], "posterior": [33, 34, 36, 37, 67, 264, 265, 266, 268, 269, 270], "posteriori": [67, 172], "postiv": [179, 180], "potenti": [7, 29, 30, 51, 73, 154, 167, 170, 176, 177, 178, 179, 180, 182, 188, 288, 289], "pow": 33, "power": [12, 14, 31, 35, 89, 92, 126, 137, 213, 225], "pp": [27, 151, 152, 160], "pr": 56, "practic": [0, 40, 50, 149, 175, 213], "pre": [0, 13, 36, 59, 61, 69, 118, 148], "precis": [0, 20, 25, 64, 141, 159, 163, 164, 213, 252, 253], "preconula": 33, "predefin": [64, 71, 213, 218], "prefer": 56, "prepar": [8, 56], "preprocess": [122, 196], "present": [41, 42, 43], "preserv": 0, "pretrain": [2, 13, 24, 25, 27, 28, 29, 30, 31, 34, 35, 37, 39, 40, 41, 42, 43, 44, 45, 49, 54, 62, 67, 71, 73, 101, 113, 114, 116, 128, 135, 137, 138, 139, 142, 148, 149, 150, 160, 161, 166, 264, 266], "pretrained_noise_level": 150, "prevent": [11, 39], "previou": [33, 35, 62, 159, 162, 189, 190, 191, 249, 268], "previous": 20, "primal": [19, 32, 53, 55, 59, 64, 72, 73, 93, 104, 138, 145, 146, 151, 152, 159, 162, 165, 168, 169, 170, 188, 190, 204, 210, 213, 218, 225, 228, 287, 289, 292, 294, 296, 297], "primari": [151, 152], "princip": 196, "print": [0, 4, 7, 8, 10, 11, 12, 13, 14, 16, 21, 22, 24, 25, 28, 29, 31, 33, 34, 37, 39, 41, 42, 43, 45, 46, 53, 57, 64, 66, 73, 74, 75, 76, 77, 78, 80, 81, 83, 84, 86, 89, 92, 98, 99, 101, 102, 136, 151, 152, 159, 213, 252, 253, 257, 258, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 273], "prior": [10, 13, 18, 20, 23, 24, 26, 27, 28, 29, 31, 39, 41, 49, 50, 53, 54, 55, 58, 63, 67, 69, 71, 72, 73, 79, 82, 85, 86, 93, 104, 132, 135, 136, 139, 152, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 188, 189, 190, 191, 192, 193, 195, 196, 201, 202, 204, 206, 210, 212, 213, 214, 218, 228, 230, 234, 249, 268, 269, 270, 271, 287, 288, 289, 291, 292, 294, 296, 297, 300], "prior_new": [10, 53], "priori": 25, "prob": [4, 257], "probability_mask": [16, 53], "probabl": [16, 25, 45, 53, 106, 107, 202, 212, 225, 255, 257, 262], "probail": 25, "problem": [3, 6, 7, 13, 14, 16, 17, 19, 24, 25, 32, 34, 39, 41, 42, 46, 49, 50, 53, 56, 58, 59, 60, 61, 64, 65, 66, 69, 70, 71, 72, 73, 79, 84, 85, 88, 93, 101, 104, 109, 111, 112, 113, 114, 115, 116, 131, 133, 134, 136, 138, 139, 140, 147, 151, 152, 155, 156, 157, 159, 160, 161, 162, 165, 169, 170, 171, 188, 200, 201, 202, 204, 206, 207, 211, 213, 216, 218, 220, 227, 228, 234, 258, 260, 264, 266, 273, 287, 292, 294, 296, 297, 301], "proce": 162, "procedur": [33, 53, 155], "proceed": [27, 101, 160], "process": [16, 46, 58, 60, 61, 73, 85, 86, 98, 130, 152, 153, 158, 175, 183, 202, 213, 218, 222, 227, 258, 266], "prod": [13, 202], "prod_": 36, "produc": [67, 154, 213, 218, 281], "product": [17, 33, 66, 68, 92, 204, 213, 217, 218, 226, 248, 281], "product_convolution2d": 4, "productconvolutionblurgener": [4, 226], "progress": [16, 36, 41, 42, 43, 45, 46, 49, 50, 51, 52, 53, 54, 73, 85, 131, 136, 197, 264, 265, 266, 267, 268, 269, 270, 271, 273], "progress_bar": [25, 73], "project": [0, 17, 40, 50, 51, 56, 58, 68, 145, 183, 184, 221, 228, 236, 237, 268, 269, 270, 275, 281, 282, 283, 284, 285], "promot": 63, "propag": [11, 43, 88, 97], "properli": [0, 8, 101], "properti": [17, 66, 68], "proport": [105, 106, 107, 156, 254], "propos": [0, 20, 24, 25, 36, 40, 51, 89, 92, 101, 126, 131, 133, 134, 140, 141, 147, 148, 161, 192], "propto": [37, 67, 172], "prototyp": 129, "provid": [0, 4, 7, 11, 13, 14, 15, 21, 22, 27, 28, 29, 30, 31, 33, 59, 60, 64, 65, 66, 67, 69, 70, 73, 77, 80, 85, 101, 109, 110, 111, 112, 113, 114, 115, 116, 141, 156, 166, 175, 200, 201, 204, 208, 210, 214, 215, 216, 219, 220, 223, 227, 228, 229, 230, 231, 245, 260, 271, 272, 273, 281, 296, 301], "prox": [0, 20, 21, 22, 28, 35, 50, 51, 52, 53, 64, 163, 164, 168, 169, 170, 173, 174, 175, 183, 184, 185, 189, 190, 191, 192, 194, 195, 196, 201, 208, 213, 215, 223, 266], "prox_conjug": [28, 169], "prox_l0": 156, "prox_l1": 156, "prox_l2": [14, 66, 73, 105, 204, 207, 213, 271], "prox_tau_fx": 152, "proxim": [5, 14, 20, 21, 22, 28, 30, 31, 35, 52, 54, 59, 64, 69, 151, 152, 162, 163, 164, 168, 169, 170, 173, 174, 175, 183, 184, 185, 186, 188, 195, 204, 207, 212, 213, 269, 287, 288, 289], "pseudo": [0, 2, 4, 12, 14, 44, 66, 73, 105, 128, 201, 208, 212, 215, 217, 223, 228], "pseudoinvers": [202, 204, 208, 213, 218, 228], "pseudorandom": [202, 210, 212, 214, 219, 220, 222, 224, 225, 229, 230, 260], "psf": [0, 4, 18, 19, 72, 200, 213, 218, 252, 253, 258, 260, 261, 292, 296, 299], "psf_coll": 11, "psf_confoc": 11, "psf_gener": [4, 226, 261], "psf_grid": [4, 226], "psf_log": 0, "psf_size": [4, 11, 66, 226, 252, 253, 257, 258, 260, 261], "psf_size_xi": 11, "psf_size_z": 11, "psfgener": [4, 11, 252, 253, 258, 261], "psi": [20, 22, 156, 157, 175], "psi_": 20, "psi_1": 157, "psi_2": 157, "psi_i": 0, "psi_l": 157, "psnr": [0, 2, 5, 7, 13, 16, 20, 21, 22, 24, 25, 27, 28, 29, 30, 31, 33, 34, 37, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 131, 159, 213, 264, 266, 271, 273, 286, 287], "psnr_epll": 25, "psnr_fbp": 25, "psnr_ob": 24, "psnr_patchnr": 25, "psnr_recon": 24, "psnr_std": [2, 5, 16, 27, 30, 39, 41, 42, 43, 44, 45, 46, 52, 53], "pt": [24, 25, 36, 39, 41, 139, 161, 166], "pth": [2, 10, 13, 27, 28, 37, 39, 40, 41, 42, 43, 44, 45, 53, 57, 73, 148, 202, 212, 217, 222, 225], "ptwt": 10, "public": [29, 56, 179], "pula": 33, "pula_mean": 33, "pula_var": 33, "pulaiter": 33, "pull": 56, "pupil": [4, 11, 252, 253], "pupil_s": [252, 253], "pure": [40, 137, 266, 275, 281], "purpos": 10, "push": 25, "put": [74, 75, 76, 78, 81, 83, 84, 249], "py": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 72, 140, 256, 273], "pyiqa": [27, 118, 123], "pyplot": [9, 11, 13, 20, 35], "pytest": 56, "python": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 56, 130, 273], "python3": [17, 39, 273], "pytorch": [4, 5, 6, 7, 10, 11, 15, 16, 20, 21, 22, 25, 27, 28, 29, 30, 31, 36, 37, 39, 41, 42, 43, 45, 46, 49, 50, 51, 52, 53, 54, 57, 62, 66, 133, 134, 135, 137, 138, 142, 144, 149, 150, 202, 222, 225, 238, 260], "pywavelet": 156, "pywt": 175, "q": [2, 36, 112, 113, 114, 115, 116, 126, 162], "qk": 150, "qk_scale": 150, "qkv_bia": 150, "qquad": [64, 159, 162, 165], "quad": [2, 20, 25, 59, 64, 99, 105, 107, 114, 159, 218], "quadrat": [24, 25, 27, 39, 41, 49, 139, 160, 161, 188, 194, 266, 287, 288, 289, 291], "qualiti": [2, 16, 52, 53, 123, 126], "quantif": [19, 38, 71, 72, 89, 138, 169, 170, 172, 204, 210, 212, 213, 218, 268, 270, 292, 294, 296], "quantifi": 37, "quantiti": [11, 109, 111, 213], "quantiz": [213, 218], "queri": 150, "question": [56, 71], "quick": [2, 8], "quickli": 70, "quickstart": 73, "quit": 0, "r": [0, 8, 9, 11, 14, 28, 30, 33, 35, 36, 43, 45, 46, 52, 53, 59, 64, 89, 92, 97, 99, 101, 102, 105, 106, 107, 135, 142, 144, 151, 159, 169, 183, 187, 202, 204, 212, 221, 224, 271], "r2": 151, "r2d2": 0, "r2r": 99, "r2rmodel": 99, "r_": [9, 33, 42, 224], "rachford": [54, 188, 191, 287, 288, 289], "radford": [133, 134], "radio": [1, 19, 72, 159, 169, 170, 175, 188, 213, 218, 221, 296, 297, 298], "radiointerferometri": 0, "radiu": [10, 53, 183, 184, 228, 237], "radon": [15, 25, 66, 228, 236], "rai": [228, 237], "rais": [118, 123, 170], "ramp": [228, 236], "rand": [11, 15, 66, 68, 86, 98, 126, 153, 154, 210, 214, 219, 220, 229, 230, 253, 281, 296, 299, 301], "rand_lik": 208, "randn": [58, 66, 69, 163, 202, 204, 206, 208, 212, 213, 215, 216, 222, 223, 225, 228, 231, 275, 282, 283, 284, 285, 289], "randn_lik": [0, 13, 33, 35, 36, 66, 92], "random": [0, 2, 4, 5, 6, 7, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 27, 28, 29, 30, 31, 36, 37, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 53, 54, 58, 59, 66, 68, 70, 72, 73, 85, 86, 87, 88, 95, 96, 98, 100, 102, 105, 106, 107, 135, 136, 137, 138, 141, 142, 149, 150, 159, 163, 166, 168, 169, 170, 188, 202, 204, 206, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 228, 229, 230, 249, 250, 251, 252, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 292, 294, 296, 302], "random_lat": 131, "random_phantom": 52, "random_split": [2, 40], "randomappli": 281, "randomcrop": [16, 49, 53, 54, 74, 75, 76, 77, 78, 81, 83, 84], "randomeras": 17, "randomhorizontalflip": 77, "randomli": [4, 8, 11, 16, 36, 39, 44, 53, 57, 68, 73, 85, 86, 96, 100, 102, 141, 167, 249, 250, 254, 255, 256, 257, 260, 262, 271, 274, 276, 277, 279, 280, 281], "randommaskgener": [15, 66, 208, 215, 223, 255], "randomphantomdataset": 52, "randomphaseretriev": 13, "randomverticalflip": 77, "randon": 96, "rang": [0, 4, 10, 13, 14, 17, 18, 19, 20, 22, 25, 35, 36, 39, 40, 41, 42, 50, 52, 53, 62, 64, 66, 68, 72, 73, 83, 92, 118, 123, 137, 148, 150, 162, 218, 224, 266, 267, 277, 281, 292], "rangl": [169, 176], "rapidli": 27, "rare": [39, 86, 249], "rate": [2, 7, 73, 131, 136, 149, 150, 254], "rather": [10, 15, 35, 67, 70, 172, 221], "ratio": [0, 9, 13, 15, 44, 102, 125, 150, 251, 253, 256, 267], "raw": [8, 44, 46, 50, 74, 75, 76, 77, 78, 80, 81, 83, 84], "raw_hf_train_dataset": 8, "rcparam": 35, "re": [12, 15, 114, 115, 116, 126, 136], "re_init": 136, "reach": [5, 28, 30, 159, 162, 254], "read": [0, 8, 59, 77], "reader": [0, 62], "readi": [0, 2, 4, 11, 20, 36, 57], "readili": [0, 20, 35, 36], "real": [0, 13, 15, 58, 76, 79, 81, 109, 110, 111, 147, 158, 208, 215, 221, 223, 240, 243], "real_fft": [239, 240, 242, 243], "real_imag": 158, "real_label": 110, "real_project": [0, 221], "realis": 44, "realist": 58, "realiz": [0, 21, 22, 35, 73, 99, 102, 252, 253], "reason": [0, 20], "rec": [12, 14, 49, 50, 51, 54], "rec601": 203, "recal": [53, 69, 141, 287], "receiv": [42, 226], "recip": [129, 132, 134, 143, 144, 145, 146, 149, 154, 236, 237], "reciproc": 281, "recognit": [27, 160], "recommend": [7, 12, 14, 15, 16, 25, 35, 39, 40, 41, 43, 44, 45, 46, 53, 62, 64, 71, 136, 148, 152, 175, 202, 213, 225], "recomposit": 156, "recon": [0, 21, 22, 28, 29, 31, 36, 50, 51], "recon_epl": 25, "recon_patchnr": 25, "reconstruct": [0, 2, 17, 18, 19, 21, 22, 24, 28, 29, 30, 31, 33, 35, 37, 38, 40, 44, 47, 49, 50, 51, 52, 54, 57, 63, 67, 69, 70, 72, 73, 79, 83, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 131, 132, 135, 136, 150, 153, 154, 155, 159, 161, 168, 169, 170, 188, 202, 204, 208, 210, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 227, 228, 237, 249, 250, 251, 255, 259, 260, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 291, 292, 294, 296, 301], "reconstrunct": 181, "recorrupt": 99, "recov": [0, 13, 17, 21, 22, 39, 275], "recreat": 204, "red": [9, 19, 29, 32, 72, 79, 85, 142, 159, 169, 170, 172, 188, 207, 210, 213, 218, 271, 292], "redefin": [0, 21, 22, 52], "reduc": [0, 7, 35, 36, 41, 42, 43, 44, 45, 46, 51, 61, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 139, 161, 175], "reduct": [51, 61, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 150], "redund": 20, "refer": [2, 25, 35, 58, 61, 63, 86, 88, 93, 98, 102, 109, 111, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 214], "refin": 148, "reflect": [4, 17, 20, 40, 58, 141, 200, 207, 216, 226, 238, 241, 248, 261, 275, 278, 280, 282, 283, 284, 285], "reformul": [50, 53], "refract": [11, 253], "reg": [59, 63, 64, 67, 69, 159, 163, 164, 170, 171, 172, 173, 174, 175, 197], "reg_l2": 92, "region": [0, 77], "regist": [129, 132, 134, 143, 144, 145, 146, 149, 154, 236, 237], "regnam": [22, 53, 59, 64, 159, 164, 168, 169, 170, 171, 174, 175, 190], "regular": [4, 5, 7, 10, 13, 19, 20, 21, 22, 25, 31, 32, 35, 37, 43, 49, 50, 51, 54, 59, 63, 64, 66, 69, 71, 72, 79, 85, 97, 138, 142, 151, 152, 159, 162, 163, 164, 165, 169, 170, 171, 172, 173, 174, 175, 188, 196, 197, 207, 210, 213, 218, 269, 270, 271, 286, 287, 288, 289, 292], "regularis": [0, 21, 22, 35, 53, 64, 92, 159, 162, 188, 287, 288, 289], "regularizi": 25, "regval": 92, "reimplement": [114, 281], "rel": [2, 20, 66, 213], "rel_crit": 20, "relat": [11, 25, 28, 39, 41, 50, 51, 53, 77], "relationship": 0, "relax": [54, 64, 142, 151, 152, 165, 189, 190, 191], "relaxation_step": 165, "releas": [17, 25, 39, 41, 53, 150], "relev": [58, 159, 188, 287, 288, 289, 291], "reli": [0, 2, 28, 64, 170, 213, 221], "relu": [131, 135, 138, 142], "remain": [14, 35, 273], "remark": 36, "remov": [39, 42, 73, 74, 75, 76, 83, 84, 98, 106, 128, 148, 154, 208, 212, 227, 271, 272], "render": 39, "reparametr": 36, "repeat": [20, 39, 52, 227, 250, 254, 255, 262], "replac": [2, 49, 52, 54, 59, 61, 69, 276, 277], "replic": [4, 200, 207, 216, 226, 238, 241, 248, 261], "report": 39, "repositori": [56, 71, 97, 135, 137, 138, 142, 149, 150], "repres": [21, 22, 70, 76, 80, 101, 139, 159, 161, 208, 215, 216, 223, 255, 262, 281, 290], "represent": [30, 133, 134], "reproduc": [4, 5, 6, 7, 11, 13, 15, 16, 20, 21, 22, 27, 28, 29, 30, 31, 37, 41, 42, 43, 45, 46, 49, 50, 51, 52, 53, 54, 163, 202, 204, 206, 208, 212, 215, 222, 225, 228, 264, 274], "request": 56, "requir": [2, 9, 14, 17, 27, 28, 30, 31, 33, 34, 41, 53, 57, 58, 60, 62, 64, 66, 67, 68, 73, 85, 87, 93, 126, 131, 159, 172, 190, 228, 236, 237, 264, 266, 268, 269, 270, 274, 281, 301], "requires_grad": [10, 92, 103, 131], "requires_grad_": [15, 25, 35, 36, 92], "resampl": 278, "rescal": [0, 31, 35, 36, 73, 296, 299, 301], "rescale_mod": [13, 59, 73, 271, 273, 296, 299, 301], "research": 78, "reset": [73, 260, 268], "reset_metr": 73, "reset_rng": 260, "reshap": [0, 156, 290], "reshape_th": 156, "resi_connect": 150, "residu": [35, 36, 129, 150, 155, 159, 268], "resiz": [2, 8, 13, 17, 28, 31, 39, 40, 41, 293, 294], "resize_mod": [13, 28, 31, 293, 294], "resolut": [0, 19, 32, 40, 55, 58, 72, 73, 75, 79, 81, 83, 84, 85, 88, 93, 104, 138, 140, 142, 148, 149, 159, 168, 169, 170, 171, 188, 207, 210, 213, 216, 218, 271, 278, 287, 289, 292, 296, 300], "resolv": [2, 10, 11, 13, 20, 24, 25, 28, 30, 36, 37, 39, 40, 41, 42, 43, 44, 45, 59, 78, 84, 98, 252, 253, 259], "reson": [98, 208, 215, 223, 259], "resp": 54, "respect": [4, 11, 17, 46, 52, 58, 69, 141, 165, 252, 253, 281], "respiratori": [98, 259], "respons": [4, 9, 25, 224, 226], "rest": [160, 249], "restart": 152, "restor": [0, 5, 24, 25, 27, 29, 30, 49, 50, 51, 54, 58, 71, 74, 81, 135, 148, 150, 160, 161, 264, 266], "restorm": 58, "restrict": [15, 228, 265], "result": [2, 13, 15, 17, 25, 35, 36, 39, 40, 44, 69, 73, 102, 213, 218, 266, 267, 269, 270, 281, 301], "results_dir": [5, 10, 13, 20, 21, 22, 27, 28, 29, 30, 31, 49, 50, 51, 52, 54], "retain": [58, 102, 213], "retrain": 25, "retriev": [18, 19, 36, 58, 72, 80, 135, 159, 168, 169, 170, 181, 188, 196, 210, 217, 218, 222, 275, 292, 294, 296], "return": [0, 2, 4, 5, 6, 10, 11, 13, 14, 17, 21, 22, 25, 28, 29, 30, 31, 33, 34, 35, 36, 37, 42, 51, 52, 53, 58, 64, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 131, 137, 141, 151, 152, 156, 157, 158, 159, 161, 162, 163, 164, 165, 167, 168, 169, 171, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 201, 202, 204, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 257, 258, 260, 261, 262, 263, 268, 271, 272, 273, 281, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304], "return_anim": 301, "return_ax": 296, "return_fig": [296, 298, 299], "rev": 166, "revers": [35, 36], "review": 224, "revisit": 35, "rewrit": 73, "reynold": [68, 281], "rgb": [4, 14, 15, 139, 161, 203, 211, 216], "rho": [35, 36, 152], "rho_t": [35, 266], "right": [2, 11, 29, 33, 35, 37, 42, 45, 46, 50, 64, 66, 67, 69, 105, 106, 107, 112, 113, 114, 115, 116, 169, 172, 176, 182, 183, 202, 213, 218, 222, 234, 258, 266, 270, 286, 298], "rightarrow": 281, "rm": [11, 36], "rmtree": [74, 75, 76, 83, 84], "rng": [96, 105, 106, 107, 202, 210, 212, 214, 219, 220, 222, 224, 225, 229, 230, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285], "rng_manual_se": 260, "robust": [4, 17, 148, 155, 228], "role": 37, "roll": [213, 231, 280], "roll_reflect_1d": 280, "root": [2, 40, 42, 43, 44, 45, 46, 50, 51, 56, 57, 74, 75, 76, 77, 78, 80, 81, 83, 84], "root_dir": [39, 41], "rotat": [17, 40, 41, 42, 58, 68, 88, 141, 228, 234, 237, 275, 281, 282, 283, 284, 285], "roto": 17, "rotoreflect": 17, "rotoshift": [68, 281], "roughli": 25, "round": 225, "routin": [64, 69], "row": [181, 255, 296, 299], "rule": [36, 159, 182], "run": [0, 2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 27, 28, 29, 30, 31, 35, 36, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 56, 73, 129, 130, 131, 132, 134, 135, 136, 138, 143, 144, 145, 146, 148, 149, 150, 154, 155, 156, 157, 159, 188, 236, 237, 264, 265, 266, 267, 268, 270, 287, 288, 289], "rung": 269, "runner": [0, 2, 9, 10, 13, 15, 24, 25, 27, 28, 30, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 53], "runtim": [7, 200], "rvert": [2, 114], "rx": 228, "s3": [44, 46, 50], "s_": 33, "s_i": 95, "s_sequential_indic": [11, 252], "s_t": [208, 223], "saito": 179, "same": [2, 4, 9, 10, 17, 33, 41, 42, 43, 45, 52, 53, 58, 64, 66, 73, 76, 77, 80, 102, 120, 121, 144, 148, 151, 152, 156, 159, 173, 183, 184, 186, 188, 200, 202, 207, 216, 222, 226, 236, 238, 239, 240, 241, 242, 243, 246, 247, 248, 253, 273, 281, 287, 288, 289, 295, 296, 298, 299, 301, 302, 303, 304], "sampl": [2, 4, 8, 11, 14, 15, 17, 30, 36, 38, 39, 40, 42, 50, 51, 58, 66, 67, 71, 72, 73, 76, 77, 79, 80, 85, 86, 88, 95, 96, 98, 99, 101, 102, 131, 134, 141, 144, 149, 169, 170, 172, 201, 202, 204, 208, 210, 212, 213, 215, 218, 221, 222, 223, 228, 245, 250, 252, 253, 254, 255, 256, 257, 258, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 278, 292, 294, 296], "sample_filt": 77, "sample_mask": [250, 254, 262], "sample_r": 77, "sampler": [36, 39, 67, 267, 268, 269, 270], "samples_loc": [0, 221], "samuel": 71, "saniti": 281, "sar": 209, "sara": 0, "satellit": 66, "satisfi": [190, 192, 195, 196], "satur": [213, 218], "save": [2, 5, 6, 8, 16, 18, 19, 21, 22, 27, 29, 30, 31, 39, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 54, 57, 72, 73, 74, 75, 76, 78, 80, 81, 83, 84, 85, 86, 98, 99, 101, 102, 150, 156, 168, 169, 170, 202, 204, 212, 213, 217, 218, 222, 225, 267, 271, 273, 287, 289, 292, 296, 297, 298, 299, 300, 301], "save_chain": [267, 268, 269, 270], "save_dir": [2, 5, 6, 13, 16, 27, 28, 29, 30, 31, 41, 42, 43, 44, 45, 46, 49, 50, 51, 53, 54, 57, 85, 296, 297, 299, 300], "save_fn": [296, 298, 301], "save_fold": [5, 27, 30, 52, 271], "save_iter": 265, "save_metadata_to_cach": 77, "save_model": [73, 273], "save_path": [2, 16, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 73, 202, 212, 217, 222, 225, 273], "save_physics_generator_param": 85, "sbr": 9, "scalar": [11, 59, 64, 70, 73, 108, 211, 245, 273], "scale": [0, 2, 5, 6, 13, 16, 17, 21, 22, 27, 28, 29, 30, 31, 40, 42, 43, 44, 45, 46, 49, 52, 53, 54, 81, 99, 148, 150, 153, 154, 155, 183, 209, 256, 258, 273, 275, 281, 285], "scale_out": 132, "scan": [19, 55, 72, 73, 77, 80, 93, 104, 145, 146, 165, 169, 170, 190, 210, 213, 218, 228, 237, 287, 289, 292], "scan_fold": 80, "scanvic": 40, "scatter": [0, 4, 66], "scatter_plot": 0, "scene": [9, 40, 84, 211, 224], "schedul": [2, 16, 34, 35, 41, 42, 43, 45, 46, 49, 50, 51, 52, 53, 54, 73, 87, 90, 91, 100, 103, 266, 273], "scheme": [0, 41, 42], "schlemper": 255, "sci": 151, "scienc": 190, "score": [13, 33, 36, 37, 101, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 172], "scoreprior": [33, 37, 67, 268, 269, 270], "scratch": [2, 39, 41, 42, 43, 45, 73], "screen": 80, "script": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54], "scunet": 58, "seamlessli": [4, 46, 62, 68, 290], "search": [8, 24, 25], "second": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 64, 66, 106, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 139, 159, 161, 165, 208, 212, 213, 215, 216, 223, 224], "second_deriv": 106, "secondli": 35, "section": 35, "secur": [25, 39, 41, 53], "see": [0, 7, 9, 11, 15, 17, 25, 28, 33, 36, 37, 39, 40, 41, 44, 45, 46, 50, 51, 53, 59, 60, 61, 63, 64, 66, 68, 69, 73, 86, 88, 95, 96, 97, 98, 101, 102, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 122, 127, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 147, 149, 150, 151, 152, 157, 159, 160, 161, 162, 188, 189, 198, 202, 205, 208, 209, 212, 213, 215, 218, 223, 224, 225, 228, 253, 254, 255, 258, 261, 262, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 296, 299, 301], "seed": [4, 5, 6, 7, 8, 11, 13, 15, 16, 20, 21, 22, 27, 28, 29, 30, 31, 37, 41, 42, 43, 45, 46, 49, 50, 51, 52, 53, 54, 163, 202, 204, 206, 208, 210, 212, 214, 215, 219, 220, 222, 225, 228, 229, 230, 250, 251, 252, 257, 258, 260, 261, 263, 264, 265, 266, 268, 274], "seek": 20, "segment": 74, "select": [0, 5, 10, 21, 22, 27, 28, 29, 30, 31, 49, 50, 51, 53, 54, 68, 75, 81, 86, 87, 90, 91, 96, 100, 103, 159, 167, 249, 254, 255, 257, 260, 262, 276, 277, 281], "self": [0, 5, 8, 9, 14, 17, 25, 28, 30, 33, 40, 47, 52, 61, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 88, 93, 94, 96, 97, 98, 102, 105, 106, 107, 128, 155, 170, 202, 204, 206, 208, 210, 212, 213, 215, 217, 218, 220, 222, 223, 225, 227, 228, 250, 251, 255, 256, 260, 262, 264, 268, 277, 278, 281, 287, 291, 292, 296, 301], "selfexsr": 83, "semi": 66, "semigroup": 275, "send": 56, "sens": [0, 2, 18, 19, 36, 51, 55, 57, 72, 73, 79, 85, 88, 93, 96, 104, 112, 113, 131, 169, 170, 175, 195, 200, 202, 203, 204, 205, 206, 207, 210, 212, 213, 215, 216, 218, 219, 220, 225, 228, 234, 250, 254, 255, 260, 262, 287, 289, 292, 294, 296, 300], "sensit": [11, 105, 106, 107], "sensor": [88, 96, 202, 213, 216, 217, 218, 228], "sensor_model": [213, 218], "separ": [24, 158], "seq": [35, 36], "seq_next": 36, "sequenc": [0, 20, 35, 39, 86, 98, 137, 221, 223, 225, 245, 265, 266, 301], "sequenti": [8, 39, 86, 90, 91, 98, 130, 131, 223, 252], "sequentialmri": [39, 86, 98], "seri": [39, 138], "serial": [25, 39, 41, 53], "series_uid": 80, "serv": [64, 156], "server": [8, 56, 71], "set": [0, 4, 6, 7, 10, 11, 13, 15, 20, 24, 29, 30, 33, 34, 35, 37, 39, 40, 44, 49, 50, 51, 52, 54, 60, 61, 62, 66, 67, 73, 77, 79, 84, 85, 86, 88, 89, 92, 93, 94, 95, 96, 97, 98, 102, 104, 109, 111, 122, 125, 127, 135, 136, 137, 138, 141, 142, 148, 149, 150, 156, 166, 172, 175, 185, 189, 190, 191, 197, 208, 210, 212, 213, 214, 215, 218, 219, 220, 221, 223, 229, 230, 257, 260, 261, 268, 270, 271, 275, 276, 277, 281], "set14": 83, "set14_sr": 83, "set3": 6, "set3c": [5, 6, 16, 21, 22, 27, 28, 30, 49, 53, 54], "set_cov": 197, "set_cov_reg": 197, "set_descript": 25, "set_weight": 197, "setup": [73, 273], "setup_train": [73, 273], "setweight": 0, "sever": [8, 20, 228, 237], "sfx": 215, "shannon": [4, 11, 252, 253], "shape": [0, 4, 5, 7, 13, 15, 20, 22, 24, 25, 34, 35, 36, 37, 39, 50, 51, 57, 64, 65, 68, 77, 80, 82, 86, 98, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 132, 135, 139, 140, 145, 146, 148, 150, 151, 152, 153, 154, 156, 161, 173, 197, 198, 202, 208, 209, 212, 215, 216, 222, 223, 225, 227, 239, 240, 242, 243, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 261, 262, 277, 281, 290, 296, 299, 301], "shard": 81, "share": [39, 51], "sharpen": 12, "shear": [40, 254], "shelf": 59, "shepp": 13, "sheppard": 11, "shepplogan": [13, 31], "shepplogandataset": 52, "shift": [13, 17, 40, 68, 213, 231, 275, 280, 281, 282, 283, 285], "shift_max": [17, 275, 279, 282, 283, 284, 285], "short": [16, 53], "should": [0, 7, 8, 9, 11, 13, 28, 31, 41, 49, 64, 73, 74, 77, 78, 83, 84, 85, 86, 98, 99, 101, 102, 105, 106, 107, 110, 122, 129, 132, 134, 136, 143, 144, 145, 146, 148, 149, 150, 154, 156, 170, 188, 190, 192, 195, 196, 202, 208, 211, 213, 214, 215, 216, 221, 225, 228, 231, 236, 237, 249, 251, 252, 253, 258, 259, 260, 264, 266, 268, 270, 271, 272, 281, 287, 288, 289, 296, 299, 301], "show": [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 20, 21, 22, 27, 28, 29, 31, 33, 34, 35, 37, 39, 40, 41, 42, 43, 45, 46, 49, 50, 51, 54, 66, 73, 85, 159, 162, 226, 227, 271, 296, 297, 298, 299, 300], "show_progress_bar": [2, 16, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 73, 85, 162, 271, 273], "showcas": 13, "shown": [0, 9, 29, 59, 179, 298], "shuffl": [2, 5, 6, 16, 25, 27, 30, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 53, 54, 57, 73, 80, 135, 142], "shutil": [74, 75, 76, 83, 84], "siam": [138, 151], "side": [119, 296, 301], "sigma": [4, 5, 7, 9, 10, 13, 14, 15, 17, 20, 21, 22, 24, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 46, 49, 52, 53, 54, 57, 58, 59, 63, 64, 66, 67, 99, 101, 105, 106, 129, 130, 135, 137, 138, 139, 141, 144, 148, 149, 150, 155, 160, 161, 168, 171, 172, 185, 190, 194, 206, 210, 216, 218, 219, 224, 229, 234, 258, 260, 263, 264, 265, 266, 269, 270, 287], "sigma2": 46, "sigma2_nois": 33, "sigma_": 229, "sigma_d": 33, "sigma_denois": [10, 27, 29, 30, 37, 49, 53, 54, 168, 171, 172], "sigma_dict": 263, "sigma_i": [36, 234], "sigma_init": 46, "sigma_max": [229, 263], "sigma_min": [229, 263], "sigma_n": 266, "sigma_nois": 35, "sigma_sq": [139, 161], "sigma_t": [35, 36], "sigma_tild": 36, "sigma_x": 234, "sigmagener": [57, 66, 260], "sigmat": 36, "sigmoid": 147, "sign": [164, 202], "signal": [4, 6, 11, 14, 15, 39, 59, 60, 63, 70, 73, 79, 85, 88, 94, 95, 96, 104, 125, 128, 153, 172, 175, 183, 202, 204, 213, 216, 217, 218, 222, 224, 228, 256, 272], "signific": [33, 56], "significantli": 52, "silent": [129, 132, 134, 143, 144, 145, 146, 149, 154, 236, 237], "sim": [2, 24, 25, 36, 37, 46, 88, 95, 99, 105, 106, 107, 112, 113, 114, 115, 116, 141, 202, 210, 219, 222, 229, 230, 258, 270], "simeq": 36, "similar": [13, 17, 40, 66, 70, 102, 118, 127, 202, 212, 217, 222, 225, 245, 275, 281, 290], "similarli": [12, 53, 57], "simlarli": 0, "simpl": [0, 2, 5, 6, 8, 10, 14, 15, 16, 17, 28, 29, 33, 34, 37, 42, 43, 44, 45, 46, 52, 54, 66, 113, 114, 116, 129, 131, 208, 215, 223], "simplest": 65, "simpli": [2, 25, 35, 36, 39, 51, 58, 62, 66, 104, 227, 231, 296], "simplic": [0, 2, 35, 49, 54], "simul": [11, 17, 39, 66, 73, 223, 284], "simultan": [102, 212, 251, 256], "sin": [11, 234], "sinc": [2, 7, 33, 36, 37, 62, 129, 132, 134, 143, 144, 145, 146, 149, 154, 156, 162, 183, 184, 200, 202, 225, 235, 236, 237], "sine": 202, "singl": [4, 10, 18, 19, 20, 28, 34, 39, 40, 41, 43, 50, 51, 52, 53, 54, 59, 64, 67, 70, 72, 77, 85, 95, 96, 97, 148, 156, 159, 165, 188, 189, 190, 191, 192, 193, 194, 195, 196, 200, 201, 208, 213, 215, 218, 223, 224, 225, 252, 287, 288, 289, 290, 292, 296, 298, 299], "single_pixel": 28, "singlecoil": 77, "singlephotonlidar": 9, "singlepixelcamera": [15, 28], "singular": [14, 33, 34, 66, 201, 204, 208, 215, 223, 225, 264], "sinogram": 15, "site": [17, 39, 81, 273], "situat": [4, 20], "size": [0, 4, 7, 9, 11, 13, 15, 16, 17, 20, 25, 27, 30, 33, 35, 36, 37, 39, 41, 44, 46, 50, 51, 52, 53, 57, 63, 64, 66, 68, 69, 70, 75, 76, 82, 83, 85, 86, 93, 98, 102, 105, 106, 107, 108, 109, 111, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 132, 133, 134, 136, 137, 139, 143, 144, 147, 150, 154, 159, 161, 162, 166, 167, 175, 176, 183, 184, 190, 194, 197, 199, 200, 201, 202, 204, 205, 207, 208, 212, 213, 214, 215, 216, 218, 221, 223, 224, 225, 226, 227, 228, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 261, 262, 263, 269, 270, 281, 286, 290, 293, 294, 296, 298, 299, 301], "skew": [275, 282], "skew_max": [275, 282, 283, 284, 285], "skip": [36, 39, 155], "slice": [65, 77, 80, 215], "slice_fnam": 80, "slice_ind": 77, "slicesamplefileidentifi": 77, "slicesampleidentifi": 80, "slide": 144, "slow": [2, 136, 200, 207], "slower": 4, "small": [7, 20, 25, 40, 44, 45, 46, 49, 54, 64, 102, 106, 107, 139, 151, 161, 175, 198, 228, 237], "smaller": [0, 5, 21, 22, 30, 64, 102, 137, 169, 197, 200, 207, 209, 216, 226, 238, 241, 248, 269, 270], "smolyakov": [151, 152], "smooth": [51, 187], "snippet": 0, "snu": 78, "so": [0, 4, 13, 14, 36, 46, 54, 73, 208, 215, 223, 249, 254, 255, 284], "soft": [10, 19, 20, 51, 53, 55, 72, 73, 74, 79, 85, 93, 104, 156, 157, 169, 170, 175, 192, 195, 202, 213, 218, 287, 289, 292, 296, 300], "softplu": [135, 142], "softwar": [151, 152], "solut": [0, 13, 14, 20, 21, 22, 64, 69, 73, 152, 156, 157, 159, 162, 165, 202, 213, 228, 286], "solv": [2, 13, 17, 29, 30, 35, 36, 39, 49, 53, 59, 64, 69, 71, 136, 151, 152, 159, 162, 190, 198], "solver": 173, "some": [0, 4, 7, 11, 14, 15, 17, 21, 22, 33, 36, 58, 59, 61, 62, 64, 66, 68, 69, 70, 77, 87, 93, 148, 167, 202, 213, 216, 218, 228], "sometim": 69, "somewhat": 7, "soon": 56, "sor": 202, "sort": 66, "sota": 67, "sourc": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 56, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304], "source_radiu": [228, 237], "sourcetensor": [15, 35], "space": [0, 2, 15, 17, 25, 39, 40, 41, 52, 66, 77, 86, 98, 129, 139, 161, 167, 221, 223, 226, 227, 228, 237, 250, 254, 255, 261, 262], "spacevaryingblur": [4, 261], "spacial": 0, "spars": [0, 15, 130, 221, 236, 237, 245], "sparsiti": [0, 20, 22], "spatial": [0, 4, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 226, 256], "special": [39, 86, 98, 282, 283, 284, 285], "specif": [4, 5, 14, 27, 30, 31, 66, 68, 69, 77, 109, 111, 159, 160, 162], "specifi": [0, 4, 5, 11, 15, 21, 22, 27, 28, 30, 31, 53, 54, 66, 68, 75, 81, 103, 109, 111, 112, 113, 114, 115, 116, 138, 170, 205, 208, 215, 223, 250, 251, 254, 262, 273, 301], "speckl": 209, "spectral": [89, 92, 126, 196, 213, 217], "spectral_angle_mapp": 39, "spectral_method": [13, 217], "speed": [2, 14, 39, 52, 85, 106, 152, 213], "sphinx": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54], "split": [8, 19, 24, 25, 27, 39, 41, 47, 49, 53, 54, 64, 66, 72, 73, 75, 77, 79, 81, 85, 86, 93, 94, 97, 98, 99, 102, 128, 139, 151, 152, 155, 160, 161, 165, 183, 188, 190, 191, 194, 210, 213, 218, 228, 249, 251, 256, 259, 266, 287, 288, 289, 291, 292], "split_ratio": [39, 44, 102, 212, 251, 256], "split_siz": [39, 86, 249], "splitter": 39, "splittingloss": [39, 44, 66, 86, 98, 251, 256], "splittingmodel": 102, "spoke": [86, 98, 223], "sqrt": [0, 13, 33, 34, 35, 36, 37, 46, 51, 125, 151, 152, 181, 202, 225, 258, 265, 266, 270], "squar": [5, 16, 35, 53, 64, 73, 86, 94, 96, 97, 98, 102, 104, 105, 106, 107, 110, 121, 124, 134, 177, 198, 228, 252, 253, 256, 272], "sr": [81, 150], "src": [9, 17], "ss": 73, "ssdu": [44, 102, 256], "ssdu_mask": 256, "ssim": [39, 61, 90, 91, 100, 103], "ssim_std": 39, "stabil": [37, 198], "stabilis": 269, "stabl": [105, 127, 296, 299, 301], "stack": [18, 19, 39, 68, 72, 203, 204, 207, 213, 216, 218, 281, 290, 292, 296], "stage": [148, 149], "stand": 169, "standalon": 58, "standard": [2, 5, 9, 12, 13, 15, 20, 21, 22, 24, 25, 27, 28, 31, 34, 35, 36, 37, 53, 57, 58, 59, 60, 61, 63, 64, 69, 99, 104, 105, 106, 114, 126, 137, 139, 148, 159, 160, 161, 185, 198, 199, 206, 210, 211, 216, 219, 224, 229, 234, 251, 258, 269, 270, 271, 287, 288, 289, 303], "standart": [30, 31, 188, 288, 289], "star": [69, 226, 248, 286], "start": [0, 14, 25, 39, 41, 42, 43, 45, 53, 165], "state": [0, 71, 73, 74, 260], "state_dict": [2, 10, 39, 40, 41, 42, 43, 44, 45, 53, 73], "state_dict_d": 2, "static": [15, 36, 39, 66, 86, 98, 102, 151, 152, 153, 154, 156, 208, 227], "stationari": 66, "statist": [67, 99, 268, 269, 270], "std": [34, 37], "std_scale": 256, "stem": 9, "step": [0, 4, 11, 13, 15, 20, 21, 22, 25, 27, 28, 30, 31, 33, 37, 39, 46, 52, 58, 59, 64, 66, 69, 73, 86, 98, 99, 101, 102, 105, 106, 142, 155, 159, 162, 165, 176, 183, 184, 188, 190, 194, 199, 208, 212, 223, 226, 228, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 266, 269, 270, 286, 287, 288, 289], "step_ratio_d": 273, "step_siz": [2, 16, 33, 37, 41, 42, 43, 45, 46, 49, 53, 54, 105, 106, 199, 268, 269, 270], "steplr": [2, 16, 41, 42, 43, 45, 49, 52, 53, 54], "stepsiz": [0, 5, 10, 13, 21, 22, 27, 28, 29, 30, 31, 49, 50, 51, 53, 54, 59, 64, 69, 152, 159, 162, 163, 164, 169, 173, 174, 175, 183, 184, 185, 188, 189, 191, 192, 193, 195, 196, 287, 288, 289], "stepsize_du": [53, 64], "stepsize_int": 169, "stepz_pixel": [11, 253], "still": [66, 281], "stochast": [46, 63, 149, 150, 213, 218, 265, 269], "stop": [5, 7, 27, 28, 30, 131, 136, 159, 160, 162, 197, 198, 199], "stopping_criterion": 197, "storag": [10, 39, 41, 42, 43, 44, 45], "store": [8, 64, 66, 77, 79, 80, 85, 159, 162, 165, 200, 201, 202, 204, 207, 208, 222, 223, 225, 226, 249, 251, 256, 259, 263, 268, 281], "str": [16, 39, 41, 42, 43, 45, 46, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 98, 105, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 135, 137, 138, 139, 142, 143, 148, 149, 150, 155, 156, 157, 158, 159, 161, 166, 175, 188, 197, 200, 201, 202, 203, 205, 207, 216, 222, 224, 225, 226, 228, 231, 236, 237, 238, 240, 241, 243, 248, 249, 251, 252, 253, 256, 258, 259, 260, 261, 263, 265, 266, 271, 273, 274, 275, 278, 280, 282, 283, 284, 285, 287, 288, 289, 291, 293, 294, 296, 297, 298, 299, 300, 301], "strategi": [15, 159, 250, 254, 262], "strength": [33, 37, 196, 214], "stretch": [275, 282], "stride": [82, 131, 135, 142], "strideconv": [135, 142], "string": [188, 287, 288, 289], "strong_convex": 143, "strongli": 143, "structur": [14, 57, 66, 74, 75, 76, 77, 78, 80, 81, 83, 84, 126, 127, 135, 208, 215, 223], "structural_similar": 127, "structural_similarity_index_measur": 122, "study_uid": 80, "style": [56, 86], "sub": [50, 87, 90, 91, 100, 103, 175], "sub_net_s": [25, 166], "subband": 156, "subclass": [28, 52, 129, 132, 134, 143, 144, 145, 146, 149, 154, 236, 237], "subfold": 76, "subgroup": [68, 275, 282, 283, 284, 285], "subject": 20, "submit": 56, "subnetwork": [25, 166], "subpackag": 57, "subplot": [9, 35], "subsampl": [15, 102, 202, 207, 208, 215, 223, 225, 251, 256], "subselect": [87, 276], "subset": [39, 41, 43, 44, 45, 46, 102, 212, 251, 257], "substract": 290, "subsubfold": 76, "success": 59, "successfulli": [2, 40, 74, 75, 83, 84], "suffic": [4, 11], "suffici": [36, 42, 159], "suggest": [25, 35, 36, 71, 148, 183], "suit": 132, "suitabl": 61, "sum": [13, 25, 34, 36, 37, 39, 51, 61, 64, 66, 68, 103, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 165, 167, 175, 208, 225, 227, 260, 281, 290], "sum_": [20, 25, 42, 50, 99, 102, 141, 181, 226, 248, 281], "sum_i": [0, 17, 139, 161, 163, 167, 179, 180], "summar": [58, 63], "summat": 197, "sup": [2, 90, 91, 100], "sup_": 169, "supadversarialdiscriminatorloss": [2, 109, 273], "supadversarialgeneratorloss": [2, 111, 273], "super": [0, 5, 14, 19, 28, 32, 33, 40, 52, 55, 72, 73, 75, 79, 81, 84, 85, 88, 93, 104, 138, 140, 142, 159, 168, 169, 170, 171, 188, 207, 210, 213, 218, 252, 253, 268, 271, 278, 287, 289, 292, 296, 300], "supervis": [2, 16, 17, 40, 47, 49, 50, 51, 52, 53, 54, 61, 68, 71, 72, 73, 79, 85, 86, 88, 93, 94, 96, 97, 98, 99, 102, 104, 105, 106, 107, 112, 113, 128, 155, 204, 206, 208, 210, 212, 213, 215, 218, 220, 223, 227, 228, 250, 251, 255, 256, 260, 262, 272, 277, 278, 281, 287, 291, 292, 296, 301], "suploss": [2, 16, 49, 50, 51, 52, 53, 54, 61, 90, 91, 100, 272, 273], "support": [20, 57, 79, 85, 101, 124, 130, 166, 175, 209, 238, 239, 241, 242, 246, 247, 254, 255, 262, 273], "suppos": [17, 73], "suptitl": [4, 11, 20, 35, 49, 50, 51, 54, 296, 299], "sure": [19, 37, 46, 47, 56, 72, 73, 79, 85, 93, 105, 106, 107, 128, 155, 204, 206, 213, 218, 220, 292], "suregaussianloss": [45, 46, 60], "surepgloss": [45, 46], "surepoissonloss": 45, "surpris": 7, "svd": [14, 204, 212], "swin": [149, 150], "swinir": 58, "switch": 281, "swz30": 58, "symmetr": [17, 58, 68, 141, 281], "symmetris": 281, "synchron": [5, 6, 16, 27, 28, 30, 31, 41, 42, 43, 45, 46, 49, 50, 51, 53, 54, 73], "synthes": [4, 252, 253], "synthesi": 149, "synthet": 58, "system": [63, 66, 162, 198], "t": [2, 6, 9, 15, 17, 25, 31, 35, 36, 39, 40, 41, 50, 51, 53, 60, 64, 65, 66, 68, 74, 81, 86, 98, 99, 118, 123, 126, 137, 144, 151, 152, 153, 154, 162, 172, 187, 196, 208, 211, 213, 223, 224, 227, 231, 249, 250, 254, 255, 256, 258, 259, 262, 265, 266, 271, 281, 286, 298, 301], "t1": 20, "t10k": [44, 46, 50], "t_": 281, "t_g": [88, 95, 141, 281], "t_hist": 162, "t_i": [17, 35], "t_im1": 35, "t_ix": 17, "t_max": 52, "tabl": [50, 51, 56, 63], "tachella": 71, "tag": [50, 64, 150, 159], "tail": 255, "take": [15, 25, 33, 35, 36, 44, 45, 58, 60, 61, 64, 65, 73, 74, 75, 76, 77, 78, 80, 81, 83, 84, 106, 107, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 132, 134, 135, 137, 143, 144, 145, 146, 149, 153, 154, 158, 161, 162, 165, 166, 167, 228, 236, 237, 254, 273, 281], "taken": [0, 17, 56, 95, 96, 133, 134, 140, 173, 255, 298], "tangent": 7, "tanh": 131, "taohuang2018": 97, "tar": [73, 76, 78, 81, 84], "target": [0, 77, 104, 122, 221, 227], "target_transform": 76, "task": [0, 81, 85, 148], "tau": [0, 21, 22, 28, 29, 45, 46, 53, 105, 106, 107, 152, 159, 190], "tau1": 106, "tau2": 106, "tau_1": 106, "tau_2": 106, "tcia": 80, "teboul": 152, "techniqu": 66, "telescop": 0, "templat": [93, 227], "tempor": [98, 154, 227], "tend": [0, 202], "tensor": [0, 4, 10, 11, 12, 13, 14, 15, 17, 28, 30, 35, 36, 39, 50, 52, 57, 61, 64, 66, 68, 70, 73, 82, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 144, 147, 148, 150, 151, 152, 153, 155, 156, 157, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 273, 280, 281, 286, 287, 290, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304], "tensor_s": [7, 15, 16, 22, 24, 34, 36, 37, 39, 42, 53, 64, 66, 86, 98, 102, 185, 204, 212, 249, 251, 256, 259, 264, 266], "tensorlist": [12, 126, 213, 216, 218, 295, 302, 303, 304], "tensorshap": 17, "term": [0, 5, 10, 21, 22, 27, 28, 29, 30, 31, 35, 36, 49, 50, 51, 53, 54, 59, 63, 64, 69, 106, 139, 151, 152, 159, 160, 161, 162, 164, 165, 169, 170, 171, 174, 181, 182, 184, 188, 190, 266, 287, 288, 289], "terminologi": 165, "terri": [0, 17, 71], "test": [2, 4, 5, 11, 13, 14, 27, 30, 56, 57, 73, 77, 79, 83, 84, 85, 86, 98, 99, 101, 102, 131, 135, 136, 138, 142, 148, 149, 157, 213, 296], "test_base_dataset": [42, 49, 50, 51, 53, 54], "test_batch_s": [16, 49, 50, 51, 52, 53, 54], "test_dataload": [2, 5, 16, 27, 30, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 73, 271], "test_datapoint": [42, 43, 44, 45, 46, 50, 51, 85], "test_dataset": [2, 5, 6, 16, 27, 30, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 57, 85], "test_dataset_nam": [16, 49, 53, 54], "test_img": [24, 25], "test_psnr": [16, 53], "test_sampl": [49, 50, 51, 54], "test_transform": [16, 49, 53, 54], "text": [2, 17, 20, 21, 22, 40, 50, 51, 99, 105, 107, 112, 113, 114, 115, 116, 118, 120, 121, 123, 124, 125, 126, 127, 141, 159, 169, 175, 183, 184, 185, 196, 202, 204, 212, 217, 228, 229, 232, 233, 235, 263], "tgv": 151, "th": [20, 25, 151, 152, 156, 157, 164, 166, 181, 270], "than": [0, 5, 6, 10, 15, 30, 35, 44, 53, 64, 70, 102, 169, 197, 200, 202, 207, 213, 216, 221, 225, 226, 228, 231, 238, 241, 248, 253, 269, 270, 296, 299], "thank": [4, 11], "thei": [25, 33, 39, 41, 51, 53, 54, 58, 60, 62, 66, 68, 69, 73, 79, 159, 170, 264], "them": [17, 19, 49, 50, 51, 58, 68, 80, 87, 129, 132, 134, 143, 144, 145, 146, 149, 154, 156, 213, 236, 237, 260, 301], "themselv": [2, 273], "theorem": [4, 11, 36, 69, 252, 286], "theoret": [17, 68, 213], "theori": [4, 11, 64, 151, 152, 252, 253], "therefor": [13, 64], "therein": 11, "theta": [7, 14, 16, 25, 42, 59, 66, 136, 234, 236, 237, 260, 265, 266, 281], "theta2": 66, "theta_max": [17, 40, 275, 282, 283, 284, 285], "theta_z_max": [17, 275, 282, 283, 284, 285], "thi": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 24, 25, 27, 28, 29, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 73, 74, 75, 77, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 136, 137, 138, 140, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 162, 167, 170, 172, 181, 183, 184, 189, 194, 197, 200, 202, 207, 208, 209, 211, 212, 213, 214, 215, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 260, 262, 264, 265, 266, 268, 271, 272, 273, 274, 281, 286, 287, 289, 296, 300, 301], "thin": [33, 267, 268, 269, 270], "third": [9, 224], "thorac": 80, "thorough": 17, "those": 175, "three": 190, "thres_conv": [5, 30, 159, 267], "thresh_conv": [268, 269, 270], "threshold": [10, 19, 20, 51, 53, 55, 72, 73, 79, 85, 93, 103, 104, 156, 157, 159, 169, 170, 175, 192, 195, 202, 213, 218, 267, 268, 270, 287, 289, 292, 296, 300], "threshold_3d": 156, "threshold_nd": 156, "thresold_2d": 156, "thresold_func": 156, "through": [0, 4, 11, 14, 36, 66, 86, 88, 89, 92, 98, 102, 131, 221, 276], "thu": [8, 30, 52, 64, 77, 81, 136, 143, 156, 157, 208, 215, 223, 228, 268, 269, 270], "ti": 289, "tight": [20, 296, 299], "tight_layout": [9, 35], "tikhonov": 64, "tild": [36, 201, 202, 204, 208, 212, 213, 216, 218, 220, 223, 228, 265], "tilt": [40, 275, 284], "time": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 59, 64, 68, 77, 86, 87, 90, 91, 98, 99, 100, 101, 102, 103, 131, 137, 139, 141, 153, 154, 159, 161, 202, 204, 207, 208, 212, 221, 222, 223, 224, 227, 249, 250, 254, 255, 256, 262, 267, 271, 273, 276, 280, 281, 301], "time_dim": 301, "time_pair": 36, "timeagnosticnet": [86, 98], "timemixin": [153, 154, 208, 281], "timestep": [35, 36, 137, 265, 266], "tip": [269, 270], "tissu": 76, "titl": [0, 4, 7, 9, 11, 12, 13, 14, 15, 17, 21, 22, 28, 29, 31, 33, 34, 35, 36, 37, 39, 49, 50, 51, 54, 226, 296, 298, 299, 301], "tkbn": 0, "to_complex_denois": [13, 58], "to_logimag": 0, "to_stat": [154, 208], "togeth": [17, 68], "toi": 49, "tol": [0, 64, 89, 92, 198, 199, 213, 218], "tol_int": 169, "toler": [2, 89, 92, 131, 198, 199, 213, 218], "tomograph": 65, "tomographi": [19, 26, 32, 44, 52, 58, 72, 73, 80, 82, 138, 159, 161, 166, 167, 168, 169, 170, 188, 204, 206, 210, 213, 214, 218, 230, 292, 294, 296, 297], "too": [85, 102, 122, 273], "tool": 0, "toolbox": [4, 11, 66], "top": [0, 16, 19, 28, 33, 42, 45, 46, 52, 53, 63, 69, 105, 106, 107, 128, 156, 157, 159, 182, 186, 187, 190, 201, 202, 204, 208, 213, 216, 217, 218, 223, 228, 231, 298], "topk": [156, 157], "torch": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 57, 58, 60, 61, 62, 64, 66, 68, 69, 70, 73, 79, 80, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 135, 136, 138, 139, 141, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304], "torchist": 245, "torchkbnufft": [0, 221], "torchmetr": [39, 120, 121, 122, 126, 127], "torchmetric_kwarg": 127, "torchvis": [2, 5, 6, 8, 16, 17, 21, 22, 27, 30, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 53, 54, 57, 68, 74, 75, 76, 77, 78, 79, 81, 83, 84, 88, 281], "torso": 137, "total": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 71, 72, 73, 80, 96, 101, 108, 129, 148, 151, 152, 156, 159, 169, 170, 173, 188, 201, 204, 210, 213, 218, 254, 279, 292, 296, 297], "total_batch": 101, "totalloss": [2, 16, 25, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 73], "totensor": [2, 5, 6, 8, 16, 21, 22, 27, 30, 40, 42, 43, 44, 45, 46, 49, 50, 51, 53, 54, 57, 77], "touch": 71, "tour": [11, 18, 19, 71, 72, 200, 201, 202, 203, 204, 205, 206, 207, 210, 212, 213, 215, 216, 218, 219, 220, 225, 226, 228, 234, 250, 252, 254, 255, 257, 258, 260, 261, 262, 292, 294, 296], "toward": [21, 22, 245], "tqdm": [25, 35, 36, 73], "track_running_stat": 131, "tracker": [56, 71], "tradeoff": 61, "tradit": [0, 137], "train": [4, 5, 6, 8, 10, 13, 18, 19, 27, 28, 30, 31, 35, 36, 40, 57, 58, 60, 61, 62, 66, 67, 69, 71, 72, 73, 75, 77, 79, 81, 85, 86, 93, 98, 99, 101, 102, 104, 109, 111, 112, 113, 114, 115, 116, 118, 122, 126, 127, 128, 131, 132, 133, 134, 135, 137, 138, 140, 142, 147, 148, 149, 155, 172, 204, 212, 213, 218, 268, 269, 270, 271, 273, 287, 289, 292, 300], "train_base_dataset": [42, 49, 50, 51, 53, 54], "train_batch_s": [16, 49, 50, 51, 52, 53, 54], "train_dataload": [2, 8, 16, 25, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 73, 272, 273], "train_datapoint": [5, 16, 27, 30, 41, 42, 43, 44, 45, 46, 49, 50, 51, 53, 54, 85], "train_dataset": [2, 5, 6, 16, 25, 27, 30, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 57, 85], "train_dataset_nam": [16, 41, 43, 45, 46, 49, 50, 51, 52, 53, 54], "train_img": 25, "train_loss": [61, 90, 91, 100, 103, 120, 121, 122, 126, 127], "train_test_transform": [50, 51], "train_transform": [16, 49, 53, 54], "trainabl": [2, 10, 16, 29, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 53, 54, 69, 97, 99, 102, 105, 106, 107, 155, 287, 289, 291], "trainable_param": [10, 49, 50, 51, 53, 54, 69, 287, 289], "trainer": [2, 16, 25, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 60, 70, 126, 271, 272, 273], "trajectori": [4, 258], "transact": [52, 130], "transform": [0, 2, 5, 6, 15, 16, 18, 19, 20, 21, 22, 25, 27, 28, 30, 39, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 53, 54, 57, 58, 66, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88, 93, 94, 95, 101, 130, 141, 144, 148, 150, 155, 156, 157, 175, 202, 204, 208, 210, 212, 213, 215, 218, 221, 223, 225, 227, 228, 236, 237, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 292, 294, 296], "transform2": 17, "transform3": 17, "transform_data": 57, "transform_kspac": 77, "transform_target": 77, "transformerblock": 148, "transformparam": 281, "translat": [40, 41, 88, 147, 275, 279, 282, 283, 285], "transmiss": 211, "transpos": [12, 14, 128, 135, 142, 159, 162, 202, 204, 213, 216, 228, 241, 242, 243], "treat": 227, "trick": 36, "trigger": [9, 17, 260], "trivial": [33, 211, 212], "true": [0, 2, 4, 5, 6, 7, 8, 10, 11, 13, 15, 16, 17, 20, 21, 22, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 57, 59, 61, 64, 68, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 88, 89, 90, 91, 92, 96, 98, 99, 100, 101, 102, 103, 105, 106, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 136, 137, 138, 141, 143, 144, 145, 146, 147, 148, 150, 153, 155, 159, 162, 165, 166, 170, 175, 187, 189, 190, 191, 197, 202, 207, 212, 213, 215, 220, 221, 223, 225, 228, 231, 235, 236, 237, 238, 239, 240, 241, 242, 243, 251, 256, 264, 265, 266, 267, 268, 271, 273, 274, 277, 281, 286, 292, 296, 297, 298, 299, 300, 301], "true_sigma": 46, "truli": [105, 106, 107], "truth": [2, 7, 16, 21, 22, 24, 25, 28, 29, 31, 33, 34, 35, 36, 37, 39, 40, 44, 49, 50, 51, 53, 54, 60, 73, 76, 77, 79, 86, 87, 98, 104, 112, 113, 124, 159, 162, 249, 259, 271, 273, 286, 287], "try": [0, 44, 46, 50, 56, 71, 281], "tun": 266, "tune": [2, 25, 31, 39, 196], "tupl": [0, 73, 82, 86, 98, 101, 106, 132, 136, 140, 144, 150, 159, 162, 201, 202, 205, 207, 208, 211, 212, 215, 216, 221, 222, 223, 225, 231, 234, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 261, 262, 267, 268, 269, 270, 271, 272, 273, 293, 294, 296, 298, 299, 301], "turn": [4, 17, 20, 24, 36, 58, 69, 141, 267, 286, 287], "tutori": [35, 36, 69, 133, 134, 162, 286], "tv": [19, 23, 51, 71, 72, 108, 151, 152, 159, 169, 170, 173, 188, 201, 204, 210, 213, 218, 292, 296, 297], "tv_smooth": 51, "tvdenois": 173, "tvprior": [21, 64, 152], "tweedi": [36, 37, 67, 101, 172], "two": [2, 12, 24, 25, 35, 36, 41, 42, 43, 64, 76, 77, 97, 101, 102, 118, 165, 169, 212, 213, 218, 228, 237, 257, 260, 281, 290], "twophoton_bpae_b": 76, "twophoton_bpae_g": 76, "twophoton_bpae_r": 76, "twophoton_mic": 76, "tx_prev": 162, "ty": 159, "type": [2, 8, 11, 17, 51, 57, 66, 76, 77, 142, 202, 221, 222, 228, 236, 237, 248, 250, 251, 252, 253, 256, 257, 258, 260, 263, 272, 273, 281, 287, 289, 295, 302, 303, 304], "type_t": 137, "typic": [64, 66, 67, 109, 111, 172, 208, 215, 223], "u": [2, 8, 16, 28, 33, 35, 36, 42, 43, 44, 45, 46, 52, 63, 64, 69, 99, 105, 106, 107, 135, 145, 155, 165, 169, 182, 183, 184, 185, 204, 213, 229, 230, 286], "u0": 52, "u2": [151, 152], "u_": [28, 53, 59, 162, 189, 190, 191, 192, 194, 195], "u_0": [159, 190], "u_adjoint": [33, 204], "u_init": [10, 53], "u_k": [28, 53, 59, 162, 190, 192, 194, 195], "uair": 114, "uair_model": 2, "uairgeneratorloss": 2, "ubyt": [44, 46, 50], "uc": 25, "ula": [19, 38, 72, 89, 138, 169, 170, 172, 204, 210, 212, 213, 218, 268, 292, 294, 296], "ula_mean": 33, "ula_var": 33, "ultim": 56, "ulyanov": [7, 136], "un": [46, 132], "unadjust": [33, 37, 67, 269, 270], "unavail": 81, "unbias": [45, 105, 106, 107], "uncertainti": [19, 34, 38, 71, 72, 89, 138, 169, 170, 172, 204, 210, 212, 213, 218, 268, 270, 292, 294, 296], "under": [8, 11, 17, 25, 50, 51, 66], "underli": [63, 137, 166], "undersampl": [15, 39, 44, 208, 215, 223, 250, 254, 255, 262], "underset": [0, 21, 22, 25, 53, 59, 64, 139, 151, 152, 156, 157, 159, 161, 169, 183, 184, 185, 190, 213, 218], "understood": 7, "undesir": [167, 296], "unet": [2, 16, 40, 42, 43, 44, 45, 46, 137, 149, 153, 154, 273], "unflatten": [153, 227, 281], "unfold": [10, 29, 42, 49, 55, 71, 72, 73, 79, 85, 93, 104, 138, 145, 146, 156, 168, 169, 170, 204, 207, 210, 212, 213, 218, 271, 286, 287, 288, 289, 292, 296, 300], "unfolded_build": [10, 50, 51, 52, 53, 54, 69], "unfolded_pgd": [50, 51, 54], "ungrid": 221, "unif": 131, "unifi": 63, "uniform": [0, 15, 221, 229, 230, 254, 255, 262, 285, 302], "uniformgaussiannois": 101, "uniformli": [58, 228, 263, 277], "uniformnois": 25, "union": [0, 77, 221, 273, 301], "uniqu": [151, 152], "unit": [12, 13, 14, 35, 143, 202, 213, 253], "unknown": [40, 46, 105, 106, 211], "unless": [15, 25, 39, 41, 53], "unlik": [0, 130, 138, 267], "unnormalis": [255, 262], "unorgan": 99, "unpickl": [25, 39, 41, 53], "unrol": [2, 10, 39, 41, 49, 50, 51, 52, 53, 54, 58, 69, 73, 86, 98, 271, 272, 286, 291], "unsqueez": [0, 6, 11, 14, 15, 20, 21, 22, 27, 30, 34, 37, 49, 52, 204, 226], "unsupadversarialdiscriminatorloss": [2, 109], "unsupadversarialgeneratorloss": [2, 111], "unsupervis": [2, 40, 42, 60, 99, 114, 115, 116, 133, 134, 275, 284], "unsur": [19, 47, 72, 73, 79, 85, 93, 105, 106, 128, 155, 204, 206, 210, 213, 218, 292], "unti": 289, "until": 39, "untouch": 175, "untrust": [25, 39, 41, 53], "unus": [122, 259], "unwrap": 227, "up": [6, 10, 14, 25, 29, 49, 50, 52, 54, 66, 73, 75, 80, 106, 137, 152, 213, 275, 282, 285], "upcom": 17, "upconv": [135, 142], "updat": [25, 28, 30, 35, 36, 52, 53, 56, 64, 73, 152, 159, 162, 165, 176, 189, 190, 191, 192, 193, 200, 201, 204, 208, 209, 210, 212, 214, 215, 218, 219, 220, 226, 230], "update_data_fidelity_fn": [159, 162], "update_metrics_fn": [159, 162], "update_paramet": [66, 73, 86, 98, 99, 101, 102, 200, 201, 204, 208, 209, 210, 212, 214, 215, 219, 220, 223, 226, 230], "update_params_fn": [159, 162], "update_prior_fn": [159, 162], "upload": [7, 33, 34, 37], "upp": [244, 245], "upper": [244, 245], "upsampl": [135, 142, 150], "upsample_mod": [135, 142], "upscal": 150, "urban": [40, 84], "urban100": [2, 40, 84], "urban100_hr": 84, "urban100_inpainting_homography_model": 40, "urban100hr": [2, 40], "url": [4, 7, 10, 13, 15, 24, 25, 28, 29, 31, 33, 34, 35, 36, 37, 39, 41, 42, 43, 44, 45, 59, 150, 294], "us": [0, 2, 4, 5, 6, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 24, 25, 27, 28, 29, 30, 31, 33, 34, 37, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 76, 77, 83, 87, 90, 91, 95, 99, 100, 101, 103, 118, 122, 123, 125, 126, 127, 129, 130, 139, 140, 143, 148, 149, 150, 152, 162, 176, 178, 179, 180, 182, 183, 184, 185, 197, 237, 239, 240, 242, 243, 244, 245, 248, 249, 259, 269, 272, 280], "usag": [60, 61, 66, 68, 102, 148, 273, 296, 299], "use_bicubic_init": 30, "use_checkpoint": 150, "use_fft": 207, "use_filt": 236, "use_fp16": 137, "use_sigmoid": 147, "user": [25, 33, 39, 41, 53, 64, 69, 73, 85, 101, 135, 137, 138, 142, 149, 150, 163, 188, 206, 216, 271, 288, 289, 301], "userwarn": [0, 9, 15, 17, 35, 39], "usual": [0, 35, 36, 61, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 273], "usv": 33, "ut": [29, 179], "util": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 57, 59, 73, 80, 118, 123, 126, 139, 161, 197, 198, 199, 202, 211, 213, 216, 218, 226, 228, 264, 266, 271, 272, 273, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304], "uv": 0, "uv_coordin": 0, "v": [14, 28, 33, 44, 61, 69, 159, 162, 165, 204, 213, 217, 218, 286], "v0": 150, "v2": 11, "v_": 193, "v_adjoint": [14, 33, 204], "v_k": 28, "val": [75, 81], "val1": 81, "val_dataset": 81, "val_transform": [5, 6, 21, 22, 27, 30], "valid": [4, 22, 40, 58, 67, 75, 77, 102, 169, 200, 207, 216, 226, 238, 240, 241, 243, 248, 261], "valu": [0, 7, 12, 13, 14, 15, 24, 25, 33, 34, 35, 39, 41, 45, 50, 51, 53, 54, 58, 64, 66, 67, 70, 73, 76, 77, 79, 101, 105, 106, 107, 110, 125, 127, 136, 137, 139, 144, 150, 151, 158, 159, 161, 162, 166, 167, 169, 172, 173, 175, 188, 197, 198, 201, 204, 208, 209, 214, 215, 220, 223, 225, 228, 237, 245, 250, 251, 256, 260, 264, 266, 269, 270, 281, 287, 288, 289, 296, 299], "vanilla": [19, 32, 55, 72, 73, 79, 85, 93, 104, 138, 159, 168, 169, 170, 188, 207, 210, 213, 218, 228, 287, 289, 292, 294, 296, 297, 300], "var": [34, 37, 268], "var_has_converg": 268, "varepsilon": [35, 36, 265, 266], "varepsilon_t": 266, "varga": 269, "vari": [39, 66, 73, 75, 86, 98, 153, 154, 208, 223, 226, 227, 250, 254, 255, 261, 262, 301], "variabl": [5, 6, 10, 21, 22, 27, 28, 30, 31, 37, 39, 45, 46, 52, 53, 64, 106, 107, 131, 145, 146, 151, 152, 159, 163, 164, 165, 167, 168, 169, 171, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 190, 281], "varianc": [33, 34, 35, 37, 67, 209, 267, 268, 269, 270], "variant": [156, 157], "variat": [19, 23, 25, 66, 71, 72, 108, 151, 152, 159, 169, 170, 173, 188, 201, 204, 210, 213, 218, 292, 296, 297], "variou": [2, 15, 34, 40, 45, 46, 58, 60, 66, 67, 68, 208, 215, 223, 227], "vector": [33, 63, 73, 92, 105, 106, 107, 131, 132, 136, 151, 156, 159, 204, 208, 213, 217, 218, 245, 255, 262, 270, 287], "veloc": 274, "verbos": [0, 2, 5, 7, 13, 16, 21, 22, 25, 27, 28, 29, 30, 31, 33, 34, 37, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 57, 64, 73, 85, 89, 92, 136, 151, 152, 159, 162, 197, 213, 264, 265, 266, 267, 268, 269, 270, 271, 273, 292], "verbose_individual_loss": [73, 273], "veri": [0, 2, 13, 25, 36, 273], "verif": 74, "verifi": [46, 74, 75, 78, 81, 83, 84, 198, 208, 213, 215, 268, 270], "verify_split_dataset_integr": [75, 81], "version": [13, 71, 74, 75, 76, 77, 78, 80, 81, 83, 84, 86, 141, 151, 152, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 290], "vert": [11, 163], "vert_2": 163, "vertic": [39, 75, 108, 250, 254, 255, 262, 298], "vgg": 2, "vi": [16, 41, 42, 43, 45, 46, 49, 50, 51, 52, 53, 54], "via": [0, 5, 20, 24, 25, 28, 33, 35, 36, 37, 39, 41, 43, 45, 46, 53, 57, 62, 65, 66, 67, 68, 69, 71, 85, 95, 96, 135, 137, 138, 139, 148, 149, 155, 161, 166, 172, 201, 202, 204, 208, 212, 213, 217, 218, 222, 225, 226, 228, 260, 281], "vid": 301, "vid_list": 301, "video": [39, 86, 98, 208, 254, 255, 262, 280, 281, 301], "view": [5, 15, 25, 36, 37, 76, 261, 278, 299, 301], "viridi": [0, 20], "virtual": [69, 88, 286], "visibl": [0, 281], "vision": [0, 27, 81, 160, 248], "visit": 36, "visual": [0, 36, 49, 50, 51, 52, 54, 73], "visualis": [39, 44, 68, 223], "vjp": [213, 217, 218], "vol": [151, 152], "volum": 77, "volume_data": [11, 20], "volume_perserv": 274, "volume_sample_r": 77, "voxel": 253, "vrv": 33, "vu": [19, 32, 59, 72, 138, 159, 165, 168, 169, 170, 188, 204, 210, 213, 218, 225, 292, 294, 296, 297], "w": [0, 9, 11, 15, 20, 27, 36, 39, 51, 52, 61, 65, 68, 86, 98, 117, 119, 120, 121, 122, 124, 125, 126, 127, 136, 148, 150, 153, 154, 160, 187, 200, 201, 202, 205, 208, 212, 213, 215, 221, 222, 223, 224, 225, 226, 227, 231, 232, 233, 238, 239, 240, 241, 242, 243, 248, 249, 250, 251, 252, 254, 255, 256, 259, 261, 262, 271, 281, 296, 299, 301], "w_k": [226, 248], "wa": [25, 36, 39, 44, 65, 79, 102, 112, 113, 115, 116, 126, 130, 131, 132, 133, 134, 138, 140, 147, 148, 149, 150, 249, 269], "wai": [2, 8, 10, 17, 41, 42, 43, 45, 46, 56, 61, 71, 73], "walk": 14, "wandb": [49, 54, 73], "wandb_setup": [73, 273], "wandb_vi": [16, 39, 41, 42, 43, 45, 49, 50, 51, 52, 53, 54, 73, 273], "wang": [40, 71, 140, 275, 284], "want": [4, 11, 14, 17, 21, 22, 30, 66, 73, 85, 89, 92, 227, 238, 241], "warm": 152, "warn": [39, 169, 274], "wavdict": 20, "wave": [11, 253], "wavelength": [11, 253], "wavelet": [10, 19, 23, 50, 53, 72, 156, 157, 159, 169, 170, 175, 188, 204, 210, 212, 213, 218, 292, 296, 297], "waveletdenois": [10, 20, 53, 157, 175], "waveletdictdenois": 20, "waveletprior": [0, 20, 22, 50, 53], "we": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 68, 69, 70, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 89, 99, 102, 126, 136, 137, 141, 156, 162, 165, 183, 184, 204, 208, 213, 214, 215, 217, 223, 226, 231, 291, 296], "weight": [10, 13, 16, 20, 24, 25, 28, 31, 36, 39, 41, 42, 43, 45, 49, 50, 52, 53, 73, 88, 96, 108, 109, 111, 112, 113, 114, 115, 116, 117, 126, 135, 137, 138, 139, 142, 143, 148, 149, 150, 161, 166, 196, 197, 221, 245, 256, 287, 289], "weight_adv": [109, 111, 112, 113, 114, 115, 116], "weight_decai": [2, 16, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 53, 54], "weight_mc": 114, "weights_onli": [25, 39, 41, 53], "weiss": [25, 161, 248], "welcom": 56, "welford": 268, "well": [7, 12, 14, 21, 22, 36, 59, 65, 66, 71, 86, 88, 94, 95, 96, 97, 98, 104, 132, 162, 165, 202, 213, 216, 228, 271, 287], "were": [2, 40, 51, 54], "wgan": [2, 60, 110], "what": [17, 77], "when": [2, 4, 5, 11, 15, 28, 30, 33, 36, 37, 43, 44, 51, 56, 59, 60, 62, 65, 73, 77, 85, 87, 96, 97, 99, 102, 103, 120, 121, 136, 137, 152, 155, 159, 162, 166, 169, 170, 197, 213, 220, 227, 249, 260, 266, 277, 281], "where": [0, 2, 5, 7, 9, 11, 13, 15, 16, 20, 21, 22, 24, 25, 27, 28, 29, 33, 35, 36, 37, 39, 41, 42, 43, 45, 46, 50, 51, 52, 53, 57, 59, 64, 66, 67, 69, 73, 74, 75, 76, 78, 80, 81, 83, 84, 85, 86, 88, 89, 94, 95, 96, 97, 98, 99, 101, 102, 104, 105, 106, 107, 108, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 136, 139, 151, 152, 156, 157, 159, 161, 162, 163, 164, 165, 166, 169, 172, 173, 175, 181, 182, 187, 189, 190, 191, 192, 193, 194, 195, 196, 198, 200, 201, 202, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 234, 235, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 254, 255, 256, 258, 259, 262, 263, 265, 266, 270, 271, 275, 281, 282, 283, 285, 286, 287, 296, 299, 300], "wherea": [33, 35, 36, 59, 73, 99, 102, 120, 121, 202, 225, 234], "whether": [77, 89, 92, 110, 119, 131, 143, 145, 146, 147, 150, 151, 152, 159, 167, 188, 197, 245, 267, 286, 287, 288, 289, 293, 294, 300], "which": [5, 6, 8, 10, 11, 12, 13, 15, 20, 21, 22, 24, 25, 27, 30, 33, 34, 35, 36, 37, 39, 41, 43, 45, 46, 49, 50, 51, 53, 54, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 79, 85, 86, 89, 94, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 110, 126, 131, 135, 138, 148, 153, 154, 158, 159, 160, 163, 164, 165, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 201, 202, 207, 212, 213, 218, 221, 225, 228, 236, 237, 238, 240, 242, 243, 245, 264, 265, 268, 271, 272, 273, 276, 281, 282, 283, 284, 285, 287, 289, 293, 294, 298], "while": [2, 7, 11, 13, 14, 41, 59, 64, 68, 129, 132, 134, 143, 144, 145, 146, 149, 154, 159, 197, 236, 237], "whilst": 273, "white": [24, 35, 36, 66, 200, 201, 207, 213], "whiten": 0, "whole": [24, 25, 39, 42, 43, 44, 45, 46, 86, 98, 141, 155, 161, 268], "whose": [64, 93, 211, 228, 298, 300], "why": [35, 36], "wide": 76, "widefield_bpae_b": 76, "widefield_bpae_g": 76, "widefield_bpae_r": 76, "widehat": [20, 35, 36, 265, 266], "wider": 73, "width": [20, 77, 82, 137, 145, 146, 161, 208, 215, 223, 228, 253, 279, 296, 299], "wiki": [4, 11, 127, 198, 205, 209, 252], "wikimedia": [7, 33, 34, 37], "wikipedia": [4, 7, 11, 15, 33, 34, 37, 127, 198, 205, 209, 252], "window": [144, 150, 235], "window_s": 150, "wise": [2, 119, 211], "withbia": 148, "within": [58, 62, 66, 75, 77, 129, 132, 134, 143, 144, 145, 146, 149, 154, 236, 237], "without": [39, 40, 56, 66, 73, 77, 86, 98, 102, 126, 202, 212, 216, 218, 228, 249, 251, 256, 259, 276, 277, 281, 287], "work": [0, 7, 9, 11, 15, 16, 25, 30, 34, 35, 36, 39, 41, 53, 68, 81, 136, 148, 281], "worker": 85, "workflow": 56, "world": [7, 33, 34, 37, 40, 81], "wors": 44, "would": [0, 73], "wrap": [29, 49, 50, 51, 54, 58, 61, 73, 74, 87, 90, 91, 100, 103, 122, 130, 227, 274, 280, 281], "wrap_flatten_c": 227, "wrapper": [27, 65, 70, 83, 84, 104, 153, 154], "write": [20, 21, 22, 29, 30, 35, 36, 52, 62, 64, 73, 175, 265, 266], "writer": 301, "written": [60, 64, 159], "wv": [0, 10, 20, 22, 50, 53, 156, 157, 175], "wv_list": 0, "wvdim": [20, 156, 157, 175], "ww": 238, "www": 80, "wx": 50, "x": [0, 2, 5, 6, 7, 9, 11, 12, 13, 14, 15, 17, 20, 21, 22, 25, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 50, 51, 52, 53, 57, 59, 60, 61, 63, 64, 66, 67, 68, 69, 73, 76, 79, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 132, 135, 137, 138, 139, 141, 143, 144, 146, 148, 149, 150, 151, 152, 155, 156, 157, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 252, 253, 258, 261, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 280, 281, 282, 283, 284, 285, 286, 289, 290, 295, 301, 302, 303, 304], "x0": [35, 36, 52, 213], "x0_pred": 36, "x0_t": 36, "x2": [15, 81, 151, 152], "x3": 81, "x4": 81, "x64": [17, 39, 273], "x_": [20, 28, 29, 33, 37, 50, 51, 53, 59, 64, 69, 159, 162, 165, 189, 190, 191, 192, 193, 194, 195, 196, 213, 266, 270, 287], "x_0": [159, 190], "x_adj": 66, "x_bar": 33, "x_cur": 20, "x_dagger": [66, 213], "x_est": 13, "x_gd_rand": 13, "x_gd_spec": 13, "x_grai": 4, "x_gt": [0, 13, 21, 22, 28, 29, 31, 159, 162, 286, 287], "x_hat": [20, 40, 59, 61, 69, 289], "x_hist": 162, "x_i": [95, 96, 163, 179, 180], "x_in": 89, "x_init": [0, 10, 39, 53, 159, 161, 162, 218, 265, 266, 268], "x_k": [28, 29, 37, 50, 51, 53, 59, 64, 69, 159, 162, 165, 189, 190, 192, 193, 194, 195, 196, 270, 287], "x_lin": [7, 21, 22, 28, 29, 31, 33, 34, 37], "x_model": [0, 21, 22, 28, 29, 31], "x_n": 20, "x_net": [60, 61, 73, 86, 87, 88, 90, 91, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 153, 154, 273], "x_noisi": 35, "x_out": 24, "x_phase": 13, "x_phase_gd_rand": 13, "x_phase_gd_spec": 13, "x_phase_pnp": 13, "x_phase_spec": 13, "x_pnp": 13, "x_prev": [20, 28, 159, 162], "x_prox": [35, 66], "x_prox_scal": 35, "x_rgb": 4, "x_sampl": 35, "x_sampled_sc": 35, "x_shift": [68, 281], "x_spec": 13, "x_stretch_factor_min": [275, 282, 283, 284, 285], "x_t": [36, 266, 275, 282, 283, 284, 285], "x_train": 79, "x_true": [29, 35, 36], "x_tv": 21, "x_wv": 22, "xhat": [9, 20, 34, 35, 36, 159, 264, 266], "xlabel": 35, "xlin": [12, 14], "xlin2": 14, "xml": 80, "xprox": 14, "xprox2": 14, "xset": [59, 63, 64, 66, 159, 169, 182, 213, 218], "xt": 36, "xt_next": 36, "xxx": [57, 74, 75, 78, 80, 81, 83, 84], "xxxxxxxxxxx": 77, "xy": 253, "y": [0, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 24, 25, 28, 29, 31, 33, 34, 35, 36, 37, 39, 40, 42, 43, 45, 46, 49, 50, 51, 52, 53, 54, 57, 59, 60, 63, 64, 66, 67, 68, 69, 73, 79, 85, 86, 87, 88, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 104, 105, 106, 107, 109, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 131, 136, 137, 139, 145, 151, 152, 153, 154, 156, 157, 159, 161, 162, 165, 169, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 196, 200, 201, 202, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 226, 228, 229, 230, 231, 232, 233, 234, 240, 241, 242, 243, 248, 253, 258, 264, 265, 266, 268, 270, 271, 272, 273, 275, 281, 282, 286, 287, 289, 301], "y1": 66, "y2": [14, 66], "y_": [9, 224], "y_1": [12, 44, 102], "y_2": [12, 44, 102], "y_bar": 33, "y_denois": 35, "y_hat": [114, 115, 116, 273], "y_i": [42, 95, 96, 179, 180, 181], "y_in": 89, "y_scale": 35, "y_stretch_factor_min": [275, 282, 283, 284, 285], "y_t": [208, 223], "yaman": 102, "yann": [44, 46, 50], "yawli": 81, "yet": 7, "yield": [8, 50, 51, 175], "ylabel": 35, "yosida": [67, 172], "you": [0, 2, 4, 6, 11, 14, 19, 20, 25, 34, 35, 36, 37, 39, 41, 42, 43, 44, 45, 46, 49, 53, 54, 56, 58, 61, 66, 71, 73, 80, 85, 122, 126, 141, 227, 238, 241, 274], "your": [2, 14, 18, 19, 28, 38, 56, 66, 70, 71, 72, 73, 79, 85, 109, 111, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 144, 160, 169, 170, 172, 201, 204, 206, 210, 213, 218, 268, 270, 292, 294, 296], "yourself": [39, 61], "yscale": 13, "yset": [59, 63, 64, 66, 159, 182, 213, 218], "yyi": 57, "yyyi": 73, "z": [0, 2, 7, 11, 28, 52, 59, 64, 66, 67, 99, 105, 106, 107, 131, 136, 162, 165, 172, 186, 187, 189, 191, 192, 204, 207, 210, 213, 218, 219, 221, 229, 253, 270, 275, 282, 283, 284, 285], "z0": 253, "z10": [252, 253], "z11": [252, 253], "z4": [252, 253], "z5": [4, 11, 252, 253], "z6": [4, 11, 252, 253], "z7": [252, 253], "z8": [252, 253], "z9": [252, 253], "z_": [20, 28, 33, 53, 64, 69, 159, 165, 189, 190, 191, 192, 270, 287], "z_0": 190, "z_i": 99, "z_k": [28, 37, 53, 64, 69, 159, 165, 189, 190, 191, 192, 287], "z_p": 20, "z_prev": 28, "zebrafish": 76, "zenodo": [228, 237], "zernik": [4, 11, 252, 253], "zernike_polynomi": [4, 11, 252], "zero": [0, 4, 9, 11, 12, 14, 15, 25, 33, 35, 36, 39, 51, 66, 70, 73, 86, 98, 102, 103, 156, 197, 200, 201, 207, 212, 213, 221, 223, 226, 227, 238, 249, 251, 255, 256, 277, 304], "zero_boundari": 274, "zero_grad": [25, 73], "zeros_lik": [15, 20, 51, 52, 64, 213], "zeta": [35, 266], "zhang": [5, 27, 160], "zhou": 35, "zip": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 75, 78, 83], "zoom": [275, 282, 285, 298], "zoom_factor_min": [275, 282, 283, 284, 285], "zoran": [25, 161], "zuo": [27, 160], "zygalaki": 269, "\u00f6ktem": 52}, "titles": ["Radio interferometric imaging with deepinverse", "Computation times", "Imaging inverse problems with adversarial networks", "Computation times", "A tour of blur operators", "Image deblurring with custom deep explicit prior.", "Creating your own dataset", "Reconstructing an image using the deep image prior.", "Using huggingface dataset", "Single photon lidar operator for depth ranging.", "Saving and loading models", "3D diffraction PSF", "Stacking and concatenating forward operators.", "Random phase retrieval and reconstruction methods.", "Creating a forward operator.", "A tour of forward sensing operators", "Training a reconstruction network.", "Image transforms for equivariance &amp; augmentations", "Computation times", "Examples", "3D wavelet denoising", "Image deblurring with Total-Variation (TV) prior", "Image inpainting with wavelet prior", "Computation times", "Expected Patch Log Likelihood (EPLL) for Denoising and Inpainting", "Patch priors for limited-angle computed tomography", "Computation times", "DPIR method for PnP image deblurring.", "PnP with custom optimization algorithm (Condat-Vu Primal-Dual)", "Plug-and-Play algorithm with Mirror Descent for Poisson noise inverse problems.", "Regularization by Denoising (RED) for Super-Resolution.", "Vanilla PnP for computed tomography (CT).", "Computation times", "Building your custom sampling algorithm.", "Image reconstruction with a diffusion model", "Implementing DiffPIR", "Implementing DPS", "Uncertainty quantification with PnP-ULA.", "Computation times", "Self-supervised MRI reconstruction with Artifact2Artifact", "Image transformations for Equivariant Imaging", "Self-supervised learning with Equivariant Imaging for MRI.", "Self-supervised learning from incomplete measurements of multiple operators.", "Self-supervised denoising with the Neighbor2Neighbor loss.", "Self-supervised learning with measurement splitting", "Self-supervised denoising with the SURE loss.", "Self-supervised denoising with the UNSURE loss.", "Computation times", "Computation times", "Deep Equilibrium (DEQ) algorithms for image deblurring", "Learned Iterative Soft-Thresholding Algorithm (LISTA) for compressed sensing", "Learned iterative custom prior", "Learned Primal-Dual algorithm for CT scan.", "Unfolded Chambolle-Pock for constrained image inpainting", "Vanilla Unfolded algorithm for super-resolution", "Computation times", "How to Contribute", "Datasets", "Denoisers", "Iterative Reconstruction (PnP, RED, etc.)", "Loss", "Metrics", "Using multiple GPUs", "Math Notation", "Optim", "Other Reconstruction Methods", "Physics", "Diffusion Algorithms", "Transforms", "Unfolded Algorithms", "Utils", "DeepInverse: a Pytorch library for imaging with deep learning", "Computation times", "Trainer", "CBSD68", "DIV2K", "FMD", "FastMRISliceDataset", "Flickr2kHR", "HDF5Dataset", "LidcIdriSliceDataset", "LsdirHR", "PatchDataset", "Set14HR", "Urban100HR", "generate_dataset", "Artifact2ArtifactLoss", "BaseLossScheduler", "EILoss", "FNEJacobianSpectralNorm", "InterleavedEpochLossScheduler", "InterleavedLossScheduler", "JacobianSpectralNorm", "Loss", "MCLoss", "MOEILoss", "MOILoss", "Neighbor2Neighbor", "Phase2PhaseLoss", "R2RLoss", "RandomLossScheduler", "ScoreLoss", "SplittingLoss", "StepLossScheduler", "SupLoss", "SureGaussianLoss", "SurePGLoss", "SurePoissonLoss", "TVLoss", "DiscriminatorLoss", "DiscriminatorMetric", "GeneratorLoss", "SupAdversarialDiscriminatorLoss", "SupAdversarialGeneratorLoss", "UAIRGeneratorLoss", "UnsupAdversarialDiscriminatorLoss", "UnsupAdversarialGeneratorLoss", "L1L2", "LPIPS", "LpNorm", "MAE", "MSE", "Metric", "NIQE", "NMSE", "PSNR", "QNR", "SSIM", "ArtifactRemoval", "AutoEncoder", "BM3D", "CSGMGenerator", "ConvDecoder", "DCGANDiscriminator", "DCGANGenerator", "DRUNet", "DeepImagePrior", "DiffUNet", "DnCNN", "EPLLDenoiser", "ESRGANDiscriminator", "EquivariantDenoiser", "GSDRUNet", "ICNN", "MedianFilter", "PDNet_DualBlock", "PDNet_PrimalBlock", "PatchGANDiscriminator", "Restormer", "SCUNet", "SwinIR", "TGVDenoiser", "TVDenoiser", "TimeAgnosticNet", "TimeAveragingNet", "UNet", "WaveletDenoiser", "WaveletDictDenoiser", "to_complex_denoiser", "BaseOptim", "DPIR", "EPLL", "FixedPoint", "L12Prior", "L1Prior", "OptimIterator", "PatchNR", "PatchPrior", "PnP", "Potential", "Prior", "RED", "ScorePrior", "TVPrior", "Tikhonov", "WaveletPrior", "Bregman", "BregmanL2", "Bregman_ICNN", "BurgEntropy", "NegEntropy", "AmplitudeLoss", "DataFidelity", "IndicatorL2", "L1", "L2", "LogPoissonLikelihood", "PoissonLikelihood", "optim_builder", "ADMMIteration", "CPIteration", "DRSIteration", "FISTAIteration", "GDIteration", "HQSIteration", "PGDIteration", "SMIteration", "GaussianMixtureModel", "conjugate_gradient", "gradient_descent", "Blur", "BlurFFT", "CompressedSensing", "Decolorize", "DecomposablePhysics", "Demosaicing", "Denoising", "Downsampling", "DynamicMRI", "GammaNoise", "GaussianNoise", "Haze", "Inpainting", "LinearPhysics", "LogPoissonNoise", "MRI", "Pansharpen", "PhaseRetrieval", "Physics", "PoissonGaussianNoise", "PoissonNoise", "RadioInterferometry", "RandomPhaseRetrieval", "SequentialMRI", "SinglePhotonLidar", "SinglePixelCamera", "SpaceVaryingBlur", "TimeMixin", "Tomography", "UniformGaussianNoise", "UniformNoise", "adjoint_function", "bicubic_filter", "bilinear_filter", "gaussian_blur", "sinc_filter", "IRadon", "Radon", "conv2d", "conv2d_fft", "conv3d_fft", "conv_transpose2d", "conv_transpose2d_fft", "conv_transpose3d_fft", "histogram", "histogramdd", "multiplier", "multiplier_adjoint", "product_convolution2d", "Artifact2ArtifactSplittingMaskGenerator", "BaseMaskGenerator", "BernoulliSplittingMaskGenerator", "DiffractionBlurGenerator", "DiffractionBlurGenerator3D", "EquispacedMaskGenerator", "GaussianMaskGenerator", "GaussianSplittingMaskGenerator", "GeneratorMixture", "MotionBlurGenerator", "Phase2PhaseSplittingMaskGenerator", "PhysicsGenerator", "ProductConvolutionBlurGenerator", "RandomMaskGenerator", "SigmaGenerator", "DDRM", "DPS", "DiffPIR", "DiffusionSampler", "MonteCarlo", "SKRock", "ULA", "test", "train", "AdversarialTrainer", "CPABDiffeomorphism", "Homography", "Reflect", "Rotate", "Scale", "Shift", "ShiftTime", "Transform", "Affine", "Euclidean", "PanTiltRotate", "Similarity", "BaseDEQ", "BaseUnfold", "DEQ_builder", "unfolded_builder", "TensorList", "demo_mri_model", "get_freer_gpu", "load_image", "load_url_image", "ones_like", "plot", "plot_curves", "plot_inset", "plot_ortho3D", "plot_parameters", "plot_videos", "rand_like", "randn_like", "zeros_like"], "titleterms": {"1": 17, "2": 17, "3": 17, "3d": [11, 20], "A": [4, 15], "The": [0, 35, 36], "adjoint_funct": 231, "admmiter": 189, "advanc": [19, 68], "adversari": [2, 19, 58, 60], "adversarialtrain": 273, "affin": 282, "algorithm": [5, 7, 20, 21, 22, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 49, 50, 51, 52, 54, 59, 67, 69], "all": 35, "ambientgan": 2, "amplitudeloss": 181, "an": [7, 22, 35, 59], "angl": 25, "appli": [8, 9], "approxim": 36, "artifact2artifact": 39, "artifact2artifactloss": 86, "artifact2artifactsplittingmaskgener": 249, "artifactremov": 128, "augment": 17, "autoencod": 129, "back": 65, "base": [5, 6, 16, 20, 21, 22, 27, 28, 30, 41, 42, 43, 45, 46, 49, 50, 51, 53, 54], "basedeq": 286, "baselossschedul": 87, "basemaskgener": 250, "baseoptim": 159, "baseunfold": 287, "basic": [4, 19], "benefit": 14, "bernoullisplittingmaskgener": 251, "bicubic_filt": 232, "bilinear_filt": 233, "blur": [4, 5, 15, 21, 27, 66, 200], "blurfft": 201, "bm3d": 130, "bregman": [64, 176], "bregman_icnn": 178, "bregmanl2": 177, "brigg": 0, "buffer": 8, "build": 33, "burgentropi": 179, "camera": 15, "carlo": [34, 67], "cbsd68": 74, "chain": 67, "chambol": 53, "check": 46, "class": [30, 33], "classic": 58, "comparison": 13, "complex": 58, "compress": [15, 50, 51, 66], "compressedsens": 202, "comput": [1, 3, 15, 18, 23, 25, 26, 31, 32, 38, 47, 48, 55, 72], "concaten": 12, "condat": 28, "condit": 2, "confoc": 11, "conjugate_gradi": 198, "constrain": 53, "construct": 13, "contribut": 56, "conv2d": 238, "conv2d_fft": 239, "conv3d_fft": 240, "conv_transpose2d": 241, "conv_transpose2d_fft": 242, "conv_transpose3d_fft": 243, "convdecod": 132, "convolut": [4, 11], "correct": 13, "cpabdiffeomorph": 274, "cpiter": 190, "creat": [6, 8, 9, 14, 20, 33, 34, 37], "csgm": 2, "csgmgener": 131, "ct": [31, 52], "custom": [5, 14, 28, 30, 33, 51, 52], "data": [5, 6, 8, 10, 16, 17, 20, 21, 22, 27, 28, 29, 30, 31, 35, 39, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 64, 65], "datafidel": 182, "dataload": [6, 8], "dataset": [2, 5, 6, 8, 16, 21, 22, 27, 28, 30, 41, 42, 43, 45, 46, 49, 50, 51, 52, 53, 54, 57], "dcgandiscrimin": 133, "dcgangener": 134, "ddrm": 264, "deblur": [5, 21, 27, 49], "decolor": [15, 203], "decompos": 14, "decomposablephys": 204, "deep": [5, 7, 49, 58, 59, 69, 71], "deepimageprior": 136, "deepinvers": [0, 71], "defin": [2, 5, 7, 10, 16, 28, 29, 33, 34, 36, 37, 39, 44, 49, 50, 51, 52, 53, 54, 66], "definit": [25, 30], "degrad": [5, 6, 16, 21, 22, 27, 28, 30, 41, 42, 49, 50, 51, 52, 53, 54], "dehaz": 66, "demo_mri_model": 291, "demosa": [15, 205], "denois": [13, 15, 17, 20, 24, 30, 34, 35, 36, 43, 45, 46, 58, 206], "depend": 66, "depth": 9, "deq": 49, "deq_build": 288, "descent": [13, 29], "develop": 71, "diffpir": [35, 266], "diffract": [4, 11], "diffractionblurgener": 252, "diffractionblurgenerator3d": 253, "diffunet": 137, "diffus": [34, 36, 67], "diffusionsampl": 267, "dip": 7, "discriminatorloss": 109, "discriminatormetr": 110, "distort": 61, "distribut": 66, "div2k": 75, "dncnn": 138, "downsampl": 207, "dp": [36, 265], "dpir": [27, 160], "drsiter": 191, "drunet": 135, "dual": [28, 52], "dykstra": 20, "dynamicmri": 208, "eiloss": 88, "em": 25, "epll": [24, 25, 161], "eplldenois": 139, "equilibrium": [49, 69], "equispacedmaskgener": 254, "equivari": [17, 40, 41, 58], "equivariantdenois": 141, "esrgandiscrimin": 140, "etc": 59, "euclidean": 283, "evalu": [5, 21, 22, 27, 28, 29, 30, 31], "exampl": [19, 34, 73, 79, 82, 84, 85, 86, 88, 89, 93, 94, 96, 97, 98, 102, 104, 105, 106, 107, 109, 111, 112, 113, 114, 115, 116, 128, 131, 132, 133, 134, 135, 136, 137, 138, 141, 142, 144, 145, 146, 147, 155, 156, 157, 159, 160, 161, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 188, 190, 195, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 234, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 264, 265, 266, 267, 268, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 298, 299, 300, 301], "expect": 24, "explicit": 5, "explor": [21, 22], "extens": 20, "fastmrislicedataset": 77, "featur": 71, "fidel": [35, 52, 64], "filter": [9, 65], "find": 71, "fistaiter": 192, "fixedpoint": 162, "flickr2khr": 78, "fmd": 76, "fnejacobianspectralnorm": 89, "forward": [7, 9, 10, 12, 14, 15, 16, 25, 28, 31, 33, 34, 37, 53, 66], "from": [7, 8, 13, 15, 33, 34, 37, 42], "fstep": 28, "function": 66, "gammanois": 209, "gan": 2, "gaussian_blur": 234, "gaussianmaskgener": 255, "gaussianmixturemodel": 197, "gaussiannois": 210, "gaussiansplittingmaskgener": 256, "gditer": 193, "gener": [2, 4, 5, 6, 7, 9, 11, 12, 13, 14, 16, 21, 22, 27, 33, 34, 35, 37, 41, 42, 43, 45, 46, 49, 50, 51, 53, 54, 64, 66], "generate_dataset": 85, "generatorloss": 111, "generatormixtur": 257, "get": 71, "get_freer_gpu": 292, "gpu": 62, "gradient": [13, 50, 51], "gradient_desc": 199, "groundtruth": 0, "gsdrunet": 142, "gstep": 28, "haze": 211, "hd5dataset": 57, "hdf5dataset": 79, "help": 71, "histogram": 244, "histogramdd": 245, "homographi": 275, "how": 56, "hqsiter": 194, "huggingfac": 8, "icnn": 143, "imag": [0, 2, 5, 6, 7, 12, 13, 14, 15, 16, 17, 20, 21, 22, 24, 25, 27, 28, 30, 31, 33, 34, 37, 40, 41, 42, 43, 45, 46, 49, 50, 51, 53, 54, 57, 59, 66, 71], "implement": [35, 36, 59], "import": 0, "incomplet": 42, "indicatorl2": 183, "initi": 13, "inpaint": [15, 22, 24, 53, 212], "instal": 71, "interferometr": [0, 66], "interleavedepochlossschedul": 90, "interleavedlossschedul": 91, "internet": [7, 8, 13, 15, 33, 34, 37], "introduct": [60, 61, 66], "invers": [2, 5, 21, 22, 27, 28, 29, 31, 35, 36], "involv": 30, "iradon": 236, "iter": [20, 33, 50, 51, 52, 59, 64], "jacobianspectralnorm": 92, "knee": 41, "l1": 184, "l12prior": 163, "l1l2": 117, "l1prior": 164, "l2": 185, "langevin": 67, "lead": 71, "learn": [19, 41, 42, 44, 46, 50, 51, 52, 60, 65, 71], "level": 46, "librari": [8, 71], "lidar": [9, 66], "lidcidrislicedataset": 80, "like": 20, "likelihood": [24, 37], "limit": 25, "linear": [14, 66], "linearphys": 213, "list": 63, "lista": 50, "load": [5, 6, 7, 8, 10, 13, 15, 16, 20, 21, 22, 24, 25, 27, 28, 29, 30, 31, 33, 34, 36, 37, 39, 41, 42, 43, 45, 46, 49, 50, 51, 52, 53, 54], "load_imag": 293, "load_url_imag": 294, "log": 24, "logpoissonlikelihood": 186, "logpoissonnois": 214, "loop": 25, "loss": [39, 43, 44, 45, 46, 60, 93], "low": [49, 54], "lpip": 118, "lpnorm": 119, "lsdirhr": 81, "mae": 120, "magnet": 66, "markov": 67, "match": 9, "math": 63, "mathemat": 63, "mcloss": 94, "mcmc": 37, "measur": [0, 7, 9, 13, 33, 34, 37, 42, 44, 50, 51], "medianfilt": 144, "method": [13, 27, 65], "metric": [61, 122], "microscop": 11, "mirror": 29, "mixtur": 4, "mmse": 34, "model": [2, 7, 9, 10, 16, 21, 22, 24, 25, 27, 28, 29, 30, 31, 33, 34, 36, 37, 39, 44, 52, 53], "modul": 28, "moeiloss": 95, "moiloss": 96, "mont": [34, 67], "montecarlo": 268, "motion": 4, "motionblurgener": 258, "mri": [15, 39, 41, 215], "mse": 121, "multipl": [20, 42, 62], "multipli": 246, "multiplier_adjoint": 247, "natur": 0, "negentropi": 180, "neighbor2neighbor": [43, 97], "network": [2, 16, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 58, 60, 65], "new": 66, "niqe": 123, "nmse": 124, "nois": [7, 25, 29, 33, 34, 37, 46, 66], "noisi": [43, 45, 46], "notat": 63, "ones_lik": 295, "oper": [0, 4, 5, 7, 9, 10, 12, 14, 15, 16, 20, 21, 22, 25, 27, 28, 30, 31, 33, 34, 37, 41, 42, 49, 50, 51, 52, 53, 54, 66], "optim": [5, 19, 21, 22, 28, 64], "optim_build": 188, "optimiter": 165, "other": [65, 70], "our": 14, "overal": 13, "own": 6, "packag": 0, "pan": 15, "pansharpen": 216, "pantiltrot": 284, "paramet": [25, 31, 41, 42, 43, 45, 46, 49, 50, 51, 52, 54, 64, 66], "particular": 30, "patch": [19, 24, 25], "patchdataset": [57, 82], "patchgandiscrimin": 147, "patchnr": [25, 166], "patchprior": 167, "path": [5, 6, 10, 16, 20, 21, 22, 27, 28, 29, 30, 31, 41, 42, 43, 45, 46, 49, 50, 51, 52, 53, 54], "pattern": 0, "pdnet": 52, "pdnet_dualblock": 145, "pdnet_primalblock": 146, "perceptu": 61, "pgditer": 195, "phantom": 52, "phase": [13, 66], "phase2phaseloss": 98, "phase2phasesplittingmaskgener": 259, "phaseretriev": 217, "photon": [9, 66], "physic": [5, 39, 66, 218], "physicsgener": 260, "pixel": 15, "pixelwis": 66, "plai": [17, 19, 29], "plot": [7, 9, 21, 22, 25, 28, 29, 31, 33, 34, 37, 50, 51, 54, 70, 296], "plot_curv": 297, "plot_inset": 298, "plot_ortho3d": 299, "plot_paramet": 300, "plot_video": 301, "plug": [17, 19, 29], "pnp": [13, 27, 28, 29, 30, 31, 37, 54, 59, 168], "pock": 53, "poisson": 29, "poissongaussiannois": 219, "poissonlikelihood": 187, "poissonnois": 220, "potenti": [64, 169], "precondit": 33, "predefin": 59, "prep": 39, "prepar": 44, "pretrain": 58, "primal": [28, 52], "prior": [0, 5, 7, 19, 21, 22, 25, 30, 33, 37, 51, 52, 59, 64, 170], "problem": [0, 2, 5, 20, 21, 22, 27, 28, 29, 30, 31, 35, 36], "product_convolution2d": 248, "productconvolutionblurgener": 261, "project": 65, "proxim": [50, 51], "psf": 11, "psnr": 125, "put": 35, "pytorch": 71, "qnr": 126, "quantif": 37, "r2rloss": 99, "radio": [0, 66], "radiointerferometri": 221, "radon": 237, "rand_lik": 302, "randn_lik": 303, "random": [13, 52], "randomlossschedul": 100, "randommaskgener": 262, "randomphaseretriev": 222, "rang": 9, "reconstruct": [5, 7, 13, 16, 25, 34, 39, 41, 42, 53, 59, 65], "recov": 9, "red": [30, 59, 171], "reflect": 276, "regular": [30, 60], "remot": 66, "requir": 0, "resolut": [15, 30, 49, 54, 66], "reson": 66, "restorm": 148, "result": [5, 6, 7, 9, 10, 16, 20, 21, 22, 27, 28, 29, 30, 31, 33, 34, 37, 41, 42, 43, 45, 46, 49, 50, 51, 52, 53, 54], "retriev": [13, 66], "ri": 0, "rotat": 277, "run": [7, 25, 33, 34, 37], "sampl": [0, 19, 33, 34, 35, 37], "sampler": [33, 34, 37], "save": [10, 53], "scale": 278, "scan": 52, "schedul": [36, 60], "scoreloss": 101, "scoreprior": 172, "scunet": 149, "self": [19, 39, 41, 42, 43, 44, 45, 46, 60], "sens": [15, 50, 66], "sequentialmri": 223, "set": [5, 16, 21, 22, 25, 27, 28, 31, 41, 42, 43, 45, 46, 53], "set14hr": 83, "setup": [5, 6, 10, 13, 16, 20, 21, 22, 27, 28, 29, 30, 31, 41, 42, 43, 45, 46, 49, 50, 51, 52, 53, 54], "sharpen": 15, "shift": 279, "shifttim": 280, "shuffl": 8, "sigmagener": 263, "signal": [9, 13], "similar": 285, "simpl": 68, "simul": 0, "sinc_filt": 235, "singl": [9, 15, 66], "singlephotonlidar": 224, "singlepixelcamera": 225, "skrock": 269, "smiter": 196, "soft": 50, "solv": [0, 5, 20, 21, 22, 27, 28, 31], "space": 4, "spacevaryingblur": 226, "spectral": 13, "split": 44, "splittingloss": 102, "ssim": 127, "stack": 12, "standard": 33, "start": 71, "step": [35, 36], "steplossschedul": 103, "stream": 8, "subsampl": 42, "summari": 58, "supadversarialdiscriminatorloss": 112, "supadversarialgeneratorloss": 113, "super": [15, 30, 54, 66], "supervis": [19, 39, 41, 42, 43, 44, 45, 46, 60], "suploss": 104, "sure": 45, "suregaussianloss": 105, "surepgloss": 106, "surepoissonloss": 107, "swinir": 150, "symbol": 63, "tensorlist": [70, 290], "term": 52, "test": [16, 24, 25, 39, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 70, 271], "tgvdenois": 151, "thi": 30, "threshold": 50, "tikhonov": 174, "time": [1, 3, 18, 23, 26, 32, 38, 47, 48, 55, 65, 72], "timeagnosticnet": 153, "timeaveragingnet": 154, "timemixin": 227, "to_complex_denois": 158, "togeth": 35, "toi": [9, 12, 14], "tomographi": [15, 25, 31, 66, 228], "total": 21, "tour": [4, 15], "train": [2, 16, 25, 39, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 70, 272], "trainabl": 52, "trainer": 73, "transform": [8, 17, 40, 68, 281], "tv": 21, "tvdenois": 152, "tvloss": 108, "tvprior": 173, "uair": 2, "uairgeneratorloss": 114, "ula": [33, 37, 270], "uncertainti": 37, "unet": 155, "unfold": [19, 50, 51, 52, 53, 54, 69], "unfolded_build": 289, "uniformgaussiannois": 229, "uniformnois": 230, "unsupadversarialdiscriminatorloss": 115, "unsupadversarialgeneratorloss": 116, "unsur": 46, "up": [5, 16, 21, 22, 27, 28, 31, 41, 42, 43, 45, 46, 53], "urban100hr": 84, "us": [7, 8, 14, 20, 35, 36, 62, 73, 79, 82, 84, 85, 86, 88, 89, 93, 94, 96, 97, 98, 102, 104, 105, 106, 107, 109, 111, 112, 113, 114, 115, 116, 128, 131, 132, 133, 134, 135, 136, 137, 138, 141, 142, 144, 145, 146, 147, 155, 156, 157, 159, 160, 161, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 188, 190, 195, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 234, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 264, 265, 266, 267, 268, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 298, 299, 300, 301], "util": [60, 61, 64, 69, 70], "vanilla": [31, 54], "vari": [4, 65], "variat": 21, "verifi": [12, 14], "video": 68, "visual": 13, "volum": 20, "vu": 28, "wavelet": [0, 20, 22], "waveletdenois": 156, "waveletdictdenois": 157, "waveletprior": 175, "weight": [0, 51, 54, 58], "widefield": 11, "your": [6, 33, 35, 36], "zeros_lik": 304}})